//
// ===================================================================
// Title      : Provider Example MOF
// Filename   : ProviderExample.mof
// Version    : 0.1
// Date       : 01/23/1999
// Description: 
// ===================================================================

// ===================================================================
// EXP_UnitaryComputerSystem
// ===================================================================
   [Description (
       "A class derived from ComputerSystem that represents a Desktop, "
       "Mobile, NetPC, Server or other type of a single node Computer "
       "System.")
   ] 
class EXP_UnitaryComputerSystem : CIM_ComputerSystem
{
      [Description (
	  "This object contains the data needed to find either the "
	  "initial load device (its key) or the boot service to "
	  "request the operating system to start up. In addition, "
	  "the load parameters (ie, a pathname and parameters) "
	  "may also be specified.")
      ]
   string InitialLoadInfo[];
      [Description (
	  "This object contains the data identifying either the "
	  "initial load device (its key) or the boot service that "
	  "requested the last operating system load. In addition, "
	  "the load parameters (ie, a pathname and parameters) "
	  "may also be specified."),
	 MappingStrings {
	  "MIB.IETF|HOST-RESOURCES-MIB.hrSystemInitialLoadDevice",
	  "MIB.IETF|HOST-RESOURCES-MIB.hrSystemInitialLoadParameters", 
        "MIF.DMTF|Host System|001.3"}
      ]
   string LastLoadInfo;
      [Description (
	  "If enabled (value = 4), the UnitaryComputerSystem can be "
	  "reset via hardware (e.g. the power and reset buttons). If "
 	  "disabled (value = 3), hardware reset is not allowed. In "
	  "addition to Enabled and Disabled, other Values for the "
	  "property are also defined - \"Not Implemented\" (5), "
	  "\"Other\" (1) and \"Unknown\" (2)."),
       ValueMap {"1", "2", "3", "4", "5"},
	 Values {"Other", "Unknown", "Disabled",
	       "Enabled", "Not Implemented"},
       MappingStrings {"MIF.DMTF|System Hardware Security|001.4"}
      ]
   uint16 ResetCapability;
      [Description (
	  "Boolean indicating that the ComputerSystem, with its "
	  "running OperatingSystem, supports power management. This "
	  "boolean does not indicate that power management features are "
	  "currently enabled, or if enabled, what features are "
	  "supported. Refer to the PowerManagementCapabilities array "
	  "for this information. If this boolean is false, the integer "
	  "value 1 for the string, \"Not Supported\", should be the "
	  "only entry in the PowerManagementCapabilities array.")
      ]
   boolean PowerManagementSupported;	
      [Description(
	  "Indicates the specific power-related capabilities of a "
	  "ComputerSystem and its associated running OperatingSystem. "
	  "The values, 0=\"Unknown\", 1=\"Not Supported\", and "
	  "2=\"Disabled\" are self-explanatory. "
	  "The value, 3=\"Enabled\" indicates that the power management "
	  "features are currently enabled but the exact feature set "
	  "is unknown or the information is unavailable. "
	  "\"Power Saving Modes Entered Automatically\" (4) describes "
	  "that a system can change its power state based on usage or "
	  "other criteria. \"Power State Settable\" (5) indicates that "
	  "the SetPowerState method is supported. \"Power Cycling "
        "Supported\" (6) indicates that the SetPowerState method "
	  "can be invoked with the PowerState input variable set to 5 ("
	  "\"Power Cycle\"). \"Timed Power On Supported\" (7) indicates "
	  "that the SetPowerState method can be invoked with the Power"
	  "State input variable set to 5 (\"Power Cycle\") and the Time "
	  "parameter set to a specific date and time, or interval, "
	  "for power-on."),
       Values {"Unknown", "Not Supported", "Disabled", 
	       "Enabled", "Power Saving Modes Entered Automatically",
	       "Power State Settable", "Power Cycling Supported",
	       "Timed Power On Supported"},
       MappingStrings {"MIF.DMTF|System Power Controls|001.2"}
      ]
   uint16 PowerManagementCapabilities[];
      [Description(
        "Indicates the current power state of the ComputerSystem and "
        "its associated OperatingSystem. Regarding the Power Save "
        "states, these are defined as follows: Value 4 (\"Power Save "
        "- Unknown\") indicates that the System is known to be in a "
        "power save mode, but its exact status in this mode is "
        "unknown; 2 (\"Power Save - Low Power Mode\") indicates that "
        "the System is in a power save state but still functioning, "
        "and may exhibit degraded performance; 3 (\"Power Save - "
        "Standby\") describes that the System is not functioning but "
        "could be brought to full power 'quickly'; value 7 (\"Power Save "
        "- Warning\") indicates that the ComputerSystem is in a warning "
        "state, though also in a power save mode; and, values 8 and 9 "
        "describe the ACPI \"Hibernate\" and \"Soft Off\" states."),
       Values {"Unknown", "Full Power", "Power Save - Low Power Mode", 
             "Power Save - Standby", "Power Save - Unknown", 
             "Power Cycle", "Power Off", "Power Save - Warning", 
             "Power Save - Hibernate", "Power Save - Soft Off"}
      ]
   uint16 PowerState;
      [Description (
        "The event that caused the System to power up. This "
        "information is available in SMBIOS, in the Type 1 structure, "
        "the Wake Up Type attribute."),
       Values {"Reserved", "Other", "Unknown", "APM Timer", 
             "Modem Ring", "LAN Remote", "Power Switch", "PCI PME#", 
             "A/C Power Restored"}
      ]
   uint16 WakeUpType;
      [Description(
        "SetPowerState defines the desired power state of a "
        "ComputerSystem and its running OperatingSystem, and when "
        "the system should be put into that state. The PowerState "
        "parameter is specified as one of the following integer "
        "values: 1=\"Full Power\", 2=\"Power Save - Low Power Mode\", "
        "3=\"Power Save - Standby\", 4=\"Power Save - Other\", "
        "5=\"Power Cycle\", 6=\"Power Off\", 7=\"Hibernate\" and "
        "8=\"Soft Off\". The Time parameter (for all state changes "
        "but 5, \"Power Cycle\") indicates when the power state "
        "should be set, either as a regular date-time value or as "
        "an interval value (where the interval begins when the "
        "method invocation is received). When the PowerState "
        "parameter is equal to 5, \"Power Cycle\", the Time "
        "parameter indicates when the system should power on "
        "again. Power off is immediate. SetPowerState should "
        "return 0 if successful, 1 if the specified State and "
        "Time request is not supported, and some other value if "
        "any other error occurred. In a subclass, the "
        "set of possible return codes could be specified, using a "
        "ValueMap qualifier on the method. The strings to which the "
        "ValueMap contents are 'translated' may also be specified in "
        "the subclass as a Values array qualifier.") 
      ]
   uint32 SetPowerState(
    [IN, ValueMap {"1", "2", "3", "4", "5", "6", "7", "8"},
         Values {"Full Power", "Power Save - Low Power Mode", 
          "Power Save - Standby", "Power Save - Other", 
          "Power Cycle", "Power Off", "Hibernate", "Soft Off"}] 
         uint16 PowerState);
    uint16 example[];
};


// ===================================================================
// UnitaryComputerSystem
// ===================================================================
   [Description (
       "An example")
   ] 
class EXP_DemoComputerSystem : EXP_UnitaryComputerSystem
{
   uint32 MyMethod(
    [IN, ValueMap {"1", "2", "3", "4", "5", "6", "7", "8"},
         Values {"Full Power", "Power Save - Low Power Mode", 
          "Power Save - Standby", "Power Save - Other", 
          "Power Cycle", "Power Off", "Hibernate", "Soft Off"}] 
         uint16 PowerState);

};

// Example association that is dynamically served
//
 [ASSOCIATION,
 	Description ("An example association"),
	provider("c++::associatortest")   
 ] 
class EXP_DemoAssociation{
	[Aggregate, Key, Description (
		"The parent element in the association.") ] 
	CIM_ComputerSystem ref  firstRef;

	[Key, Description ("The child element in the association.") ]
	CIM_ComputerSystem ref  secondRef;
};
													 
