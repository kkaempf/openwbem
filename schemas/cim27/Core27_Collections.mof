// ===================================================================
// Title:       Core Collections and Redundancy 2.7
// Filename:    Core27_Collections.mof
// Version:     2.7.0
// Release:     Preliminary (2.6 split)
// Date:        06/09/02
// ===================================================================
// Copyright 2002 Distributed Management Task Force, Inc. (DMTF).
// All rights reserved.  
// DMTF is a not-for-profit association of industry members dedicated 
// to promoting enterprise and systems management and interoperability. 
// DMTF specifications and documents may be reproduced for uses
// consistent with this purpose by members and non-members, 
// provided that correct attribution is given. 
// As DMTF specifications may be revised from time to time, 
// the particular version and release date should always be noted.
//
// Implementation of certain elements of this standard or proposed 
// standard may be subject to third party patent rights, including 
// provisional patent rights (herein "patent rights"). DMTF makes 
// no representations to users of the standard as to the existence 
// of such rights, and is not responsible to recognize, disclose, or
// identify any or all such third party patent right, owners or 
// claimants, nor for any incomplete or inaccurate identification or 
// disclosure of such rights, owners or claimants. DMTF shall have no 
// liability to any party, in any manner or circumstance, under any 
// legal theory whatsoever, for failure to recognize, disclose, or 
// identify any such third party patent rights, or for such party’s
// reliance on the standard or incorporation thereof in its product, 
// protocols or testing procedures. DMTF shall have no liability to 
// any party implementing such standard, whether such implementation 
// is foreseeable or not, nor to any patent owner or claimant, and shall 
// have no liability or responsibility for costs or losses incurred if 
// a standard is withdrawn or modified after publication, and shall be
// indemnified and held harmless by any party implementing the 
// standard from any and all claims of infringement by a patent owner 
// for such implementations.
//
// For information about patents held by third-parties which have 
// notified the DMTF that, in their opinion, such patent may relate to 
// or impact implementations of DMTF standards, visit 
// http://www.dmtf.org/about/policies/disclosures.php.
// ===================================================================
// Description: The Core Model defines basic management concepts. 
//              This Core file defines the concepts of Collections
//              and Redundancy.  
//
//              The object classes below are listed in an order that
//              avoids forward references. Required objects, defined 
//              by other working groups, are omitted.
// ==================================================================
// Prerequisite:  Core27_Qualifiers
//                Core27_CoreElements (ME & MSE)
// ==================================================================
// Change Log for v2.7
// CR639 - Add LogicalPortGroup.
// CR642 - Add Profile and ElementProfile
// CR684 - Add SystemSpecificCollection and HostedCollection
// CR722 - Update description for StorageRedundancyGroup
// CR752 - Add RedundancySet, SparedSet, IsSpare, StorageRedundancySet,
//         and ExtraCapacitySet.
//       - Update the description for RedundancyGroup
// CR760 - Add OrderedMemberOfCollection
// ================================================================== 

#pragma locale ("en_US")

// ==================================================================
//    Collection 
// ================================================================== 
[Abstract, Version ("2.6.0"), Description (   
    "Collection is an abstract class that provides a common "   
    "superclass for data elements that represent collections of "
    "ManagedElements and its subclasses.") ]
class CIM_Collection : CIM_ManagedElement {   
};


// ==================================================================
//    MemberOfCollection    
// ==================================================================
[Association, Aggregation, Version ("2.6.0"), Description (   
    "CIM_MemberOfCollection is an aggregation used to establish "   
    "membership of ManagedElements in a Collection." ) ]  
class CIM_MemberOfCollection {   
    
    [Key, Aggregate, Description (
        "The Collection that aggregates members.") ]    
    CIM_Collection REF Collection;
    
    [Key, Description (
        "The aggregated member of the Collection.") ]    
    CIM_ManagedElement REF Member;   
};   


// ==============================================================
// OrderedMemberOfCollection
// ==============================================================
[Association, Aggregation, Experimental, Version ("2.7.0"), 
    Description (   
    "CIM_OrderedMemberOfCollection is an aggregation used to "
    "establish an ordered membership of ManagedElements in a "
    "Collection." ) ]  
class CIM_OrderedMemberOfCollection : CIM_MemberOfCollection {   
   
    [Description (
        "AssignedSequence is an unsigned integer 'n' that indicates "
        "the relative position of members within a Collection.  When "
        "'n' is a positive integer, it indicates a place in the "
        "sequence of members, with smaller integers indicating earlier "
        "positions in the sequence.  The special value '0' indicates "
        "'don't care'.  If two or more members have the same non-zero "
        "sequence number, then the ordering between those members is "
        "irrelavent, but they must all be ordered at the appropriate "
        "place in the overall sequence.\n"
        "\n"
        "A series of examples will make ordering of members "
        "clearer: \n"
        "    o If all members have the same sequence number,\n"
        "      regardless of whether it is '0' or non-zero, any\n"
        "      order is acceptable.\n"
        "    o The values: \n"
        "          1:MEMBER A \n"
        "          2:MEMBER B \n"
        "          1:MEMBER C \n"
        "          3:MEMBER D \n"
        "      indicate two acceptable orders: A,C,B,D or C,A,B,D,\n"
        "      since A and C can be ordered in either sequence, but\n"
        "      only at the '1' position. \n"
        "\n"
        "Note that the non-zero sequence numbers need not start with "
        "'1', and they need not be consecutive.  All that matters is "
        "their relative magnitude.") ]
    uint64 AssignedSequence;
};


// ==================================================================
// SystemSpecificCollection
// ================================================================== 
[Experimental, Version ("2.7.0"), Description (   
    "   SystemSpecificCollection represents the general "
    "concept of a collection which is scoped (or contained) by a "
    "System. It represents a Collection that only has meaning "
    "in the context of a System, and/or whose elements are "
    "restricted by the definition of the System. This is explicitly "
    "described by the (required) association, HostedCollection. \n"
    "   An example of a SystemSpecificCollection is a "
    "Fibre Channel zone that collects network ports, port "
    "groupings and aliases (as required by a customer) in the "
    "context of an AdminDomain.  The Collection is not a part "
    "of the domain, but merely an arbitrary grouping of the devices "
    "and other Collections in the domain.  In other words, the "
    "context of the Collection is restricted to the domain, and its "
    "members are also limited by the domain.") ]
class CIM_SystemSpecificCollection : CIM_Collection {

    [Key, Description (
        "InstanceID opaquely identifies a unique instance of "
        "collection that is scoped (contained) by a System. "
        "The InstanceID must be unique within a namespace. "
        "In order to ensure uniqueness, the value of InstanceID "
        "should be constructed in the following manner:  \n"
        "<Vendor ID><ID> \n"
        "   <Vendor ID> MUST include a copyrighted, trademarked "
        "or otherwise unique name that is owned by the business "
        "entity or a registered ID that is assigned to the business "
        "entity that is defining the InstanceID. (This is similar to "
        "the <Schema Name>_<Class Name> structure of Schema class "
        "names.) The purpose of <Vendor ID> is to ensure that <ID> "
        "is truly unique across multiple vendor implementations. "
        "If such a name is not used, the defining entity MUST assure "
        "that the <ID> portion of the Instance ID is unique when "
        "compared with other instance providers. For DMTF defined "
        "instances, the <Vendor ID> is 'CIM'. \n"
        "   <ID> MUST include a vendor specified unique "
        "identifier.") ]    
    string InstanceID;
};


// ==================================================================
// HostedCollection    
// ==================================================================
[Association, Experimental, Version ("2.7.0"), Description (
    "HostedCollection defines a SystemSpecificCollection "
    "in the context of a scoping System. It represents a "
    "Collection that only has meaning in the context of a "
    "System, and/or whose elements are restricted by the "
    "definition of the System.") ]
class CIM_HostedCollection : CIM_Dependency {

    [Override ("Antecedent"), Min (1), Max (1), Description (
        "The scoping system.") ] 
    CIM_System REF Antecedent;
      
    [Override ("Dependent"), Description (
        "The collection defined in the context of a system.") ] 
    CIM_SystemSpecificCollection REF Dependent;
};


// ==================================================================
//    LogicalPortGroup
// ==================================================================
[Experimental, Version ("2.7.0"), Description (
    "A collection of one or more ports logically grouped for "
    "administrative purposes.  This class is created for specific "
    "ease of query when a Port is associated to more than one "
    "SystemSpecificCollection.  In FibreChannel, this is the case "
    "(e.g. Node, Zone, ZoneSet).") ] 
class CIM_LogicalPortGroup: CIM_SystemSpecificCollection {

};


// ==================================================================
// Profile
// ================================================================== 
[Experimental, Version ("2.7.0"), Description (   
    "Profile specifies a general collection of Settings that are "
    "logically grouped together. The settings are 'collected' into "
    "the Profile using the MemberOfCollection association.  One "
    "example of a Profile is to define the collection of settings "
    "for a particular person. Another is to define the collection "
    "of settings appropriate when initializing a system."
    "Profile is tied to a ManagedElement using the ElementProfile "
    "association.  Note that the cardinality of the ManagedElement "
    "reference is Min(1), Max(1). This cardinality mandates the "
    "instantiation of the ElementProfile association for the "
    "referenced instance of Profile.  ElementProfile describes the "
    "existence requirements and context for the referenced instance "
    "of ManagedElement.  Specifically, the ManagedElement MUST exist "
    "and provides the context for the Profile.") ]
class CIM_Profile : CIM_Collection {

    [Key, Description (
        "InstanceID opaquely identifies a unique instance of "
        "Profile.  The InstanceID must be unique within a namespace. "
        "In order to ensure uniqueness, the value of InstanceID "
        "should be constructed in the following manner:  \n"
        "<Vendor ID><ID> \n"
        "   <Vendor ID> MUST include a copyrighted, trademarked "
        "or otherwise unique name that is owned by the business entity or a "
        "registered ID that is assigned to the business entity that is defining "
        "the InstanceID. (This is similar to the <Schema Name>_<Class Name> "
        "structure of Schema class names.) The purpose of <Vendor ID> "
        "is to ensure that <ID> is truly unique across multiple "
        "vendor implementations.   If such a name is not "
        "used, the defining entity MUST assure that the <ID> "
        "portion of the Instance ID is unique when compared with "
        "other instance providers. For DMTF defined instances, the "
        "<Vendor ID> is 'CIM'. \n"
        "   <ID> MUST include a vendor specified unique "
        "identifier.") ]    
    string InstanceID;
};

 
// ===================================================================
// ElementProfile
// ===================================================================
[Association, Experimental, Version ("2.7.0"), Description (
    "ElementProfile represents the association between "
    "ManagedElements and the Profiles (collection of "
    "settings) defined for them.") ]
class CIM_ElementProfile {

   [Key, Min(1), Max(1), Description (
       "The managed element.") ]
   CIM_ManagedElement REF ManagedElement;

   [Key, Description (
       "The Profile object associated with the element.") ]
    CIM_Profile REF Profile;
};


// ===================================================================
// RedundancySet
// ===================================================================
[Experimental, Version ("2.7.0"), Description (
    "  A class derived from SystemSpecificCollection that is a special "
    "collection of ManagedElements. This collection indicates "
    "that the aggregated elements together provide redundancy, or "
    "that redundancy is provided via sparing. All elements "
    "collected in a RedundancySet should be instantiations of the "
    "same object class. \n"
    "  Note that the CIM_RedundancySet class is very similar to "
    "CIM_RedundancyGroup, yet both classes are present in the model.  "
    "This is because some implementations have successfully used "
    "CIM_RedundancyGroup.  However, issues have arisen that could not "
    "be resolved without defining a new class.  Therefore, until a "
    "new major release occurs, both classes will exist in the model. "
    "Refer to the Core White Paper for additional information.") ]
class CIM_RedundancySet : CIM_SystemSpecificCollection {
    
    [Override ("ElementName"), Required, Description (
        "The user friendly name for this instance of RedundancySet. "
        "In addition, the user friendly name can be used as a "
        "property for a search or query.  (Note:  InstanceName "
        "does not have to be unique within a namespace.)") ]
    string ElementName;
   
    [Description (
        "RedundancyStatus provides information on the state of "
        "the RedundancySet. \n"
        " - Fully Redundant (=2) means that all of the "
        "configured redundancy is still available. \n "
        " - Degraded Redundancy (=3) means that some failures "
        "have been experienced but some reduced amount of "
        "redundancy is still available \n"
        " - Redundancy Lost (=4) means that a sufficient number "
        "of failures have been experienced such that no "
        "redundancy is available and the next failure "
        "experienced will cause overall failure."), 
        ValueMap {"0", "1", "2", "3", "4"},
        Values {"Unknown", "Other", "Fully Redundant", 
            "Degraded Redundancy", "Redundancy Lost"} ]
    uint16 RedundancyStatus;
};


// ===================================================================
// SparedSet
// ===================================================================
[Experimental, Version ("2.7.0"), Description (
    "A class derived from RedundancySet indicating that the "
    "collected elements can be spared. (The actual spares are "
    "defined using the IsSpare association.) An example is "
    "the use of redundant network adapters in a ComputerSystem - "
    "where one adapter is Primary and the other is Spare. The "
    "'primary' adapter would be a member of the SparedSet "
    "(associated using MemberOfCollection) and the 'other' adapter "
    "would be associated to the SparedSet using the IsSpare "
    "relationship.") ] 
class CIM_SparedSet : CIM_RedundancySet {

    [Description (
        "The type of failover algorithms that are supported."),
        ValueMap {"0", "1", "2", "3"},      
        Values {"Unknown", "Other", "Automatic", "Manual"} ]
    uint16 FailoverSupported;   
   
    [Description (
        "This method forces a failover from one ManagedElement to "
        "another. There are two parameters to the Failover method. \n"
        " - FailoverFrom is a reference to an 'active' ManagedElement "
        "that will become inactive after the method.  This element "
        "should be part of the SparedSet via a MemberOfCollection "
        "relationship. \n"
        " - FailoverTo is a reference to the ManagedElement that "
        "will take over for the FailoverFrom element. This element "
        "should be associated with the SparedSet via an IsSpare "
        "relationship.  \n"
        "Once the failover has occurred, the MemberOfCollection and "
        "IsSpare associations are updated to reflect the "
        "current state.  For example, the MemberOfCollection "
        "association for the FailoverFrom element is deleted. "
        "The IsSpare association for the FailoverTo element is "
        "replaced with MemberOfCollection. \n"  
        "The method should return 0 if successful, 1 if the "
        "request is not supported, and some other value if any "
        "other error occurred. In a subclass, the set of possible "
        "return codes could be specified, using Value and ValueMap "
        "qualifiers on the method.") ]
    uint32 Failover(
        [IN] CIM_ManagedElement REF FailoverFrom, 
        [IN] CIM_ManagedElement REF FailoverTo);      
};


// ===================================================================
// IsSpare
// ===================================================================
[Association, Experimental, Version ("2.7.0"), Description (
    "The IsSpare association indicates an element that can "
    "spare or replace one of the elements in the referenced "
    "SparedSet. If the 'spare' is itself a Collection, this "
    "indicates that each of the 'spare' members can replace "
    "one of the elements in the SparedSet. The fact that a "
    "spare can operate in 'hot standby' mode is specified on "
    "an element by element basis - i.e., in this association.") ]
class CIM_IsSpare : CIM_Dependency {

    [Override ("Antecedent"), Description (
        "A ManagedElement or Collection of elements acting as a "
        "spare.") ]
    CIM_ManagedElement REF Antecedent; 

    [Override ("Dependent"), Description (
        "The set of elements that ARE spared.") ]
    CIM_SparedSet REF Dependent;

    [Description (
        "HotStandby is a boolean indicating that the 'spare' is "
        "operating as a hot standby.") ]
    boolean HotStandby;   
};


// ===================================================================
// StorageRedundancySet
// ===================================================================
[Experimental, Version ("2.7.0"), Description (
    "A class derived from RedundancySet describing storage-related "
    "redundancy information. StorageRedundancySets are used to "
    "protect user data. They aggregate on one or more underlying "
    "StorageExtents, associated via MemberOfCollection, and "
    "produce one or more higher-level Extents.  The Extents are "
    "related to each other via a BasedOn association. And, "
    "the higher level Extent is related to the StorageRedundancy"
    "Set via the LogicalIdentity association. \n"
    "Note that StorageRedundancySets may overlap in their "
    "aggregation of members. If this occurs, the overlapping "
    "Extents should not contain any check data.") ]
class CIM_StorageRedundancySet : CIM_RedundancySet {

    [Description (
        "TypeOfAlgorithm specifies the algorithm used for "
        "storage data redundancy and reconstruction. For example, "
        "'P+Q' (=5) or 'P+S' (=7) may be specified. The value "
        "of 0, is defined as 'None' to indicate that data "
        "redundancy is not active. An inactive redundancy "
        "should only be instantiated if data striping or "
        "concatenation are active. These are indicated by "
        "the IsStriped or IsConcatentated boolean properties "
        "of this RedundancySet."), 
        ValueMap {"0", "1", "2", "3", "4", "5", "6", "7" },
        Values {"Unknown", "Other", "Copy", "XOR", "P+Q", 
            "S", "P+S"}, 
        MappingStrings {"MIF.DMTF|Redundancy Group|001.2"},
        ModelCorrespondence {"StorageRedundancySet.OtherAlgorithm"} ]
    uint16 TypeOfAlgorithm;

    [Description (
        "A string describing the redundancy algorithm  when the"
        "TypeOfAlgorithm is set to 1 'Other'."),
        ModelCorrespondence {
            "StorageRedundancySet.TypeOfAlgorithm"} ]
    string OtherAlgorithm;
};


// ===================================================================
// ExtraCapacitySet
// ===================================================================
[Experimental, Version ("2.7.0"), Description (
    "A class derived from RedundancySet to describe that the "
    "aggregated elements have more capacity or capability than is "
    "needed.  Some examples of this type of redundancy are clusters, "
    "or the installation of N+1 power supplies or fans in a "
    "computer.") ] 
class CIM_ExtraCapacitySet : CIM_RedundancySet {

    [Description (
        "MinNumberNeeded indicates the smallest number of elements "
        "that must be operational in order to function.  "
        "For example, in an N+1 redundancy relationship, "
        "the MinNumberNeeded property is set equal to N."),
        MinValue ("1") ]
    uint32 MinNumberNeeded;

    [Description (
        "MaxNumberSupported indicates the largest number of "
        "elements that can participate in the ExtraCapacitySet. "
        "A value of 0 indicates there is no limit on the number "
        "of elements.") ]
    uint32 MaxNumberSupported;  
   
    [Description (
        "Boolean indicating whether load balancing is supported by "
        "the ExtraCapacitySet.") ]
    boolean LoadBalancedSet; 
};


// ===================================================================
// CollectionOfMSEs
// ===================================================================
[Abstract, Version ("2.6.0"), Description (
    "  The CollectionOfMSEs object allows the grouping of Managed"
    "SystemElements for various identification purposes and to "
    "reduce the complexity of associating Settings and "
    "Configurations. It is abstract to require further definition "
    "and semantic refinement in subclasses. The CollectionOfMSEs "
    "object does not carry any state or status information, but "
    "only represents a grouping or 'bag' of Elements. For this "
    "reason, it is incorrect to subclass groups that have state/"
    "status from CollectionOfMSEs - an example is CIM_Redundancy"
    "Group (which is subclassed from LogicalElement). \n"
    "  Collections typically aggregate 'like'objects, but are " 
    "not required to do so.  They simply identify 'bags' and "
    "may represent an optimization. This is especially true "
    "with respect to their association to Settings and "
    "Configurations. Without Collections, one is forced to "
    "define individual ElementSetting andElementConfiguration "
    "associations, to tie Settings and Configuration objects to "
    "individual ManagedSystemElements. There may be much "
    "duplication in assigning the same Setting to multiple objects. "
    "In addition, using the Collection object allows the "
    "determination that the Setting and Configuration associations "
    "are indeed the same for the Collection's members. This "
    "information would otherwise be obtained by defining the "
    "Collection in a proprietary manner, and then querying "
    "the ElementSetting and ElementConfiguration associations to "
    "determine ifthe Collection set is completely covered.") ]
class CIM_CollectionOfMSEs : CIM_Collection {
      
    [MaxLen (256), Description (
        "The identification of the Collection object. When subclassed, "
        "the CollectionID property can be overridden to be a Key "
        "property.") ]
    string CollectionID;
};


// ==================================================================
// CollectedCollections
// ==================================================================
[Association, Aggregation, Version ("2.6.0"), Description (
    "CIM_CollectedCollections is an aggregation association "
    "representing that a CollectionOfMSEs may itself be contained "
    "in a CollectionOfMSEs.") ]
class CIM_CollectedCollections {
    [Aggregate, Key, Description (
        "The 'higher level' or parent element in the aggregation.") ]
    CIM_CollectionOfMSEs REF Collection;
    
    [Key, Description (
        "The 'collected' Collection.") ]
    CIM_CollectionOfMSEs REF CollectionInCollection;
};

     
// ==================================================================
// CollectedMSEs
// ==================================================================
[Association, Aggregation, Version ("2.6.0"), Description (
    "CIM_CollectedMSEs is a generic association used to "
    "establish the members of the grouping object, CollectionOf"
    "MSEs.") ]
class CIM_CollectedMSEs : CIM_MemberOfCollection {
    [Aggregate, Override("Collection"), Description (
        "The grouping or 'bag' object that represents the "
        "Collection.") ]
    CIM_CollectionOfMSEs REF Collection;
    
    [Override("Member"), Description (
        "The members of the Collection.") ]
    CIM_ManagedSystemElement REF Member;
};


// ===================================================================
// RedundancyGroup
// ===================================================================
[Version ("2.7.0"), Description (
    "A class derived from LogicalElement that is a special "
    "collection of ManagedSystemElements. This collection indicates "
    "that the aggregated components together provide redundancy. "
    "All elements aggregated in a RedundancyGroup should be "
    "instantiations of the same object class.\n"
    "  Note that the CIM_RedundancySet class is very similar to "
    "CIM_RedundancyGroup, yet both classes are present in the model. "
    "This is because some implementations have successfully used "
    "CIM_RedundancyGroup.  However, issues have arisen that could not "
    "be resolved without defining a new class.  Therefore, until a "
    "new major release occurs, both classes will exist in the model. "
    "Refer to the Core White Paper for additional information.") ] 
class CIM_RedundancyGroup : CIM_LogicalElement {

    [Key, MaxLen (256), Description (
        "CreationClassName indicates the name of the class or "
        "the subclass used in the creation of an instance. When "
        "used with the other key properties of this class, this "
        "property allows all instances of this class and its "
        "subclasses to be uniquely identified.") ]
    string CreationClassName;

    [Override("Name"), Key, MaxLen (256), Description (
        "The RedundancyGroup Name serves as the key for the "
        "Group's instance in an enterprise environment.") ]
    string Name;

    [Description (
        "RedundancyStatus provides information on the state of the "
        "RedundancyGroup. \"Fully Redundant\" (value=2) means that "
        "all of the configured redundancy is still available; "
        "\"Degraded Redundancy\" (3) means that some failures have "
        "been experienced but some reduced amount of redundancy is "
        "still available; \"Redundancy Lost\" (4) means that a "
        "sufficient number of failures have been experienced such "
        "that no redundancy is available and the next failure "
        "experienced will cause overall failure. Also, the values, "
        "\"Other\" (1) and \"Unknown\" (0), are defined."),
        ValueMap {"0", "1", "2", "3", "4"}, 
        Values {"Unknown", "Other", "Fully Redundant", 
           "Degraded Redundancy", "Redundancy Lost"} ]
   uint16 RedundancyStatus;
};


// ===================================================================
// RedundancyComponent
// ===================================================================
[Association, Aggregation, Version ("2.6.0"), Description (
    "A RedundancyGroup aggregates Managed System Elements and "
    "indicates that these elements, taken together, provide "
    "redundancy. All elements aggregated in a RedundancyGroup "
    "should be instantiations of the same object class.") ] 
class CIM_RedundancyComponent : CIM_Component {

    [Override ("GroupComponent"), Aggregate, Description (
        "The RedundancyComponent association indicates that "
        "'this set of fans' or 'these physical extents' participate "
        "in a single RedundancyGroup.") ]
    CIM_RedundancyGroup REF GroupComponent;
    
    [Override ("PartComponent"), Aggregate, Description (
        "The component of the redundancy group.") ]
    CIM_ManagedSystemElement REF PartComponent;
};


// ===================================================================
// SpareGroup
// ===================================================================
[Version ("2.6.0"), Description (
    "A class derived from RedundancyGroup indicating that one or "
    "more of the aggregated elements can be spared. (The actual "
    "Spares are defined using the ActsAsSpare association.) An "
    "example is the use of redundant NICs in a ComputerSystem - "
    "where one NIC is primary and the other is Spare. The 'primary' "
    "NIC would be a member of the SpareGroup (associated using the "
    "RedundancyComponent class) and the 'other' NIC would be "
    "associated using the ActsAsSpare relationship.") ] 
class CIM_SpareGroup : CIM_RedundancyGroup {

    [Description (
        "This method is forces a failover from one ManagedSystem"
        "Element to another.  There are two parameters to the Failover "
        "method, FailoverFrom and FailoverTo. The FailoverFrom "
        "parameter is a reference to the primary ManagedSystemElement "
        "that will become inactive after the method. This Element "
        "should be associated with the SpareGroup through the "
        "RedundancyComponent relationship. The FailoverTo parameter "
        "is a reference to the ManagedSystemElement that will take "
        "over for the primary. This Element should be associated with "
        "the SpareGroup through the ActsAsSpare association. Once the "
        "failover has occurred, the SpareGroup and the Redundancy"
        "Component and ActsAsSpare associations will be updated with "
        "current status.  For example, the ActsAsSpare association "
        "that contained the FailoverTo Element will be deleted and a "
        "new RedundancyComponent association instantiated in its "
        "place. The method should return 0 if successful, 1 if the "
        "request is not supported, and some other value if any other "
        "error occurred. In a subclass, the set of possible return "
        "codes could be specified, using a ValueMap qualifier on the "
        "method. The strings to which the ValueMap contents are "
        "'translated' may also be specified in the subclass as a "
        "Values array qualifier.") ]
    uint32 Failover(
        [IN] CIM_ManagedSystemElement REF FailoverFrom, 
        [IN] CIM_ManagedSystemElement REF FailoverTo);      
};


// ===================================================================
// ActsAsSpare
// ===================================================================
[Association, Version ("2.6.0"), Description (
    "The ActsAsSpare association indicates which elements can spare "
    "or replace the other aggregated elements.  The fact that a "
    "spare can operate in \"hot standby\" mode is specified on an "
    "element by element basis.") ]
class CIM_ActsAsSpare  {

    [Key, Description (
        "The SpareGroup") ]
    CIM_SpareGroup REF Group;
    
    [Key, Description (
        "A ManagedSystemElement acting as a spare and participating "
        "in the SpareGroup.") ]
    CIM_ManagedSystemElement REF Spare; 
    
    [Description (
        "HotStandby is a boolean indicating that the spare is "
        "operating as a hot standby.") ]
    boolean HotStandby;   
};


// ===================================================================
// StorageRedundancyGroup
// ===================================================================
[Version ("2.7.0"), Description (
    "A class derived from RedundancyGroup containing mass "
    "storage-related redundancy information. StorageRedundancy"
    "Groups are used to protect user data.  They act on one "
    "or more underlying StorageExtents, associated via "
    "ExtentRedundancyComponent and produce one or more protected "
    "StorageExtents that are associated to the underlying "
    "StorageExtents via ProtectedExtentBasedOn or"
    "CompositeExtentBasedOn.  StorageRedundancyGroups may overlap. "
    "However, the underlying StorageExtents within the overlap "
    "should not contain any check data.") ] 
class CIM_StorageRedundancyGroup : CIM_RedundancyGroup  {

    [Description (
        "The TypeOfAlgorithm specifies the algorithm used for data "
        "redundancy and reconstruction. For example, \"P+Q\" (value"
        "=5) or \"P+S\" (7) may be specified. The value of 0, is "
        "defined as \"None\" to indicate that data redundancy is not "
        "active. An inactive redundancy should only be instantiated "
        "if data striping or concatenation are active. These are "
        "indicated by the IsStriped or IsConcatentated boolean "
        "properties of this RedundancyGroup."), 
        ValueMap {"0", "1", "2", "3", "4", "5", "6", "7"}, 
        Values {"None", "Other", "Unknown", "Copy", "XOR", "P+Q", 
            "S", "P+S"}, 
        MappingStrings {"MIF.DMTF|Redundancy Group|001.2"} ]
    uint16 TypeOfAlgorithm;

    [Description (
        "StorageRedundancy provides additional information on the "
        "state of the RedundancyGroup, beyond the RedundancyStatus "
        "property. Information like \"Reconfig In Progress\" (value"
        "=1) or \"Redundancy Disabled\" can be specified using "
        "this property."), 
        ValueMap {"0", "1", "2", "3", "4", "5", "6", "7", "8"}, 
        Values {"No Additional Status", "Reconfig In Progress", 
            "Data Lost", "Not Currently Configured", 
            "Protected Rebuild", "Redundancy Disabled", 
            "Unprotected Rebuild", "Recalculating", "Verifying"} ]
    uint16 StorageRedundancy;
    
    [Description (
        "True indicates that the data is striped across the various "
        "StorageExtents in the Group.") ]
    boolean IsStriped;
    
    [Description (
        "True indicates that the data is concatenated across the "
        "various StorageExtents in the Group.") ]
    boolean IsConcatenated;
};


// ===================================================================
// ExtraCapacityGroup
// ===================================================================
[Version ("2.6.0"), Description (
    "A class derived from RedundancyGroup indicating that the "
    "aggregated elements have more capacity or capability than is "
    "needed.  An example of this type of redundancy is the "
    "installation of N+1 power supplies or fans in a system.") ] 
class CIM_ExtraCapacityGroup : CIM_RedundancyGroup {

    [Description (
        "MinNumberNeeded indicates the smallest number of elements "
        "that must be operational in order to have redundancy.  "
        "For example, in an N+1 redundancy relationship, "
        "the MinNumberNeeded property should be set equal to N.") ]
    uint32 MinNumberNeeded;
 
    [Description (
        "Boolean indicating whether load balancing is supported by "
        "the ExtraCapacityGroup.") ]
    boolean LoadBalancedGroup; 
};


// ===================================================================
// ExtentRedundancyComponent
// ===================================================================
[Association, Aggregation, Version ("2.6.0"), Description (
    "Describes the StorageExtents participating in a Storage"
    "RedundancyGroup.") ]
class CIM_ExtentRedundancyComponent : CIM_RedundancyComponent {

    [Override ("GroupComponent"), Aggregate, 
        Description ("The StorageRedundancyGroup.") ]
    CIM_StorageRedundancyGroup REF GroupComponent;

    [Override ("PartComponent"),  Description (
        "The StorageExtent participating in the RedundancyGroup.") ]
    CIM_StorageExtent REF PartComponent;
};


// ===================================================================
// end of file
// ===================================================================
