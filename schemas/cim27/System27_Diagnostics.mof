// ===================================================================
// Title:       Diagnostics 2.7
// Filename:    System27_Diagnostics.mof
// Version:     2.7.0
// Release:     Preliminary 
// Date:        06/09/02
// ===================================================================
// Copyright 2002 Distributed Management Task Force, Inc. (DMTF).
// All rights reserved.  
// DMTF is a not-for-profit association of industry members dedicated 
// to promoting enterprise and systems management and interoperability. 
// DMTF specifications and documents may be reproduced for uses
// consistent with this purpose by members and non-members, 
// provided that correct attribution is given. 
// As DMTF specifications may be revised from time to time, 
// the particular version and release date should always be noted.
//
// Implementation of certain elements of this standard or proposed 
// standard may be subject to third party patent rights, including 
// provisional patent rights (herein "patent rights"). DMTF makes 
// no representations to users of the standard as to the existence 
// of such rights, and is not responsible to recognize, disclose, or
// identify any or all such third party patent right, owners or 
// claimants, nor for any incomplete or inaccurate identification or 
// disclosure of such rights, owners or claimants. DMTF shall have no 
// liability to any party, in any manner or circumstance, under any 
// legal theory whatsoever, for failure to recognize, disclose, or 
// identify any such third party patent rights, or for such party’s
// reliance on the standard or incorporation thereof in its product, 
// protocols or testing procedures. DMTF shall have no liability to 
// any party implementing such standard, whether such implementation 
// is foreseeable or not, nor to any patent owner or claimant, and shall 
// have no liability or responsibility for costs or losses incurred if 
// a standard is withdrawn or modified after publication, and shall be
// indemnified and held harmless by any party implementing the 
// standard from any and all claims of infringement by a patent owner 
// for such implementations.
//
// For information about patents held by third-parties which have 
// notified the DMTF that, in their opinion, such patent may relate to 
// or impact implementations of DMTF standards, visit 
// http://www.dmtf.org/about/policies/disclosures.php.
// ===================================================================
// Description: The System Model defines system related management 
//              concepts. 
//              This System file defines the more specific concepts for
//              Diagnostics.
//
//              The object classes below are listed in an order that
//              avoids forward references. Required objects, defined 
//              by other working groups, are omitted.
// ==================================================================
// Prerequisite:  Core27_Qualifiers
//                Core27_CoreElements
//                
// ==================================================================
// Change Log for v2.7
// CR725 - Add the following 3 properties LoopControlParameter,
//         LoopControl, and OtherLoopControlDescription to 
//         DiagnosticSetting and DiagnosticResult.
// CR726 - Add LogOptions, OtherLogOptionDescriptions to 
//         DiagnosticSetting and DiagnosticResult.
//         Deprecate ReportSoftErrors and ReportStatusMessages from
//         DiagnosticSetting and DiagnosticResult.
// CR749 - Deprecate DiagnosticTestInPackage, DiagnosticResultInPackage,
//         and DiagnosticResult.IsPackage.
// CR764 - Add DiagnosticService
//       - Change subclassing of DiagnosticTest from Service to 
//         DiagnosticService
//       - Deprecation DiagnosticTest.ResourcesUsed and DiagnosticTest.
//         IsInUse.
//       - Fix the Class Name in the ModelCorrespondence string for
//         DiagnosticTest.OtherCharacteristicDescription
// CR765 - Update the the DiagnoticTest and DiagnosticResults 
//         LogOptions property.
//       - Modify the description of DiagnosticResults.TestResults
// CR766 - Add the following properties to DiagnosticResults:
//         ErrorCode, ErrorCount, LoopsFailed, LoopsPassed.
// CR778 - Add property ResultPersistence to DiagnosticSetting and
//         DiagnosticResults.
// CR779 - Add DiagnosticService.RunDiagnostic()
//       - Deprecate DiagnosticTest.RunTest()
//       - Deprecate DiagnosticTest.DiscontinueTest()
//       - Update class description for DiagnosticTest.
// CR780 - Add DiagnosticServiceCapabilities
// CR781 - Add DiagnosticServiceRecord
// ===================================================================
//
// ==================================================================

#pragma locale ("en_US")


// ==================================================================
// DiagnosticSetting
// ==================================================================
[Version ("2.7.0"), Description(
    "Specific diagnostic test parameters and execution "
    "instructions are defined by subclassing and/or instantiating "
    "the DiagnosticSetting object. To provide more detailed "
    "Settings for a type of test (i.e., additional properties), "
    "subclassing is appropriate. When only the generic Setting "
    "information is required, instantiation of the Diagnostic"
    "Setting class may suffice.\n"
    "Data from DiagnosticSetting is captured in DiagnosticResult. "
    "When RunTest starts execution the settings, which are time "
    "sensitive, should be evaluated and captured. This is suggested "
    "since the DiagnosticSetting object can be modified at any time, "
    "and therefore the current test settings could be lost.") ]
class CIM_DiagnosticSetting : CIM_Setting {
    
    [Key, MaxLen (256), Override ("SettingID"), 
        Description (
        "The identifier by which the DiagnosticSetting object is " 
        "known and uniquely named. One possible naming scheme is " 
        "to name the SettingID using the DiagnosticTest's CreationClass"
        "Name and DiagnosticName, plus a GUID (Globally Unique "
        "IDentifier).\n" 
        "  Note that at an enterprise level, there is typically not a " 
        "one to one mapping between a DiagnosticSetting and all copies " 
        "of the DiagnosticTest.  The proposed naming convention will" 
        "scale to the entrprise level.") ]
    string SettingID;
    
    [Description (
        "Sets the level of warning messages to be logged. If for "
        "example no warning information is required, the level "
        "would be set to \"No Warnings\" (value=0). Using \"Missing "
        "Resources\" (value=1) will cause warnings to be generated "
        "when required resources or hardware are not found. Setting "
        "the value to 2, \"Testing Impacts\", results in both "
        "missing resources and 'test impact' warnings (for example, "
        "multiple retries required) to be reported."), 
        ValueMap {"0", "1", "2", "3"},
        Values {"No Warnings", "Missing Resources", 
            "Testing Impacts", "All Warnings"},
        Write]
    uint16 TestWarningLevel;
    
    [Experimental, Description (
        "The LogOptions property indicates that particular types "
        "of test message should be logged. Each of these log options "
        "can co-exist with the others. Note that the default "
        "behavior is for the option to be off/disabled. \n"
        "The description for each log option is given below:"
        "\n"
        "* \"Unknown\" (value = 0) \n" 
        "* \"Other\" (value = 1): Details in OtherLogOptions"
        "Description. \n"
        "* \"TestErrors\" (value = 2): Enable sending test "
        "errors. \n"  
        "* \"SoftErrors\" (value = 3):  Enable sending soft "
        "errors. Examples of soft errors are: 'not enough memory', "
        "'driver IOCTL not implemented', or 'known defect'. \n"  
        "* \"Status\" (value = 4): Enables sending status " 
        "messages.  Examples of status messages are reports of "
        "state information for the test, driver, device, or "
        "system. \n" 
        "* \"Warnings\" (value = 5): Enables sending warning "
        "messages.  Refer to the property, TestWarningLevel, for "
        "more information. \n"
        "* \"FRUInformation\" (value = 6): Enables sending FRU "
        "information messages. This may be any information about "
        "the device(s) under test, and/or the field replaceable units "
        "(FRUs) that contain them. Some examples of FRU information "
        " and their suggested formats are listed below: \n"
        "1) The logical location of the device. The format and "
        "contents of this property is device dependent. Examples are: "
        "SCSI ID, LPTx.\n 2) The physical location of the device. The "
        "format and contents of this property is device dependent. "
        "Examples are: PCI Slot Number, Dimm#.\n 3) Vendor specific "
        "Field Replaceable Unit identification for the device tested. "
        "This FRU ordering information should be identical to the "
        "FRUNumber property of the CIM_FRU class if it exists. If "
        "the CIM_FRU class or the FRUNumber property is not populated "
        "for this device, the vendor may supply the information if it "
        "can be accurately determined. FRUNumber refers to the "
        "vendor's code for the field replaceable unit that contains "
        "the failing device. This vendor specific code may assume "
        "any form, but the preferred convention would copy the "      
        "value of CIM_FRU.FRUNumber property exactly. \n"
        "* \"Debug\" (value = 7): Enables sending "
        "debug messages. These messages are vendor specific. \n"
        "* \"Statistics\" (value = 8): Enables sending "
        "statistics messages. An example of statistics would "
        "be packets sent per second. \n"
        "* \"Actions\" (value = 9): Enables sending corrective "
        "action and instructional messages to guide service personnel. "
        "For example, a numbered list of steps to take when it "
        "has been determined that a device needs to be fixed or "
        "replaced. Another example would be a prioritized "
        "list of suggested actions to take to isolate a failure. "
        "When ordering steps or prioritizing actions a number "
        "should proceed the text. Ex: '1) Do this first 2) next' \n"
        "* \"Configuration\" (value = 10): Enables sending "
        "messages that contain information about the software "
        "stack and other configuration information needed to "
        "reproduce the test's runtime environment. " 
        "For example, the name of all the critical "
        "software elements controlling the device under test, "
        "with version information. Each configuration message should "
        "have the following common format: Element name; element "
        "type; manufacturers name; version.  Ex: Miniport driver; "
        "SCSI; Intel; Version 1.2.\n The relevant software elements "
        "that should be included are: firmware, device drivers, filter "
        "and protocol drivers, and possibly, device management "
        "services. This information may be used by the vendor to "
        "reproduce the error at a repair depot, isolate between "
        "software configuration and hardware problems, or possibly, "
        "collect product reliability data in the field. \n"
        "* \"Subtests\" (value = 11): Enables sending a test summary "
        "report message upon completion of each subtest and each "
        "loop iteration. These summary reports should state whether "
        "the individual subtest or iteration passed or failed and "
        "list relevant error codes and respective error counts. \n"
        "* \"References\" (value = 12): Enables sending "
        "a message that records an object path reference. This "
        "reference could be used to record some keys contained in "
        "a reference such as the ID of the device that was tested."),
        ValueMap {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
            "10", "11", "12"}, 
        Values{"Unknown", "Other", "TestErrors", "SoftErrors",
            "Status", "Warnings", "FRUInformation",
            "Debug", "Statistics", "Actions",
            "Configuration", "Subtests", "References"},
        ModelCorrespondence {
            "CIM_DiagnosticSetting.OtherLogOptionsDescriptions"}]
    uint16 LogOptions[];
 
    [Experimental, Description (
        "Provides additional information regarding the types "
        "of test messages that are logged when the property " 
        "LogOptions includes the value 1 (\"Other\"). "),
        ModelCorrespondence {"CIM_DiagnosticSetting.LogOptions"} ]
    string OtherLogOptionsDescriptions[];

    [Deprecated {"CIM_DiagnosticSetting.LogOptions"}, Description (
        "When this flag is true, the diagnostic test will report "
        "'soft errors'. In this context, a soft error is a message "
        "from the diagnostic reporting a known defect in the "
        "hardware or driver configuration, or execution "
        "environment.  Examples are: 'Not enough memory', "
        "'Driver IOCTL not implemented', 'Video RAM compare "
        "failed during polygon fill test (A known defect in the "
        "video chipset)', etc."), Write ] 
    boolean ReportSoftErrors;
 
    [Deprecated {"CIM_DiagnosticSetting.LogOptions"}, Description (
        "When this flag is true, the diagnostic test will report "
        "'status messages'. In this context, a status message "
        "indicates that the diagnostic code is at a checkpoint. "
        "Examples are: \"Completion of phase 1\", \"Complex "
        "pattern\", etc."), Write ] 
    boolean ReportStatusMessages; 

    [Description (
        "When this flag is true, the test will halt after finding "
        "the first error."),
        Write]
    boolean HaltOnError;
    
    [Description (
        "When this flag is true, the test software should attempt "
        "to run in an accelerated fashion either by reducing the "
        "coverage or number of tests performed."), 
        Write]
    boolean QuickMode;
    
    [Units ("Percent"), MinValue (0), MaxValue (100), 
        Description(
        "Requests the diagnostic software to reduce test coverage "
        "to the specified percentage.  For example, a hard drive "
        "scan test could be asked to run at 50%. The most "
        "effective way to accomplish this is for the test software "
        "to scan every other track, as opposed to only scanning the "
        "first half of a drive. It is assumed that the effectiveness "
        "of the test is impacted proportional to the percentage of "
        "testing requested. Permissible values for this property "
        "range from 0 to 100. \n"
        "This property may not be applicable to all tests.  If it "
        "can be set for a test, the value 7 (\"Supports PercentOf"
        "TestCoverage\") should be entered into the DiagnosticTest's "
        "Characteristics array."), 
        ModelCorrespondence {"CIM_DiagnosticTest.Characteristics"}, 
        Write]
    uint8 PercentOfTestCoverage;
    
    [Experimental, Description (
        "Array entries contain parameters corresponding to "
        "entries in the LoopControl array, limiting the number "
        "of times a test should be repeated with a single "
        "invocation of RunTest by a CIM client"),
        ArrayType ("Indexed"),
        ModelCorrespondence {"CIM_DiagnosticSetting.LoopControl"},
        Write ]
    string LoopControlParameter[];
 
    [Experimental, Description (
        "LoopControl, used in conjunction with LoopControlParameter, "
        "sets one or more loop control mechanisms that limits the "
        "number of times a test should be repeated with a single "
        "invocation of RunTest by a CIM client. There is an "
        "array-positional correspondence between LoopControl "
        "entries & LoopControlParameter entries. The entries in "
        "these coupled arrays of loop controls can be used in a "
        "logical OR fashion to achieve the desired loop control. "
        "For example, if a client wants to loop a test 1000 times, "
        "but quit if a timer runs out, it could set both controls "
        "into the LoopControl array as two separate entries in each "
        "array. The looping test will terminate when the first of the "
        "two ORed conditions are met. \n"
        "The descriptions for each loop control are given below: \n"
        "\n"
        "  Unknown (= 0) \n"
        "  Other (= 1) : Additional detail may be found in "
        "OtherLoopControlDescription. \n"
        "  Continuous (= 2) : The corresponding LoopControl"
        "Parameter is ignored and the test will execute "
        "continuously. Tests that use this control should also " 
        "support DiscontinueTest. \n" 
        "  Count (= 3) : The corresponding LoopControlParameter "
        "is interpreted as a loop count (uint32), indicating "
        "the number of times the test should be repeated with "
        "a single invocation of RunTest by a CIM client. \n"
        "  Timer (= 4) : The corresponding LoopControlParameter "
        "is interpreted as an initial value (uint32) for a test "
        "loop timer, given in seconds.  The looping is "
        "terminated when this timer has lapsed. \n"
        "  ErrorCount (= 5) : The corresponding LoopControl"
        "Parameter is interpreted as an error count (uint32). "
        "The loop will continue until the number of errors that "
        "have occurred exceeds the ErrorCount. Note: the "
        "ErrorCount only refers to hard test errors; it does not "
        "include soft errors or warnings. "),
        ArrayType ("Indexed"),
        ValueMap {"0", "1", "2", "3", "4", "5"},
        Values{"Unknown", "Other", "Continuous", "Count", "Timer", 
            "ErrorCount"},
        ModelCorrespondence {
            "CIM_DiagnosticSetting.LoopControlParameter",
            "CIM_DiagnosticSetting.OtherLoopControlDescription"} ]
    uint16 LoopControl[];
 
    [Experimental, Description (
        "Provides additional information for LoopControl when "
        "its value is set to 1 ('Other')."),
        ModelCorrespondence {
            "CIM_DiagnosticSetting.LoopControlParameter"},
        Write ]
    string OtherLoopControlDescriptions;

    [Write, Experimental, Description (
        "The ResultsPersistence property is a directive from a test "
        "client to a test provider.  It allows the client to specify "
        "to the diagnostic service provider how long to persist an "
        "instance of a DiagnosticResult.  The timeout period starts "
        "upon completion of the diagnostic started by the diagnostic "
        "service.\n"
        "Here is a summary of the choices for ResultPersistence"
        "Option: \n"
        "\"No Persistence\"            (value =  0) \n" 
        "Setting the timer to zero tells the provider not to persist "
        "the diagnostic result.  Responsibility for the final "
        "disposition of the diagnostic result is inherently "
        "satisfied. \n"
        "\"Persist With TimeOut\"      (0 < value < 0xFFFFFFFF): \n"
        "Setting the ResultPersistenceOption to a integer will "
        "cause the DiagnosticResult to be persisted for that number "
        "of seconds. At the end of that time, the DiagnosticResult "
        "will be automatically deleted by the diagnostic service "
        "provider.  \n"
        "\"Persist Forever\"          (value = 0xFFFFFFFF): \n"
        "By setting the timeout value to the very large value, "
        "0xFFFFFFFF, the provider shall persist results forever. "
        "In this case, the provider will persist the results in the "
        "CIMOM's repository and the client SHALL bear responsibility "
        "for deleting them. This was the old protocol. In an extreme "
        "case, results could be persisted forever, if neither client " 
        "nor provider deletes them."),
        Units("Seconds") ]
    uint32 ResultPersistence;
 };


// ==================================================================
//    DiagnosticResult
// ==================================================================
[Version ("2.7.0"), Description(
    "When a DiagnosticTest Service is running, test results "
    "are reported using a DiagnosticResult object, or one of its "
    "subclasses. A DiagnosticTest may be running because its "
    "Service is Started or due to an invocation of the RunTest "
    "method. DiagnosticResults are related to their Test via an "
    "instance of the DiagnosticResultsForMSE association.\n"
    "For every running of DiagnosticTest, a new instance of "
    "DiagnosticResult, or one of it's subclasses should be created.") ]
class CIM_DiagnosticResult {
    
    [Propagated("CIM_DiagnosticTest.CreationClassName"), 
        Key, MaxLen (256),
        Description ("The scoping Test's CreationClassName.") ]
    string DiagnosticCreationClassName;
    
    [Propagated("CIM_DiagnosticTest.Name"),
        Key, MaxLen (256),
        Description ("The scoping Test's Name.") ]
    string DiagnosticName;
    
    [Propagated ("CIM_DiagnosticTest.SystemCreationClassName"),
        Key, MaxLen (256),
        Description ("The scoping Test's SystemCreationClassName.") ]
    string DiagSystemCreationClassName;
    
    [Propagated ("CIM_DiagnosticTest.SystemName"), 
        Key, MaxLen (256),
        Description ("The scoping Test's SystemName.") ]
    string DiagSystemName;
    
    [Key, MaxLen (1024), 
        Description (
            "The Unique identifier for an instance of Diagnostic"
            "Results.") ]
    string ExecutionID ; 
    
    [Description (
        "The date and time the result was last updated.") ]
    datetime TimeStamp;
    
    [Deprecated {"No Value"}, Description (
        "This property is being deprecated. Tests should be" 
        "grouped at the test level, not by the model. /n"
        "If this property is TRUE, then this DiagnosticResult "
        "summarizes the results from the execution of a packaged "
        "set of DiagnosticTests. The Tests in the package can be "
        "identified by following the DiagnosticResultForTest "
        "association to the test and then using the DiagnosticTest"
        "InPackage aggregation. The individual Results can be "
        "broken out by instantiating DiagnosticResults for the "
        "individual lower level tests and aggregating into the "
        "'summary' Result using the DiagnosticResultInPackage "
        "association.") ]
    boolean IsPackage;
    
    [Description (
        "The date and time  when this test started.") ]
    datetime TestStartTime;
    
    [Description (
        "The date and time when this test completed.") ]
    datetime TestCompletionTime;
    
    [Description (
        "Describes how the test is progressing. For example, if "
        "the test was discontinued, the TestState will be "
        "\"Stopped\" (value=5), or if testing is currently "
        "executing, TestState will be \"In Progress\" (4)."),  
        ValueMap {"0", "1", "2", "3", "4", "5"},
        Values{"Unknown", "Other", "Passed", "Failed", 
            "In Progress", "Stopped"},
        ModelCorrespondence {
            "CIM_DiagnosticResult.OtherStateDescription"} ]
    uint16 TestState;
    
    [Description (
        "When \"Other\" (value=1) is entered in the TestState "
        "property, OtherStateDescription can be used to describe "
        "the test's state."),
        ModelCorrespondence {"CIM_DiagnosticResult.TestState"} ]
    string OtherStateDescription;
    
    [Units ("Seconds"), Description (
        "Estimated number of seconds to perform the Diagnostic"
        "Test indicated by the DiagnosticCreationClassName and "
        "DiagnosticName properties.  After the test has completed, "
        "the actual elapsed time can be determined by subtracting "
        "the TestStartTime from the TestCompletionTime. A similar "
        "property is defined in the association, DiagnosticTest"
        "ForMSE. The difference between the two properties is "
        "that the value stored in the association is a generic "
        "test execution time for the Element and the Test. But, "
        "the value here (in DiagnosticResult) is the estimated "
        "time that this instance with the given settings would "
        "take to run the test.  A CIM Consumer can compare this "
        "value with the value in the association DiagnosticTestForMSE "
        "to get an idea what impact their settings have on test "
        "execution."), 
        ModelCorrespondence {
            "CIM_DiagnosticTestForMSE.EstimatedTimeOfPerforming"} ]
    uint32 EstimatedTimeOfPerforming;
    
    [Description(
        "TestResults stores one or more textual results from the "
        "execution of the DiagnosticTest(s) referenced by the "
        "DiagnosticCreationClassName and DiagnosticName properties. "
        "One entry is considered a cell location in the array. Each "
        "entry is time stamped and contains the following "
        "information, in the following format: \n"
        "LogOption|yyymmddhhttssoutc|TestName|message_text \n"
        "Where: \n"
        "  LogOption = string identical to the LogOption value " 
        "  in DiagnosticSetting that was used to enable logging "
        "  this message. \n"
        "  yyy = year, e.g. 2000 \n"
        "  mm = month (01 - 12) \n"
        "  dd = day (01 - 31) \n" 
        "  hh = hour (00 - 24) \n"
        "  tt = minute (00-59) \n"
        "  ss = second (00-59) \n"
        "  o = \"+\" or \"-\" indicating the sign of the UTC "
        "correction field \n"
        "  utc = offset from UTC (Universal Coordinated Time) "
        "in minutes \n"
        "  TestName = Internal test name or current internal subtest "
        "name that sent the message.\n"
        "  Textual message = free form string that is the 'test "
        "result'."), 
        ArrayType ("Ordered")]
    string TestResults[];

    [Units ("Percent"), MinValue (0), MaxValue (100), Description (
        "The percentage of the test that has executed thus far, if "
        "the TestState property is set to \"In Progress\" or the "
        "percentage of the complete test that was executed if the "
        "TestState property is set to any of the completed states "
        "(\"Passed\", \"Failed\" or \"Stopped\"). Final results may "
        "be based on less than 100% coverage due to the parameters "
        "defined in DiagnosticSetting (such as QuickMode, "
        "PercentOfTestCoverage or HaltOnError)." ) ]
    uint8 PercentComplete;

    [Experimental, Description (
        "If applicable, this string should contain one or more vendor "
        "specific error codes that the diagnostic service detected. "
        "These error codes may be used by the vendor for variety of "
        "purposes such as: fault data base indexing, field service " 
        "trouble ticketing, product quality tracking, part failure "
        "history, etc. Since these codes are for vendor purposes they "
        "may assume any form. Details on suggested use cases will be "
        "left to white papers. The array of error codes has model "
        "correspondence with an ErrorCount array so the number of "
        "errors reported can be analyzed by individual error code."),
        ModelCorrespondence {"CIM_DiagnosticResult.ErrorCount"},
        ArrayType ("Indexed")]
    string ErrorCode[];
 
    [Experimental, Description (
        "Since some tests may detect transient and correctable errors "
        "such as a network diagnostic or memory test, an error count "
        "is useful to indicate the severity of the failure. This "
        "field contains an integer value of the number of errors "
        "detected by the test. The ErrorCount is an array with model "
        "correspondence to ErrorCode so that the test can report an "
        "ErrorCount on each type of error encountered. It is "
        "recommended that hard errors and correctable or recoverable "
        "errors be given different codes so that clients with "
        "knowledge of the error codes can evaluate correctable, "
        "recoverable, and hard errors independently."),
        ModelCorrespondence {"CIM_DiagnosticResult.ErrorCode"},
        ArrayType ("Indexed")]
    uint32 ErrorCount[];
 
    [Experimental, Description (
        "Since some tests may be looped, it is useful to report how "
        "many iterations passed and failed. This is relevant in "
        "analyzing transitory failures.  For example, if all the "
        "errors occurred in just one of 100 iterations, the device "
        "may be viewed as OK or marginal, to be monitored further "
        "rather then failed. Note: LoopsPassed & LoopsFailed should "
        "add up to the loops completed.") ]
    uint32 LoopsFailed;
 
    [Experimental, Description (
        "Since some tests may be looped, it is useful to report how "
        "many iterations passed and failed. This is relevant in "
        "analyzing transitory failures.  For example if all the "
        "errors occurred in in just one of 100 iterations, the device "
        "may be viewed as OK or marginal, to be monitored further "
        "rather then failed. Note: LoopsPassed & LoopsFailed should "
        "add up to the loops completed.") ]
    uint32 LoopsPassed;


// ---------  Properties below here are copied from  ------------------
// ---------  DiagnosticSettings                     ------------------
// Note that the DiagnosticSetting object can be modified at any time,
// and the current test settings can be lost. When RunTest starts 
// execution the settings, which are time sensitive, should be evaluated 
// and captured. 


    [Description (
        "Sets the level of warning messages to be logged. If for "
        "example no warning information is required, the level "
        "would be set to \"No Warnings\" (value=0). Using \"Missing "
        "Resources\" (value=1) will cause warnings to be generated "
        "when required resources or hardware are not found. Setting "
        "the value to 2, \"Testing Impacts\", results in both "
        "missing resources and 'test impact' warnings (for example, "
        "multiple retries required) to be reported."), 
        ValueMap {"0", "1", "2", "3"},
        Values {"No Warnings", "Missing Resources", 
            "Testing Impacts", "All Warnings"},
        Write]
    uint16 TestWarningLevel;
    
    [Experimental, Description (
        "The LogOptions property indicates that particular types "
        "of test message should be logged. Each of these log options "
        "can co-exist with the others. Note that the default "
        "behavior is for the option to be off/disabled. \n"
        "The description for each log option is given below:"
        "\n"
        "* \"Unknown\" (value = 0) \n" 
        "* \"Other\" (value = 1): Details in OtherLogOptions"
        "Description. \n"
        "* \"TestErrors\" (value = 2): Enable sending test "
        "errors. \n"  
        "* \"SoftErrors\" (value = 3):  Enable sending soft "
        "errors. Examples of soft errors are: 'not enough memory', "
        "'driver IOCTL not implemented', or 'known defect'. \n"  
        "* \"Status\" (value = 4): Enables sending status " 
        "messages.  Examples of status messages are reports of "
        "state information for the test, driver, device, or "
        "system. \n" 
        "* \"Warnings\" (value = 5): Enables sending warning "
        "messages.  Refer to the property, TestWarningLevel, for "
        "more information. \n"
        "* \"FRUInformation\" (value = 6): Enables sending FRU "
        "information messages. This may be any information about "
        "the device(s) under test, and/or the field replaceable units "
        "(FRUs) that contain them. Some examples of FRU information "
        " and their suggested formats are listed below: \n"
        "1) The logical location of the device. The format and "
        "contents of this property is device dependent. Examples are: "
        "SCSI ID, LPTx.\n 2) The physical location of the device. The "
        "format and contents of this property is device dependent. "
        "Examples are: PCI Slot Number, Dimm#.\n 3) Vendor specific "
        "Field Replaceable Unit identification for the device tested. "
        "This FRU ordering information should be identical to the "
        "FRUNumber property of the CIM_FRU class if it exists. If "
        "the CIM_FRU class or the FRUNumber property is not populated "
        "for this device, the vendor may supply the information if it "
        "can be accurately determined. FRUNumber refers to the "
        "vendor's code for the field replaceable unit that contains "
        "the failing device. This vendor specific code may assume "
        "any form, but the preferred convention would copy the "      
        "value of CIM_FRU.FRUNumber property exactly. \n"
        "* \"Debug\" (value = 7): Enables sending "
        "debug messages. These messages are vendor specific. \n"
        "* \"Statistics\" (value = 8): Enables sending "
        "statistics messages. An example of statistics would "
        "be packets sent per second. \n"
        "* \"Actions\" (value = 9): Enables sending corrective "
        "action and instructional messages to guide service personnel. "
        "For example, a numbered list of steps to take when it "
        "has been determined that a device needs to be fixed or "
        "replaced. Another example would be a prioritized "
        "list of suggested actions to take to isolate a failure. "
        "When ordering steps or prioritizing actions a number "
        "should proceed the text. Ex: '1) Do this first 2) next' \n"
        "* \"Configuration\" (value = 10): Enables sending "
        "messages that contain information about the software "
        "stack and other configuration information needed to "
        "reproduce the test's runtime environment. " 
        "For example, the name of all the critical "
        "software elements controlling the device under test, "
        "with version information. Each configuration message should "
        "have the following common format: Element name; element "
        "type; manufacturers name; version.  Ex: Miniport driver; "
        "SCSI; Intel; Version 1.2.\n The relevant software elements "
        "that should be included are: firmware, device drivers, filter "
        "and protocol drivers, and possibly, device management "
        "services. This information may be used by the vendor to "
        "reproduce the error at a repair depot, isolate between "
        "software configuration and hardware problems, or possibly, "
        "collect product reliability data in the field. \n"
        "* \"Subtests\" (value = 11): Enables sending a test summary "
        "report message upon completion of each subtest and each "
        "loop iteration. These summary reports should state whether "
        "the individual subtest or iteration passed or failed and "
        "list relevant error codes and respective error counts. \n"
        "* \"References\" (value = 12): Enables sending "
        "a message that records an object path reference. This "
        "reference could be used to record some keys contained in "
        "a reference such as the ID of the device that was tested."),
        ValueMap {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
            "10", "11", "12"}, 
        Values{"Unknown", "Other", "TestErrors", "SoftErrors",
            "Status", "Warnings", "FRUInformation",
            "Debug", "Statistics", "Actions",
            "Configuration", "Subtests", "References"},
        ModelCorrespondence {
            "CIM_DiagnosticResults.OtherLogOptionsDescriptions"}]
    uint16 LogOptions[];
 
    [Experimental, Description (
        "Provides additional information regarding the types "
        "of test messages that are logged when the property " 
        "LogOptions includes the value 1 (\"Other\"). "),
        ModelCorrespondence {"CIM_DiagnosticResults.LogOptions"} ]
    string OtherLogOptionsDescriptions[];

    [Deprecated {"CIM_DiagnosticSetting.LogOptions"}, Description (
        "When this flag is true, the diagnostic test will report "
        "'soft errors'. In this context, a soft error is a message "
        "from the diagnostic reporting a known defect in the "
        "hardware or driver configuration, or execution "
        "environment.  Examples are: 'Not enough memory', "
        "'Driver IOCTL not implemented', 'Video RAM compare "
        "failed during polygon fill test (A known defect in the "
        "video chipset)', etc."), Write ] 
    boolean ReportSoftErrors;
 
    [Deprecated {"CIM_DiagnosticSetting.LogOptions"}, Description (
        "When this flag is true, the diagnostic test will report "
        "'status messages'. In this context, a status message "
        "indicates that the diagnostic code is at a checkpoint. "
        "Examples are: \"Completion of phase 1\", \"Complex "
        "pattern\", etc."), Write ] 
    boolean ReportStatusMessages; 

    [Description (
        "When this flag is true, the test will halt after finding "
        "the first error."),
        Write]
    boolean HaltOnError;
    
    [Description (
        "When this flag is true, the test software should attempt "
        "to run in an accelerated fashion either by reducing the "
        "coverage or number of tests performed."), 
        Write]
    boolean QuickMode;
    
    [Units ("Percent"), MinValue (0), MaxValue (100), 
        Description(
        "Requests the diagnostic software to reduce test coverage "
        "to the specified percentage.  For example, a hard drive "
        "scan test could be asked to run at 50%. The most "
        "effective way to accomplish this is for the test software "
        "to scan every other track, as opposed to only scanning the "
        "first half of a drive. It is assumed that the effectiveness "
        "of the test is impacted proportional to the percentage of "
        "testing requested. Permissible values for this property "
        "range from 0 to 100. \n"
        "This property may not be applicable to all tests.  If it "
        "can be set for a test, the value 7 (\"Supports PercentOf"
        "TestCoverage\") should be entered into the DiagnosticTest's "
        "Characteristics array."), 
        ModelCorrespondence {"CIM_DiagnosticTest.Characteristics"}, 
        Write]
    uint8 PercentOfTestCoverage;
    
    [Experimental, Description (
        "Array entries contain parameters corresponding to "
        "entries in the LoopControl array, limiting the number "
        "of times a test should be repeated with a single "
        "invocation of RunTest by a CIM client"),
        ArrayType ("Indexed"),
        ModelCorrespondence {"CIM_DiagnosticResults.LoopControl"},
        Write ]
    string LoopControlParameter[];
 
    [Experimental, Description (
        "LoopControl, used in conjunction with LoopControlParameter, "
        "sets one or more loop control mechanisms that limits the "
        "number of times a test should be repeated with a single "
        "invocation of RunTest by a CIM client. There is an "
        "array-positional correspondence between LoopControl "
        "entries & LoopControlParameter entries. The entries in "
        "these coupled arrays of loop controls can be used in a "
        "logical OR fashion to achieve the desired loop control. "
        "For example, if a client wants to loop a test 1000 times, "
        "but quit if a timer runs out, it could set both controls "
        "into the LoopControl array as two separate entries in each "
        "array. The looping test will terminate when the first of the "
        "two ORed conditions are met. \n"
        "The descriptions for each loop control are given below: \n"
        "\n"
        "  Unknown (= 0) \n"
        "  Other (= 1) : Additional detail may be found in "
        "OtherLoopControlDescription. \n"
        "  Continuous (= 2) : The corresponding LoopControl"
        "Parameter is ignored and the test will execute "
        "continuously. Tests that use this control should also " 
        "support DiscontinueTest. \n" 
        "  Count (= 3) : The corresponding LoopControlParameter "
        "is interpreted as a loop count (uint32), indicating "
        "the number of times the test should be repeated with "
        "a single invocation of RunTest by a CIM client. \n"
        "  Timer (= 4) : The corresponding LoopControlParameter "
        "is interpreted as an initial value (uint32) for a test "
        "loop timer, given in seconds.  The looping is "
        "terminated when this timer has lapsed. \n"
        "  ErrorCount (= 5) : The corresponding LoopControl"
        "Parameter is interpreted as an error count (uint32). "
        "The loop will continue until the number of errors that "
        "have occurred exceeds the ErrorCount. Note: the "
        "ErrorCount only refers to hard test errors; it does not "
        "include soft errors or warnings. "),
        ArrayType ("Indexed"),
        ValueMap {"0", "1", "2", "3", "4", "5"},
        Values{"Unknown", "Other", "Continuous", "Count", "Timer", 
            "ErrorCount"},
        ModelCorrespondence {
            "CIM_DiagnosticResults.LoopControlParameter",
            "CIM_DiagnosticResults.OtherLoopControlDescription"} ]
    uint16 LoopControl[];
 
    [Experimental, Description (
        "Provides additional information for LoopControl when "
        "its value is set to 1 ('Other')."),
        ModelCorrespondence {
            "CIM_DiagnosticResults.LoopControlParameter"},
        Write ]
    string OtherLoopControlDescription;

    [Write, Experimental, Description (
        "The ResultsPersistence property is a directive from a test "
        "client to a test provider.  It allows the client to specify "
        "to the diagnostic service provider how long to persist an "
        "instance of a DiagnosticResult.  The timeout period starts "
        "upon completion of the diagnostic started by the diagnostic "
        "service.\n"
        "Here is a summary of the choices for ResultPersistence"
        "Option: \n"
        "\"No Persistence\"            (value =  0) \n" 
        "Setting the timer to zero tells the provider not to persist "
        "the diagnostic result.  Responsibility for the final "
        "disposition of the diagnostic result is inherently "
        "satisfied. \n"
        "\"Persist With TimeOut\"      (0 < value < 0xFFFFFFFF): \n"
        "Setting the ResultPersistenceOption to a integer will "
        "cause the DiagnosticResult to be persisted for that number "
        "of seconds. At the end of that time, the DiagnosticResult "
        "will be automatically deleted by the diagnostic service "
        "provider.  \n"
        "\"Persist Forever\"          (value = 0xFFFFFFFF): \n"
        "By setting the timeout value to the very large value, "
        "0xFFFFFFFF, the provider shall persist results forever. "
        "In this case, the provider will persist the results in the "
        "CIMOM's repository and the client SHALL bear responsibility "
        "for deleting them. This was the old protocol. In an extreme "
        "case, results could be persisted forever, if neither client " 
        "nor provider deletes them."),
        Units("Seconds") ]
    uint32 ResultPersistence;
};


// ==================================================================
//    DiagnosticService
// ==================================================================
[Abstract, Experimental, Version ("2.7.0"), Description (
    "The CIM_DiagnosticService class provides the ability to "
    "start a service that functions to participate in a problem "
    "determination process. Specific diagnostic services may be "
    "defined by subclassing this class. Examples of a diagnostic "
    "service are tests, information retrievers, exercisers, and "
    "ports to external executives.")]
class CIM_DiagnosticService : CIM_Service {
    
    [Description(
        "The RunDiagnostic method executes this test for the "
        "specified ManagedSystemElement (defined using the "
        "SystemElement input parameter). The capabilities for the "
        "diagnostic service will indicate where the results from the "
        "test job are stored. How the test should execute, i.e. its "
        "settings, is defined in a DiagnosticSetting object (or by "
        "a subclass of DiagnosticSetting). A reference to a Setting "
        "object is specified using the Setting input parameter.  If "
        "a reference is not passed into the method, then a default "
        "DiagnosticSetting may be used. \n"
        "When RunDiagnostic starts execution, the settings, which are "
        "time sensitive, should be evaluated and captured. This is "
        "suggested since the DiagnosticSetting object can be modified "
        "at any time, and therefore the current test settings could "
        "be lost.\n"
        "If 0 is returned, the function completed successfully and "
        "no ConcreteJob instance is created. If 0x1000 a "
        "ConcreteJob will be started."),
        ValueMap {"0", "1", "2", "3", "4", "5", "..", "0x1000",
            "0x1001..0x7777", "0x8000.."},
        Values {"Job completed with no error", "Not Supported", "Unknown",
            "Timeout", "Failed", "Invalid Parameter", "DMTF Reserved",
            "Method parameters checked - job started",
            "Method Reserved", "Vendor Specific"} ]
    uint32 RunDiagnostic(
        [IN] 
        CIM_ManagedSystemElement REF SystemElement, 
        [IN] 
        CIM_DiagnosticSetting REF Setting, 
        [IN(FALSE), OUT, 
            Description("Handle to job" )] 
        CIM_ConcreteJob REF Job); 
};
 

// ==================================================================
// DiagnosticTest
// ==================================================================
[Version ("2.7.0"), Description (
    "The CIM_DiagnosticTest class represents the framework for "
    "running diagnostic tests. Specific diagnostic tests may be "
    "defined by subclassing and/or instantiating this object. To"
    "provide more detail for a type of test(s) (i.e, additional "
    "properties and methods), subclassing is appropriate. \n"
    "When a DiagnosticTest can be simultaneously executed "
    "against several elements, then DiagnosticTest may launch "
    "a ConcreteJob to represent each execution.") ]
class CIM_DiagnosticTest : CIM_DiagnosticService {
    
    [Description (
        "The descriptions for each Characteristic are below:\n "
        "\n"
        "* \"Is Exclusive\" (value=2) is specified for the test "
        "module only if the diagnostic cannot run more than one test "
        "at a time, regardless of how many SystemElements are "
        "supported. Typically, this occurs when hardware or software "
        "constraints prevent the test from running as multiple, "
        "concurrent instances. If the diagnostic can be run against "
        "multiple SystemElements, but only once per Element, then set "
        "the IsExclusiveForMSE boolean property on the appropriate "
        "instances of DiagnosticTestForMSE. \n"
        "\n"
        "* If \"Is Interactive\" (value=3) is set, then the diagnostic "
        "displays a message either before, during or after testing. \n"
        "\n"
        "* Set \"Is Destructive\" (value=4) if the diagnostic will "
        "destroy data, or reconfigure the Element that is being "
        "tested. \n" 
        "\n"
        "* \"Is Risky\" (value=5) indicates that data loss may occur "
        "if the test is interrupted. Some tests make copies of data, "
        "perform the test, and restore the data returning the tested "
        "entity to its previous configuration. If the test is "
        "interrupted, then loss of data or reconfiguration of the "
        "tested ManagedSystemElement may occur. \n"
        "\n"
        "* If \"Is Package\" (value=6) is set, this test is actually "
        "a set of lower level diagnostics, that are 'packaged' "
        "together. \n"
        "\n"
        "\"Supports PercentOfTestCoverage\" (value=7) indicates that "
        "a request for reduced test coverage can be specified using "
        "the PercentOfTestCoverage property of Diagnostic Setting. \n"
        "\n"
        "Also, the values \"Unknown\" (0) and \"Other\" (1) may be "
        "specified. If \"Other\" is defined, additional detail may be "
        "found in the OtherCharacteristicDescription property of this "
        "class."), 
        ValueMap {"0", "1", "2", "3", "4", "5", "6", "7"},
        Values{"Unknown", "Other", "Is Exclusive", "Is Interactive", 
            "Is Destructive", "Is Risky", "Is Package", 
            "Supports PercentOfTestCoverage"},
        ModelCorrespondence {
            "CIM_DiagnosticTest.OtherCharacteristicDescription"} ]
    uint16 Characteristics[];
    
    [Description (
        "Provides additional information for the Characteristic when "
        "its value is set to 1 (\"Other\")."), 
        ModelCorrespondence {"CIM_DiagnosticTest.Characteristics"} ]
    string OtherCharacteristicDescription;
    
    [Deprecated {"CIM_DiagnosticTest.Started"}, Description(
        "Indicates if this test is currently being performed.  "
        "The use of this property has been deprecated.  Instead, "
        "the inherited property Started should be used.") ]
    boolean IsInUse;
    
    [Deprecated {"CIM_ServiceAffectsElement.AffectedElement"}, 
        Description(
            "Indicates the resources that are capitalized by the test. "
            "The use of this property has been deprecated.  Instead, "
            "association, ServiceAffectsElement, should be between "
            "the DiagnosticTest and the Resource being used."), 
        ValueMap {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9",
            "10", "11", "12", "13", "14", "15", "16", "17", "18", "19",
            "20", "21", "22", "23", "24", "25", "26"},
        Values{"CPU", "Memory", "Hard Disk", "CDROM", "Floppy", 
            "PCI Bus", "USB Bus", "1394 Bus", "SCSI Bus", "IDE Bus", 
            "Network", "ISA Bus", "EISA Bus", "VESA Bus", 
            "PCMCIA Bus", "CardBus", "Access.bus", "NuBus", "AGP", 
            "VME Bus", "Sbus IEEE 1396-1993", "MCA Bus", "GIO Bus", 
            "XIO Bus", "HIO Bus", "PMC Bus", "SIO Bus"} ]
    uint16 ResourcesUsed[];
    
    [Deprecated {"CIM_DiagnosticTest.RunDiagnostic"}, Description(
        "The RunTest method executes this test for the specified "
        "ManagedSystemElement.  The use of this method has been "
        "deprecated.  Instead, the RunDiagnostic method (inherited "
        "from DiagnosticService) should be used.") ]
    uint32 RunTest(
        [IN] 
        CIM_ManagedSystemElement ref SystemElement, 
        [IN] 
        CIM_DiagnosticSetting ref Setting, 
        [IN (false), OUT] 
        CIM_DiagnosticResult ref Result);   
    
    [Description(
        "Execution of this method will delete all instances of the "
        "DiagnosticResultForMSE object, for this DiagnosticTest "
        "and the specified ManagedSystemElement (defined using the "
        "SystemElement input parameter). The DiagnosticResults "
        "referenced in the DiagnosticResultForMSE instances will be "
        "deleted.  Also the association DiagnosticResultForTest that "
        "referees to the DiagnosticResult object, and this test will "
        " be deleted.\n"
        "  One output parameter is defined - ResultsNotCleared "
        "- which is a string array that lists the keys of the "
        "DiagnosticResults which could not be deleted. This "
        "information enables those Results to be revisited and either "
        "manually removed, or other corrective action taken. \n"
        "The method's return codes are expected to adhere to the XML "
        "return codes as they are introduced. Currently, the standard "
        "return values are: \n"
        "0 = OK (function succeeded, but the test itself may have "
        "failed \n"
        "1 = Unspecified Error (function failed for unspecified "
        "reasons) \n"
        "2 = Not Implemented (function is not implemented for this "
        "instance) \n"
        "3 = Out Of Resources (component could not allocate required "
        "resources, e.g. memory, disk space, etc.) \n"
        "In a subclass, the set of possible return codes could be "
        "specified, using a ValueMap qualifier on the method. The "
        "strings to which the ValueMap contents are 'translated' may "
        "also be specified in the subclass as a Values array "
        "qualifier.") ]
    uint32 ClearResults(
        [IN] 
        CIM_ManagedSystemElement ref SystemElement, 
        [IN (false), OUT] 
        String ResultsNotCleared[]);   
      
    [Deprecated {"CIM_EnabledLogicalElement.RequestedStatus"}, 
        Description (
        "After invocation of this method and its completion, the "
        "specified test(s) will be discontinued for the indicated "
        "ManagedSystemElement. The use of this method has been "
        "deprecated.  Instead the RequestedStatus (inherited property "
        "from EnabledLogicalElement) should be used to control the "
        "execution of the test.") ] 
    uint32 DiscontinueTest(
        [IN] 
        CIM_ManagedSystemElement ref SystemElement, 
        [IN] 
        CIM_DiagnosticResult ref Result, 
        [IN (false), OUT] 
        Boolean TestingStopped);   
};

// ==================================================================
// DiagnosticResultForMSE
// ==================================================================
[Association, Version ("2.6.0"), Description (
    "This is an association class relating diagnostic test "
    "results to the ManagedSystemElement that is/was tested.") ]
class CIM_DiagnosticResultForMSE {
    
    [Key, Description (
        "The diagnostic result.") ]
    CIM_DiagnosticResult REF Result;
    
    [Key, Description (
        "The ManagedSystemElement to which the diagnostic result "
        "applies.") ]
    CIM_ManagedSystemElement REF SystemElement;
};


// ==================================================================
// DiagnosticResultForTest
// ==================================================================
[Association, Version ("2.6.0"), Description (
    "This is an association class to relate the results of a test "
    "to the test itself.") ]
class CIM_DiagnosticResultForTest {
    
    [Key, Min (1), Max (1), Weak,
        Description ("The result object.") ]
    CIM_DiagnosticResult REF DiagnosticResult;
    
    [Key, Min(1), Max(1),
        Description ("The test that generated the result object.") ]
    CIM_DiagnosticTest REF DiagnosticTest;
};


// ==================================================================
// DiagnosticTestForMSE
// ==================================================================
[Association, Version ("2.6.0"), Description(
    "This is an association class that relates a DiagnosticTest "
    "to a ManagedSystemElement.  Consumers wishing to 'diagnose' "
    "a particular Element could query this association, for the "
    "Element, to determine what tests are available.") ]
class CIM_DiagnosticTestForMSE : CIM_ProvidesServiceToElement {
    
    [Override("Antecedent"), Description (
        "The test that may be run against a ManagedSystemElement.") ]
    CIM_DiagnosticTest REF Antecedent;
    
    [Override("Dependent"), Description (
        "The ManagedSystemElement that can be tested.") ]
    CIM_ManagedSystemElement REF Dependent;
    
    [Units ("Seconds"), Description (
        "Estimated number of seconds to perform the referenced "
        "DiagnosticTest against the ManagedSystemElement. Since "
        "execution times could vary by Element, this property is "
        "located in the association between the two entities. It is "
        "also captured in DiagnosticResult, in the Estimated"
        "TimeOfPerforming property.\n" 
        "A CIM Consumer can compare this value with the value in"
        "DiagnosticResult to get an idea of what impact their"
        "settings have on test execution."),
        ModelCorrespondence {
            "CIM_DiagnosticResult.EstimatedTimeOfPerforming"} ]
    uint32 EstimatedTimeOfPerforming;
    
    [Description (
        "If the DiagnosticTest referenced in this object can be run "
        "concurrently against multiple SystemElements, but only "
        "run one at a time for the referenced ManagedSystemElement, "
        "then this boolean is set to TRUE. Alternately, if the test "
        "can NOT be run concurrently irregardless of the System"
        "Elements being tested, then the more general \"Is Exclusive\" "
        "enumerated value (2) should be set in DiagnosticTest."
        "Characteristics.") ]
    boolean IsExclusiveForMSE;
};


// ==================================================================
// DiagnosticTestInPackage
// ==================================================================
[Association, Aggregation, Version ("2.7.0"), Deprecated {"No Value"}, 
    Description (
    "This class is being deprecated. Tests should be " 
    "grouped at the test level, not in the model. /n"
    "This is an association class that identifies a Diagnostic"
    "Test as made up of lower level Tests. In this case, the "
    "test identified as the GroupComponent reference (i.e, "
    "the higher level test) would have the \"Is Package\" "
    "enumerated value specified in "
    "DiagnosticTest.Characteristics.") ]
class CIM_DiagnosticTestInPackage : CIM_Component {

    [Override("GroupComponent"), Aggregate, 
        Deprecated {"No Value"}, Description (
            "The DiagnosticTest object that acts as the "
            "container for all the tests of the package.") ]
    CIM_DiagnosticTest REF GroupComponent;
    
    [Override("PartComponent"), 
        Deprecated {"No Value"}, Description (
            "The DiagnosticTest object that is one of the elements of "
            "the package.") ]
    CIM_DiagnosticTest REF PartComponent;  
};

     
// ==================================================================
// DiagnosticResultInPackage
// ==================================================================
[Association, Aggregation, Version ("2.7.0"), Deprecated {"No Value"}, 
    Description (
    "This class is being deprecated. Tests should be " 
    "grouped at the test level, not by the model. /n"
    "This is an association class that identifies a Diagnostic"
    "Result as made up of lower level Results. In this case, the "
    "Result identified as the PackageResult reference (i.e., "
    "the higher level result) would have its IsPackage property "
    "set to TRUE.") ]
class CIM_DiagnosticResultInPackage {
      
    [Key, Aggregate, Deprecated {"No Value"}, Description (
        "The DiagnosticResult object that acts as the container "
        "for all the results of the package.") ]
    CIM_DiagnosticResult REF PackageResult;
      
    [Key, Deprecated {"No Value"}, Description (
        "The DiagnosticResult object that is one of the elements of "
        "the package.") ]
    CIM_DiagnosticResult REF Result; 
}; 

// ==================================================================
// DiagnosticSettingForTest
// ==================================================================
[Association, Version ("2.6.0"), Description (
    "This is an association class to relate test settings with "
    "diagnostic tests.") ]
class CIM_DiagnosticSettingForTest : CIM_ElementSetting {
    
    [Override("Element"), Description (
        "The Test that can use the Setting object.") ]
    CIM_DiagnosticTest REF Element;
    
    [Override("Setting"), Description (
        "The Setting that can be applied to the execution of the "
        "DiagnosticTest.") ]
    CIM_DiagnosticSetting REF Setting;
};

// ==================================================================
// DiagnosticServiceCapabilities
// ================================================================== 
[Experimental, Version ("2.7.0"), Description ( 
    "DiagnosticServiceCapabilities is a class that describes the "
    "capabilities of the diagnostic service.  This provides the means "
    "for the diagnostic service to describe its abilities, "
    "limitations, and/or potential for use of various diagnostic "
    "service parameters.  For example, what types of settings the "
    "diagnostic service supports.") ]
class CIM_DiagnosticServiceCapabilities : CIM_Capabilities { 

    [Description (
        "The SupportedServiceModes property lists the operational "
        "modes that are supported by the Diagnostic Service./n"
        "These modes may correspond to, but are not limited to, "
        "settings that may be applied to a Diagnostic Service. "),
        ArrayType ("Indexed"),
        ValueMap {"0", "1", "2", "3", "4", "5", "6"},
        Values {"Unknown", "Other", "TestWarningLevel", 
            "PercentOfTestCoverage", "QuickMode", "HaltOnError", 
            "ResultPersistence"}, 
        ModelCorrespondence {
            "CIM_DiagnosticServiceCapabilities."
                "OtherSupportedServiceModesDescriptions"} ]
    uint16 SupportedServiceModes[]; 
   
    [Description (
        "Provides additional information for SupportedServiceMode "
        "when its value is set to 1 (\"Other\")."),
        ArrayType ("Indexed"),
        ModelCorrespondence {
            "CIM_DiagnosticServiceCapabilities."
                "SupportedServiceModes"}]
    string OtherSupportedServiceModesDescriptions[];

    [Description (
        "The SupportedLoopControl property lists the loop controls "
        "that are supported by the Diagnostic Service."),
        ValueMap {"0", "1", "2", "3", "4", "5"},
        ArrayType ("Indexed"),
        Values {"Unknown", "Other", "Continuous", "Count", "Timer", 
            "ErrorCount"},
        ModelCorrespondence {"CIM_DiagnosticSetting.LoopControl",
            "CIM_DiagnosticServiceCapabilities."
                "OtherSupportedLoopControlDescriptions" } ]
    uint16 SupportedLoopControl[];
    
    [Description (
        "Provides additional information for SupportedLoopControl "
        "when its value is set to 1 (\"Other\")."),
        ArrayType ("Indexed"),
        ModelCorrespondence {
            "CIM_DiagnosticCapabilities.SupportedLoopControl"} ]
    string OtherSupportedLoopControlDescriptions[];

    [Description (
        "The SupportedLogOptions property lists the log options "
        "that are supported by the Diagnostic Service."),
        ArrayType ("Indexed"),
        ValueMap {"0", "1", "2", "3", 
            "4", "5", "6", 
            "7", "8", "9", 
            "10", "11", "12"}, 
        Values {"Unknown", "Other", "TestErrors", "SoftErrors",
            "Status", "Warnings", "FRUInformation",
            "Debug", "Statistics", "Actions",
            "Configuration", "Subtests", "References"},
        ModelCorrespondence {"CIM_DiagnosticSetting.LogOptions",
            "CIM_DiagnosticCapabilities.OtherLogOptionDescriptions"} ]
    uint16 SupportedLogOptions[];
   
    [Description (
        "Provides additional information for SupportedLogOptions "
        "when its value is set to 1 (\"Other\"). "),
        ArrayType ("Indexed"),
        ModelCorrespondence {
            "CIM_DiagnosticCapabilities.SupportedLogOptions"} ]
    string OtherLogOptionDescriptions[];

    [Description (
        "The SupportedLogStorage property lists the storage options "
        "for logging that are supported by the Diagnostic Service. \n"
        "The values are: \n"
        "\"ResultArray\" (Value = 2): Supports writing log information "
        "to the TestResult array of a DiagnosticResult instance. \n"
        "\"LogRecords\" (Value = 3): Supports writing log information "
        "to a vendor defined subclass of the DiagnosticServiceRecord "
        "class as recommended in the description of its parent class "
        "CIM_LogRecord. \n"
        "\"MessageLog\" (Value = 4): Supports writing log information "
        "using the defined methods of the MessageLog class.\n"
        "\"File\" (Value = 5): Supports writing log information to a "
        "file."),
        ArrayType ("Indexed"),
        ValueMap {"0", "1", "2", "3", "4", "5"}, 
        Values {"Unknown", "Other", "ResultArray", "LogRecords", 
                "MessageLog", "File"},
        ModelCorrespondence {
            "CIM_DiagnosticServiceCapabilities."
                "OtherSupportedLogStorageDescriptions"} ]
    uint16 SupportedLogStorage[];
    
    [Description (
        "Provides additional information for SupportedLogStorage "
        "when its value is set to 1 (\"Other\"). "),
        ArrayType ("Indexed"),
        ModelCorrespondence {
            "CIM_ DiagnosticServiceCapabilities.SupportedLogStorage"} ]
    string OtherSupportedLogStorageDescriptions[];

    [Description(
        "The SupportedExecutionControls property lists the job "
        "controls that are supported by the Diagnostic Service."
        "The values are: \n"
        "\"JobCreation\" (Value = 2): publishes that a ConcreteJob "
        "instance will be created to control the diagnostic job "
        "launched by the diagnostic service. \n"
        "\"KillJob\" (Value = 3): publishes that the diagnostic "
        "service has implemented the KillJob method in ConcreteJob.\n"
        "\"Enable/Disable Job\" (Value = 4): publishes that the "
        "diagnostic service can pause and resume execution of the "
        "diagnostic job. This is accomplished by setting the "
        "RequestedStatus property that ConcreteJob inherits from "
        "CIM_EnabledLogicalElement to values Disabled to suspend "
        "and Enabled to resume.\n"
        "\"Shutdown Job\" (Value = 5): publishes that the diagnostic "
        "service can gracefully shutdown execution of the diagnostic "
        "job. Which is accomplished by setting the RequestedStatus "
        "property that ConcreteJob inherits from CIM_EnabledLogicalElement "
        "to the value, Shut Down."),
        ArrayType ("Indexed"),
        ValueMap {"0", "1", "2", "3", "4", "5"},
        Values {"Unknown", "Other", "Job Creation", "Kill Job",
                "Enable/Disable Job", "Shutdown Job"}, 
        ModelCorrespondence {
            "CIM_DiagnosticServiceCapabilities."
                "OtherSupportedExecutionControlsDescriptions"} ]
    uint16 SupportedExecutionControls[]; 
   
    [Description (
        "Provides additional information for SupportedExecutionControls "
        "when its value is set to 1 (\"Other\"). "),
        ArrayType ("Indexed"),
        ModelCorrespondence {
         "CIM_ DiagnosticServiceCapabilities.SupportedExecutionControls"} ]
    string OtherSupportedExecutionControlsDescriptions[];
};

// ==================================================================
// DiagnosticServiceRecord
// ==================================================================
[Experimental, Version ("2.7.0"), Description(
    "While a DiagnosticService is running, data generated by the "
    "service may be recorded in DiagnosticServiceRecord objects. "
    "A DiagnosticServiceRecord is related to its MessageLog via an "
    "instance of the RecordInLog aggregation class.")]
class CIM_DiagnosticServiceRecord : CIM_LogRecord {
 
    [Required, Description (
        "This property should reflect the value of the underlying "
        "DiagnosticService.Name property."),
        ModelCorrespondence {"CIM_DiagnosticService.Name"}]
    string ServiceName; 
 
    [Required, Description (
        "A unique identifier representing a single execution of a "
        "DiagnosticService on an instance of a managed element. All "
        "records created by this Service execution must have the same "
        "ExecutionID value, and that value must be unique across "
        "all Service executions.\n" 
        "The ExecutionID property is distinct from LogRecord.RecordID "
        "in that a MessageLog may aggregate multiple records with the same "
        "ExecutionID, corresponding to a single invokation of a Service, "
        "but each of these records will have unique RecordIDs."),
        ModelCorrespondence {"CIM_DiagnosticJob.ExecutionID"}]
    string ExecutionID ; 
 
    [Description (
        "The RecordType property specifies the nature of the data "
        "being entered into the ServiceRecord. The value in this " 
        "property should match one of the values indicated by the " 
        "DiagnosticSetting.LogOptions property.\n"),
        ValueMap {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
            "10", "11", "12"}, 
        Values{"Unknown", "Other", "TestErrors", "SoftErrors",
            "Status", "Warnings", "FRUInformation",
            "Debug", "Statistics", "Actions",
            "Configuration", "Subtests", "References"},
        ModelCorrespondence {"CIM_DiagnosticSetting.LogOptions"}]
    uint16 RecordType;
 
    [Description (
        "When \"Other\" (value=1) is entered in the RecordType "
        "property, OtherRecordTypeDescription can be used to describe "
        "the message type."),
        ModelCorrespondence {
            "CIM_DiagnosticSetting.OtherLogOptionsDescription"}]
    string OtherRecordTypeDescription;
}; 


// ===================================================================
// end of file
// ===================================================================
