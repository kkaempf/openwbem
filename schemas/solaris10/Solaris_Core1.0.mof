// ===================================================================
// Title:       Solaris Core MOF Specification 1.0
// Filename:    Solaris_Core1.0.mof
// Version:     1.0
// Author:      Sun Microsystems, Inc.
// Date:        06/01/1999
// Description:
// ===================================================================

// ==================================================================
// Pragmas
// ==================================================================
#pragma Locale ("en-US")

// ==================================================================
// Qualifiers
// ==================================================================

// ===================================================================
// Title:       Solaris Computer System
// Version:     1.0
// Date:        1/10/2000
// Description: Solaris_ComputerSystem Class definition
// ===================================================================

[Provider("com.sun.wbem.solarisprovider.computersystem.Solaris_ComputerSystem")]
class Solaris_ComputerSystem:CIM_UnitaryComputerSystem
{
    // Properties
    [ Description("Time in which system must be idle in order for"
		  "system to shutdown.")]
    string AutoShutdownIdleTime;

    [ Description("Time in which the system starts monitoring the"
		  "idle time for possible power shutdown")]
    string AutoShutdownStartTime;

    [ Description("Time in which the system stops monitoring the"
		  "idle time for possible power shutdown")]
    string AutoShutdownStopTime;

    [ Description("This is the task performed if the idle time"
		  "AND time period conditions are met.")]
    string AutoShutdownBehavior;
	
    // Methods
    [ Description("This method sets the system power mgt properties.")]
    sint32 setPowerMgtData([IN, MinValue(0), MaxValue(1440)] sint32 idletime, 
                   [IN, MinValue(0), MaxValue(23)] sint32 starttimehour, 
                   [IN, MinValue(0), MaxValue(59)] sint32 starttimemin, 
                   [IN, MinValue(0), MaxValue(23)] sint32 stoptimehour, 
                   [IN, MinValue(0), MaxValue(59)] sint32 stoptimemin, 
                   [IN, MinValue(1), MaxValue(5), 
                        ValueMap {"1", "2", "3", "4", "5"},
                        Values {"shutdown", "noshutdown",
                                "autowakeup", "default", 
                                "unconfigured"}] sint32 behavior);	
};

	[Provider ("com.sun.wbem.solarisprovider.logsvc.Solaris_LogRecord")]
class Solaris_LogRecord 
{
	[read, key, Description(
		"A Record identifier - along with a hashCode and a"
		"fileName uniquely describe a log record instance."
		"This field is generated by the logging service.")]
	sint64 RecordID;

	[read, key, Description(
		"Additional Record identifier generated by the"
		"logging service.")]
	sint32 RecordHashCode;

	[read, key, Description(
		"Logical name of the file where the record exists.")]
	string Filename;

	[read, Description(
		"Date and time at which the record was written.")]
	datetime RecordDate; 

	[read, write, Description( 
		"Category of the record - valid values are Application, "
		"System and Security.")]
	sint32 category = -1;

	[read, write, Description(
		"Severity of the log - Error, Warning and Informational.")]
	sint32 severity = -1;

	[read, write, Description(
		"Name of the application that generated this log record.")]
	string AppName = "Unknown";

	[read, write, Description(
		"Name of the user using the application that generated"
		"the log.")]
	string UserName = "Unknown";

	[read, write, Description(
		"Name of the machine the cimom's client is running on.")]
	string ClientMachineName = "Unknown";

	[read, write, Description(
		"Name of the machine the cimom is running on.")]
	string ServerMachineName = "Unknown";

	[read, write, Description(
		"A short description of the contents of the log.")]
	string SummaryMessage = "Unknown";

	[read, write, Description(
		"A detailed description of the contents of the log.")]
	string DetailedMessage = "Unknown";

	[read, write, Description(
		"Any additional data.")]
	string data = "Unknown";

	[read, write, Description(
		"Indicates if the record was written to syslog(1M) as well.")]
	boolean SyslogFlag = false;

	[Description(
		"Method to transfer bulk data.")]
	sint32 bulkData([IN] string filter, [OUT] string data[]);
	
};

	[Provider
	("com.sun.wbem.solarisprovider.logsvc.Solaris_LogService")]
class Solaris_LogService : CIM_Service
{
	[Description(
		"Method to clear a log file.")]
	sint32 clearLog([IN] string fileName);

	[Description(
		"Method to determine the number of records a log file has.")]
	sint64 getNumRecords([IN] string fileName, [OUT] sint64 numRec);

	[Description(
		"Method to list the names of all the log files on this system.")]
	sint32 listLogFiles([OUT]string logFiles[]);

	[Description(
		"Method to query the name the log file currently in use.")]
	sint32 getCurrentLogFileName([OUT] string fileName);

	[Description(
		"Method to query the number of log files allowed on this system.")]
	sint32 getNumLogFiles([OUT] sint32 numFiles);

	[Description(
		"Method to query the allowed limit in terms of size for"
		"a log file .")]
	sint64 getLogFileSize([OUT] sint64 fileSize);

	[Description(
		"Method to check if the system log switch is turned on or off")]
	sint32 getSyslogSwitch([OUT] string switch); 

	[Description(
		"Method to check the physical file name prefix of the log file")]
	sint32 getLogStorageName([OUT] string fileName); 

	[Description(
		"Method to check the physical directory location of the log file")]
	sint32 getLogFileDir([OUT] string dirName); 
};

	[Provider
	("com.sun.wbem.solarisprovider.logsvc.Solaris_LogServiceProperties")]
class Solaris_LogServiceProperties:CIM_Setting
{
	[key, read, write, Description(
		"Inconsequential key.")]
	string PropSettingName;

	[Description(
		"The physical directory location of the log file")]
	string Directory;

	[Description(
		"The size the log file can grow to before it is backed"
		"up or overwritten.")]
	string FileSize;

	[Description(
		"The maximum number of log files allowed to exist at any"
		"given point in time.")]
	string NumFiles;

	[Description(
		"The system log switch - can be turned on or off to"
		"start or stop logs from being written to syslog(1M)")]
	string SyslogSwitch;
};

class Solaris_LogServiceSetting:CIM_ElementSetting
{
       [override("Element")] 
    Solaris_LogService REF Element;
       [override("Setting")] 
    Solaris_LogServiceProperties REF Setting;
};

	[Association, Abstract]
class Solaris_SystemSetting:CIM_ElementSetting
{
       [override("Element")] 
    Solaris_ComputerSystem REF Element;
       [override("Setting")] 
    CIM_Setting REF Setting;
};

	[Provider ("com.sun.wbem.solarisprovider.productregistry.Solaris_Product")]
class Solaris_Product : CIM_Product
{
	// InstanceNumber ought to be a key, so, just concatenate it
	// to the version number internally.

	string InstanceNumber;
	string DisplayedName;
	string InstalledLocation;
	string UninstalledLocation; 

	// Info about any component this might be dependent on
	string DependsOnID[];
	string DependsOnVersion[];
	String ParentID;

	string BackwardCompatible[];

	string Keys[];
	string Values[];
};


	[Association, 
	    Provider ("com.sun.wbem.solarisprovider.productregistry.Solaris_ProductProductDependency")
	]
class Solaris_ProductProductDependency : CIM_ProductProductDependency
{
	[override("RequiredProduct")]
	Solaris_Product REF RequiredProduct;

	[override("DependentProduct")]
	Solaris_Product REF DependentProduct;
};

	[Association, 
		Provider
		("com.sun.wbem.solarisprovider.productregistry.Solaris_ProductParentChild")
	]
class Solaris_ProductParentChild : CIM_ProductParentChild
{
	[override("Parent")]
	Solaris_Product REF ParentProduct;

	[override("Child")]
	Solaris_Product REF ChildProduct;
};



//Performance monitor.
 
 [Provider ("com.sun.wbem.solarisprovider.perfmon.Solaris_PerformanceMonitor")]
class Solaris_PerformanceMonitor : CIM_Service
{
 
   [ Description (
          " The number of CPUs on target system") ]
   string numberOfCpus;
 
 
  [ Description (
          " The memory size of the target system") ]
   string memorySize;
 
  [ Description (
          " The number of disks on target system") ]
   string numberOfDisks;
 
 
  [ Description (
          " The number of days since last reboot(hh:mm if less than one day(24hrs))") ]
   string daysSinceLastReboot;
 
 
  [ Description (
          " Get the top CPU consumers") ]
 sint32  getCpuConsumers([IN] sint32 number,[OUT] string data[]) ;
 
 
   [ Description (
          " Get the top swap consumers") ]
 sint32  getSwapConsumers([IN] sint32 number,[OUT] string data[]) ;
 
 [ Description (
          " Get swap space information: "
                     "allocated,"
                     "reserved,"
                     "used,"
                     "availlable") ]
 sint32  getSwapSpaceData([OUT] string data[]) ;
 
 
 [ Description (
          " Get cpu utilization information: "
                     "user_time,"
                     "system_time,"
                     "wait_time") ]
 sint32  getCpuUtilData([OUT] string data[]) ;


[ Description (
          " Get disk consumption information: "
                     "device,"
                     "mount_point,"
                     "capacity,"
                     "used,"
                     "available,"
                     "percent_consumed") ]
 sint32  getDiskConsumptionData([OUT] string data[]) ;
 
[ Description (
          " Get disk throughput information: "
                     "device,"
                     "mount_point,"
                     "reads_per_second,"
                     "writes_per_second,"
                     "kbytes_read_per_second,"
                     "kbytes_write_per_second,"
                     "average_service_time") ]
 sint32  getDiskThroughputData([OUT] string data[]) ;
 
 
 [ Description (
          " Get network throughput information: "
                     "packets,"
                     "errors,"
                     "collisions") ]
 sint32  getNetworkThroughputData([OUT] string data[]) ;
 
 
 //Display NFS statistics
  [ Description (
          "Get the NFS statistics passed in: "
                     "NFS_MOUNTED_FS_STATS : Get nfs mounted filesystems statistics."
                     "NFS_SERVER_STATS : Get nfs server statistics."
                     "NFS_CLIENT_STATS : Get nfs client statistics."
                     "NFS_SERVER_RPC_STATS : Get nfs server rpc information."
                     "NFS_CLIENT_RPC_STATS : Get nfs client rpc information."
                     "NFS_INIT_STATS : Get and reinitialize all nfs statistics."
                     "NFS_INIT_CLIENT_RPC_STATS : Get and reinitialize client rpc statistics."
                     "NFS_INIT_CLIENT_STATS : Get and reinitialize nfs client statistics."
                     "NFS_INIT_SERVER_RPC_STATS : Get and reinitialize server rpc statistics."
                     "NFS_INIT_SERVER_STATS : Get and reinitialize nfs server statistics."
                     "NFS_INIT_MOUNTED_FS_STATS : Get and reinitialize nfs mounted filesystem statistics."
                      ) ]
 sint32  getNFSSTATS([IN] string stats_to_get,[OUT] string data[]) ;
 
 
   //Display virtual memory statistics
  [ Description (
           " Display the virtual memory statistics.") ]
  sint32 displayVMStats([OUT] string data[]) ;
 
};
