Testing:
    - smaller schema for make check.  create classes to exercise all aspects 
      of mof and xml.
    - bad xml tests
    - do some interop testing (client-server & server-client)
      - snia old and new (http://www.opengroup.org/snia-cimom/)
      - wbem services (get cimworkshop talking to owcimomd)
      - pegasus
      - openwbem 1.3.2 1.2.x (make sure binary fails)
      - wbemcli (http://www-124.ibm.com/sblim/sblimrm.html)
    - various make check components to have separate namespaces.
    - review CIM operations over HTTP v1.2 and see where we deviate.
    - Test case insensitivity (eg. try to add a disk and DISK class)
    - Test storing 1 million instances.
    - Test that failed OW_ASSERT(foo) comes across the wire correctly.

Fix problems:
    - Man pages aren't getting included in the rpm.
    - Fix the error message to be more descriptive when doing SSL, and the cert file isn't there.
    - EmbeddedObjects have to be MOF.

New features:
    - Modifying existing filters will affect the indication server, and
      may mean that indication providers need to be notified, etc. So:
      Create an CIM_IndicationFilter pass-thru provider so we can either:
      1. Prevent modifications to existing filters, or
      2. Do the work to re-initialize everything correctly in 
         OW_IndicationServerImpl.
    - Handle the various options in the CIM_IndicationSubscription and
      CIM_IndicationHandler classes.
    - Make the OW_*Repository classes into a shared library, and have a config
      item so people can use a custom repository.
    - Implement the CIM_Interop27 build-in providers.
        - New model for provider registration.
        - Do the rest of them.
    - Update SLP provider to use the new standard template.
    - Don't load the authentication provider if allow_anonymous is turned on.

Post 3.0
    - Add a virtual log message to the thread counter class so we can output
      information about threads starting and exiting.
    - Providers/Provider interfaces in a different process. Implement with 
      fork/exec/pipes for communication?
    - Internationalization.
    - Deal with locale on WBEM requests. (at least reject those that won't work)
      Look at unicode.org http://www.unicode.org/Public/ALPHA/CVTUTF-1-1/ConvertUTF.{c,h}
    - Add better error handling/messages to the MOF compiler.
    - Binary Indications (Possibly re-factor and use CIMXMLListener)
    - CMPI
    - Fix the lexer of the MOF compiler to parse unicode MOF files.  
        - Replace the input functions so that they translate from Unicode to
          UTF8, and fix the lexer to handle UTF8 strings and identifiers.
        - Or replace the lexer with something that can handle unicode,
          possibly the slex lexer from spirit.
    - Have an option for the mof compiler to parse a string.  Add interfaces
      such as OW_CIMQualifierType createQualifierType(const OW_String& qualMof)
      and OW_CIMClass createClass(const OW_String& clsMof) to the MOFCompiler
      class.
    - Use Boost.Python to create a python binding to the client library, to
      allow for easy scripting or dynamic CIMOM interaction.
    - Write a config file provider so the CIMOM config can be programatically
      changed from remote.
    - Write an SQL repository.
    - Add configure options to disable usage of zlib, pam, ssl, slp
    - Make null reference and array indexing default to on unless 
      specifically disabled.
    - Merge the PollingManager and the SelectEngine to remove a thread.
    - Create a mechanism to share schemas between namespaces.
    - Create a CIM class & provider to control the provider manager (re-scan
      providers, reload/unload providers, register new providers, etc.)
    - Deprecated property providers. Add an option to enable them, but leave
      them disabled by default.  Maybe remove the code in 2.2 (3.0?)
    - Make OW_Cpp*ProviderIFC method virtual (non-pure), so providers don't
      have to override non-implemented methods.
    - Remove instance qualifiers?
    - Create an indication export provider to the logger (cimom logger,
      syslog, etc.)
    - Option to have the mof compiler use a local repository.
    - Add some mof compiler options:
      - perform a syntax check (don't really import)
      - delete object(s) from repository
      - Preserve objects (don't overwrite if they already exist)
      - Suppress warnings
      - Suppress all messages.
      - Add -I flag for mof include search path.
      - Specify a file containing a list of MOFs to compile
      - output XML only to stdout.
      - Ignore double #includes so that you don't have to be so careful.
      - If the class already exists, don't do anything, just continue on.
    - Add an option for user to specify which interfaces to listen on.
    - ModifyInstance (deprecate empty PropertyList and ignore includeQualifiers)
    - New advanced errors.
    - Async. methods.
    - Implement new versions of DTD & CIM/XML and support backward 
      compatibility on client & server
    - Support for arrays of references (not currently legal, but there's no
      reason why not)
    - Overriding a method cannot add a required parameter.
    - Deprecate TOINSTANCE (don't send as XML, & ignore on incoming XML)
    - Use libcwd to improve the new segfault handler on linux.  De-mangle names
       and print filename/line numbers.
    - Add a page to the website similar to http://cygwin.com/bugs.html
    - Add rbac authentication
    - Validate the "Required" qualifier on properties during create & modifyInstance.
    - Add config items and code to do ssl client authentication.
    - Have the simple c++ provider interface associator providers only have to
      implement references.  The provider interface can easily do the rest.

Refactorings:
    - Get rid of all the bool parameters and replace them with enums
      (esp. for cimom handle calls.)
    - Make OW_Exception constructor protected and fix appropriate code.
    - Remove *E functions from the CIMOMHandle.  Create OW_CIMUtils:: functions
      that return OW_Enumeration<T> and OW_Array<T>.
    - Rename OW_Types.h to OW_Types.hpp
    - Put common request handlers into a header (e.g. InstanceArrayBuilder)

      Post 3.0
    - Merge OW_InternalProviderIFC and OW_CppProviderIFC (create a base class,
      move OW_Cpp*ProviderIFC classes into the cimom.
    - Create a base class for all the common code in the provider interfaces.
    - Create a common base class for C++ provider ifcs (internal, c++, 
      simplec++)
    - Move some of the XML code around.  Get rid of param* strings.  Move 
      XMLQualifier::* to XMLCIMFactory.
    - inline the smaller functions in OW_String, OW_StringBuffer, and other 
      commonly used classes.
    - XMLExecute has handling of flags like localonly, etc.  remove this
      and let CIMServer do it.  Remove code from CIMtoXML if not needed. 

      Interface breaking, but of questionable value.
    - Clean up naming. Create a CIM class/instance path, local object path,
      etc. and use them where appropriate.
    - Put everything into namespace OpenWBEM and remove OW_
    - Make a new header OW_PPconfig.h that is like OW_config.h now.  Make
      OW_config.h to not use PP symbols, use consts derived from the pp symbols.

Documentation:
    - Enhance developer documentation (similar to "SNIA CIM Object Manager 
      Architecture and Developers Guide" found at 
      http://www.opengroup.org/snia-cimom/) Also see: http://msdn.microsoft.com/library/default.asp?url=/library/en-us/wmisdk/wmi/supporting_features_for_wmi.asp
    - Document locking from a provider perspective, and which operations are
      safe for providers to perform.  Method providers may run concurrently
      (no locks are held.)
    - Make a web page that has a list of projects/products that are using 
      OpenWBEM.
    - Update javadoc on header files in ifcs, common, client, and provider.

Optimizations:
    - Use KCacheGrind to find any hot spots
    - OW_IndicationServerImpl::_processIndication() rewrite (see comment)
    - Switch OW_Reference to be intrusive reference counted.
    - See if using OW_StringBuffer as the OW_String internal representation is 
      faster than ByteBuf.
    - Redo WQL to only process one instance at a time for better scalability.
    - Use OW_HashMap class where appropriate.
    - Change instance/associator provider interface to pass in a list of
      properties which should be returned, so providers can optimize and avoid
      calculating unrequested properties.  OW_CIMServer will have to calculate
      the property list based on local-only, propertyList, deep, etc. Also,
      pass all the parameters (localOnly, deep, propertyList, etc.) to the
      generic *ProviderIFC, so that various interfaces can make use of them.
      Change OW_CIMServer to not do anything with the parameters when calling
      a provider.  Let the provider ifc/provider do all the work.
    - Do explicit template instantiation to help speed up compiles.  OW_Array
      would be a good candidate for this.
    - Have OW_CIMClass store a list of base classes.  Then remove some of the
      algorithms that have to run up the chain by doing a repeated getClass.
    - OW_CIMXMLCimomHandle: Only send optional parameters if they aren't the
      default to save transmission bytes.
    - Control template/inline code duplication bloat in shared libraries.
      - Un-inline non-performance-critical functions.
      - Separate templates into declaration and definition files.
      - Explicitly instantiate common templates.
      - Use -fno-implicit-templates, -fno-implicit-inline-templates, and
        -fno-implement-inlines when compiling any shared libraries.
