Fix the copyrights on all the files.

Testing:
    - Add an property provider to the test suite.
    - smaller schema for make check.  create classes to exercise all aspects 
      of mof and xml.
    - bad xml tests
    - do some interop testing (client-server & server-client)
      - snia old and new (http://www.opengroup.org/snia-cimom/)
      - wbem services (get cimworkshop talking to owcimomd)
      - pegasus
      - openwbem 1.3.2 1.2.x (make sure binary fails)
      - wbemcli (http://www-124.ibm.com/sblim/sblimrm.html)
    - various make check components to have separate namespaces.
    - review CIM operations over HTTP v1.1 and see where we deviate.
    - Test case insensitivity (eg. try to add a disk and DISK class)
    - Test storing 1 million instances.
    - Disable indications during testsuite to speed things up.
    - Test that OW_ASSERT(foo) comes across the wire correctly.

Fix problems:
    - Add an option for user to control SO_REUSEADDR
    - Add an option for user to specify which interfaces to listen on.
    - Fix memory leak in openssl (when restarting) & in npi.
    - Add a page to the website similar to http://cygwin.com/bugs.html
    - Add a segfault handler on linux that will create a stack trace using
      the glibc functions. (replace slow & somewhat broken gdb stack trace)
    - Man pages aren't getting included in the rpm.
    - Create a non-recursive mutex, and use it with condition variables,
      since using a recursive mutex with condition variables can deadlock
      "because  the  implicit  unlock  performed for a 
      pthread_cond_wait() or pthread_cond_timedwait()
      will not actually release the mutex (if it had  been  locked
      multiple times). If this occurs, no other thread can satisfy
      the condition of the predicate."
    - Make it harder to create NULL CIM objects.  Remove the bool constructor
      and add a explicit void* constructor.  (e.g. OW_CIMClass c; wouldn't
      be NULL.  To create a NULL OW_CIMClass, you'd have to say 
      OW_CIMClass c(NULL);)

New features:
    - Create intrinsic providers for
      CIM_IndicationSubscription that interfaces with the providers.
      X Create a polling class, so if the provider is lazy, the
        cimom will check for differences (by calling enumInstances) and send 
		out the appropriate lifecycle indications.  This will be used if the 
		provider responds true to the mustPoll() call.
        X Polling manager needs capability to add/remove or start/stop a polled 
          provider
      - Indication providers must also indicate what class they are 
        instrumenting if they are a lifecycle type.
      X Add tests for provider manager getIndicationProvider
      - Add example of types of indication providers: 
        X indication (mustPoll = true) OW_IndicationProviderTest1
        - indication (mustPoll = false) w/ extra thread
        - indication/polled (mustPoll = false) and no extra thread.
        - Modify OW_TriggerProviderTest* to be indication providers.
      - Add a command line event listener.
      - OW_IndicationServerImpl::deleteSubscription
      - OW_IndicationServerImpl::createSubscription
        - Only allow subscriptions if a) There is a provider capable of
          generating the requested Indication in the filter. And
          b) There is a provider that can handle the requested 
             IndicationHandler.
      X polled providers need a way to indicate they provide indications.
        I decided that the way for them to do that is to implement the
        OW_CppIndicationProviderIFC.  A "pure" polled provider should not
        deliver indications.
      - Indication/polled providers need a way to stop/restart polling.
      - OW_IndicationServerImpl::modifySubscription
      - OW_IndicationServerImpl::_processIndication
        - Create a wql filter property source.
      - OW_IndicationRepLayer needs an indication provider to interface with
        it to indicate whether it should generate intrinsic indications.
    - Add an option to the mof compiler to output provider skeleton code for
      a MOF class.
    - Add an option to the mof compiler to output a client class that wraps
      a CIMInstance for a specific class.
    - Generalize the class cache in OW_MetaRepository.cpp
    - Create caching cimom handles (qualifier, class, instance).
    - Have the mof compiler and the various test programs use the caching
      cimom handles.
    - Add a virtual log message to the thread counter class so we can output
      information about threads starting and exiting.
    - Providers/Provider interfaces in a different process. Implement with 
      fork/exec/pipes for communication?
    - Internationalization.
    - Deal with locale on WBEM requests. (at least reject those that won't work)
    - Add better error handling/messages to the MOF compiler.
    - Binary Indications (Possibly re-factor and use CIMXMLListener)
    - clean up stale indication subscriptions (write provider for this)
    - CMPI
    - Implement the CIM_Interop27 build-in providers.
        - add handling for new namespace model
        - New model for provider registration.
        - Do the rest of them.
    - Fix the lexer of the MOF compiler to parse unicode MOF files.  
        - Replace the input functions so that they translate from Unicode to
          UTF8, and fix the lexer to handle UTF8 strings and identifiers.
        - Or replace the lexer with something that can handle unicode,
          possibly the slex lexer from spirit.
    - Have an option for the mof compiler to parse a string.  Add interfaces
      such as OW_CIMQualifierType createQualifierType(const OW_String& qualMof)
      and OW_CIMClass createClass(const OW_String& clsMof) to the MOFCompiler
      class.
    - Use Boost.Python to create a python binding to the client library, to
      allow for easy scripting or dynamic CIMOM interaction.
    - Write a command line utility to register for and print indications.
    - Write a config file provider so the CIMOM config can be programatically
      changed from remote.
    - Make the OW_*Repository classes into a shared library, and have a config
      item so people can use a custom repository.
    - Write an SQL repository.
    - Make event system more scalable.
      - Only parse queries once when they're created.
      - Implement authorizeFilter, activateFilter, deactivateFilter on providers
    - Add configure options to disable usage of zlib, pam, ssl, slp
    - Make null reference and array indexing default to on unless 
      specifically disabled.
    - Merge the PollingManager and the SelectEngine to remove a thread.
    - Create a mechanism to share schemas between namespaces.
    - Add an option to {dis,en}able the IndicationRepLayer (sending intrinsic
      indications.)
    - Create a CIM class & provider to control the provider manager (re-scan
      providers, reload/unload providers, register new providers, etc.)
    - Deprecated property providers. Add an option to enable them, but leave
      them disabled by default.  Maybe remove the code in 2.2 (3.0?)
    - Make OW_Cpp*ProviderIFC method virtual (non-pure), so providers don't
      have to override non-implemented methods.
    - Remove instance qualifiers?
    - Create an indication export provider to the logger (cimom logger,
      syslog, etc.)
    - Add some mof compiler options:
      - perform a syntax check (don't really import)
      - delete object(s) from repository
      - Preserve objects (don't overwrite if they already exist)
      - Suppress warnings
      - Suppress all messages.
      - Add -I flag for mof include search path.
      - Specify a file containing a list of MOFs to compile
      - output XML only to stdout.

Refactorings:
    - Create a base class for all the common code in the provider interfaces.
    - Move some of the XML code around.  Get rid of param* strings.  Move 
      XMLQualifier::* to XMLCIMFactory.
    - Create a common base class for C++ provider ifcs (internal, c++, 
      simplec++)
    - inline the smaller functions in OW_String, OW_StringBuffer, and other 
      commonly used classes.
    - XMLExecute has handling of flags like localonly, etc.  remove this
      and let CIMServer do it.  Remove code from CIMtoXML if not needed. 
    - Get a better separation between OW_CIMServer and OW_*Repository.
      Have CIMServer do all the CIM Stuff, and have the repository classes just
      responsible for storage and indexing.
    - Rename OW_Types.h to OW_Types.hpp
    - Make OW_Exception constructor protected and fix appropriate code.
    - Remove *E functions from the CIMOMHandle.  Create 2 wrapper cimom
      handles that return OW_Enumeration<T> and OW_Array<T>.
    - Put common request handlers into a header (e.g. InstanceArrayBuilder)

Documentation:
    - Enhance developer documentation (similar to "SNIA CIM Object Manager 
      Architecture and Developers Guide" found at 
      http://www.opengroup.org/snia-cimom/) Also see: http://msdn.microsoft.com/library/default.asp?url=/library/en-us/wmisdk/wmi/supporting_features_for_wmi.asp
    - Document locking from a provider perspective, and which operations are
      safe for providers to perform.  Method providers may run concurrently
      (no locks are held.)
    - Make a web page that has a list of projects/products that are using 
      OpenWBEM.

Optimizations:
    - Use KCacheGrind to find any hot spots
    - OW_IndicationServerImpl::_processIndication() rewrite (see comment)
    - Switch OW_Reference to be intrusive reference counted.
    - See if using OW_StringBuffer as the OW_String internal representation is 
      faster than ByteBuf.
    - Redo WQL to only process on instance at a time for better scalability.
    - Use OW_HashMap class where appropriate.
    - Change instance/associator provider interface to pass in a list of
      properties which should be returned, so providers can optimize and avoid
      calculating unrequested properties.  OW_CIMServer will have to calculate
      the property list based on local-only, propertyList, deep, etc. Also,
      pass all the parameters (localOnly, deep, propertyList, etc.) to the
      generic *ProviderIFC, so that various interfaces can make use of them.
      Change OW_CIMServer to not do anything with the parameters when calling
      a provider.  Let the provider ifc/provider do all the work.
