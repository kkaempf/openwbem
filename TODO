

Testing:
    - Add an property provider to the test suite.
    - smaller schema for make check.  create classes to exercise all aspects 
      of mof and xml.
    - bad xml tests
    - do some interop testing (client-server & server-client)
      - snia old and new (http://www.opengroup.org/snia-cimom/)
      - wbem services (get cimworkshop talking to owcimomd)
      - pegasus
      - openwbem 1.3.2 1.2.x (make sure binary fails)
    - various make check components to have separate namespaces.
    - review CIM operations over HTTP v1.1 and see where we deviate.
      specifically, the indication delivery is known to be different. 
    - Test case insensitivity (eg. try to add a disk and DISK class)
    - Test storing 1 million instances.

Fix problems:
    - On startup of UDS if the UDS already exists, SocketImpl need to figure 
      out if someone else is listening. If so, then fail, otherwise delete it.
      Use fcntl locking (if available, else try flock) to check.
      Or we could use kernel semaphores (semget semop).
    - OW_File needs to be more C++ish with a destructor, reasonable copy
      semantics, etc.
    - Use kill(pid, 0) to detect a stale pid file.
    - Daemon doesn't withstand repeated HUP signals.
    - Get rid of OW_ThreadEvent because it is subject to race conditions.
      Replace it with a condition variable class.

New features:
    - Providers/Provider interfaces in a different process. Implement with 
      fork/exec/pipes for communication?
    - Internationalization.
    - Deal with locale on WBEM requests. (at least reject those that won't work)
    - Add better error handling/messages to the MOF compiler.
    - Binary Indications (Possibly re-factor and use CIMXMLListener)
    - clean up stale indication subscriptions (write provider for this)
    - CMPI (replace NPI)
    - Create a mechanism for built-in classes (possibly internal class 
      providers?)
        - add handling for new namespace model
        - New model for provider registration .
    - Fix the lexer of the MOF compiler to parse unicode MOF files.  
        - Replace the input functions so that they translate from Unicode to
          UTF8, and fix the lexer to handle UTF8 strings and identifiers.
        - Or replace the lexer with something that can handle unicode,
          possibly the slex lexer from spirit.
    - Have an option for the mof compiler to parse a string.  Add interfaces
      such as OW_CIMQualifierType createQualifierType(const OW_String& qualMof)
      and OW_CIMClass createClass(const OW_String& clsMof) to the MOFCompiler
      class.
    - Use Boost.Python to create a python binding to the client library, to
      allow for easy scripting or dynamic CIMOM interaction.
    - Write a command line utility to register for and print indications.
    - Add -I flag for mof include search path.
    - Write a config file provider so the CIMOM config can be programatically
      changed from remote.
    - Make the OW_*Repository classes into a shared library, and have a config
      item so people can use a custom repository.
    - Write an SQL repository.

Refactorings:
    - Move some of the XML code around.  Get rid of param* strings.  Move 
      XMLQualifier::* to XMLCIMFactory.
    - Create a common base class for C++ provider ifcs (internal, c++, 
      simplec++)
    - inline the smaller functions in OW_String, OW_StringBuffer, and other 
      commonly used classes.
    - XMLExecute has handling of flags like localonly, etc.  remove this
      and let CIMServer do it.  Remove code from CIMtoXML if not needed. 
    - Get a better separation between OW_CIMServer and OW_*Repository.
      Have CIMServer do all the CIM Stuff, and have the repository classes just
      responsible for storage and indexing.

Documentation:
    - Enhance developer documentation (similar to "SNIA CIM Object Manager 
      Architecture and Developers Guide" found at 
      http://www.opengroup.org/snia-cimom/)

Optimizations:
    - OW_IndicationServerImpl::_processIndication() rewrite (see comment)
    - Switch OW_Reference to be intrusive reference counted.
    - See if using OW_StringBuffer as the OW_String internal representation is 
      faster than ByteBuf.
