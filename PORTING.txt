The purpose of this file is to document the portablity objectives of the 
OpenWbem developers and the decisions they have made to address it.

OBJECTIVE:

Before we started the implementation of OpenWbem, we decided that portablity
was of paramount importance. We wanted to insure that porting OpenWbem to 
another platform in the future would not result in a branch off of the 
original source tree or major modifications to the existing one. If anyone
takes on the task of porting this to another platform, keep in mind, we are
not opposed to making modifications to the existing source tree to help 
facilitate this. Our main objective in this area is to eliminate the need
for a branch off of the original source tree.

ASSUMPTIONS:

The target platform must meet the following criteria:
	- Provides an ANSI C++ compiler
	- Provides the Standard C++ library.
	- Provides the Standard C library.
	- Can support threading in some form.
	- Can support socket communication in some form.
	

APPROACH:

All OS specific functionality is provided by an OS abstraction layer. 
A couple of global headers may need modification: OW_NetworkTypes.hpp,
OW_ThreadTypes.hpp.
All code specific to a particular platform is located under the src/platform
directory. To port to a new platform, a new platform branch should be created.
Also the configure script will need to be modified to correctly set the 
directory that will be built.  Other compiler/linker flags can be set as well
from the configure script.
Throughout the source code, you will see the use of native data types
(i.e. int, float, etc..). We have chose to not avoid these types unless a method
we provide requires an specific type of value. For instance, if a method 
requires an unsigned 32 bit value to be provided when called, the OW_UInt32
typedef would appear in its signature. If a native integer would suffice then
the standard 'int' would be used.

We assume all header files included in files above the OS abstraction layer
provide the same interface information across platforms. If our assumptions are
wrong, then the OS abstraction layer must be changed to address this.


	






