-----------------------------------------------------------------------------
Don't use bool (or OW_Bool) in parameter lists.  It makes calling code 
impossible to understand.  Use an enum instead.
	e.g.:  f(true, false, true, true); // what the hell is this doing?
		// I'll have to look up the function declaration to find out!
	       f(DO_X, OMIT_Y, USE_Z, DO_A); // don't even need a comment here.
Using bools makes it difficult (sometimes impossible) to overload the
function, and can also make it hard to catch errors such as swapping the order
of parameters and such.
-----------------------------------------------------------------------------
Nameing conventions:
enums begin with E (or OW_E if not otherwise scoped), and if they're used as 
a parameter to a function, they should end with Flag.  enum values should be
all caps, with underscores between words, and begin with E_.  Avoid anonymous
(aka unnamed) enums.  Don't use an int variable to store an enum value. i.e.:

// this is bad
enum
{
	E_A,
	E_B
};

int myEnumVal = E_A;

// do this instead
enum EMyEnum
{
	E_A,
	E_B
};

EMyEnum myEnumVal = E_A;

Don't assign numerical values to enum items unless they have some external
meaning.  Having numerical values makes enums prone to error as well as makes
them hard to maintain or refactor.  It sucks to have to renumber all the
values just to insert a new item in the middle.
-----------------------------------------------------------------------------
Exceptions.
When to use catch(...).  e.g.:
try
{
	//...
}
catch (...)
{
	// swallow all exceptions
}

Only do that in destructors.  Never let an exception escape a destructor, if
it does, it will probably abort the cimom.
There may be other occasions where this is appropriate, such as in threads
that need to keep running even though one iteration of it's work has failed.
In this case, the OW_ThreadCancelledException should *never* be caught:

try
{
	//...
}
catch (OW_ThreadCancelledException&)
{
	throw;
}
catch (...)
{
	// swallow all exceptions
}

In some cases (this should be very rare if the code is written correctly using
the RAII idiom), if may be necessary to use catch(...) like this:

try
{
	//...
}
catch (...)
{
	// do some cleanup
	throw;
}

Also, main() should catch(...) and gracefully exit.

Never use exception specifications (except for no throw "throw()", and then
only if you are 100% sure it can't throw), because it can easily lead to
abort() being called if an exception is thrown that doesn't match the
specification.  Unfortunately gcc doesn't check, and so this can easily lead
to problems.
-----------------------------------------------------------------------------
The following CIM elements are case-insensitive: Classes, Instances, Methods,
Properties, Qualifiers and Method Parameters.
Namespaces in OpenWBEM are *NOT* case-insensitive.  i.e. root/CIMV2 is a
different namespace than root/cimv2.
-----------------------------------------------------------------------------
If at all possible avoid static objects that have a constructor.  These can
lead to the dreaded "static initialization dependency order" problem.  You're
almost bound to run into it if you have a static mutex and you try and lock it
in a static object's constructor in another translation unit, or even possibly
in the same translation unit, if the mutex is declared after the other static
object.
-----------------------------------------------------------------------------
memory:
You should always use a class with a destructor (such as OW_Reference<>) to 
manage memory.  If you ever have to write "delete", then you're doing
something wrong.
Use OW_String instead of char* and OW_Array<> instead of raw C arrays.
-----------------------------------------------------------------------------
All files must have a copyright notice.
-----------------------------------------------------------------------------
Header files must have a standard include guard, and it should be like this:
#ifndef OW_FILE_NAME_HPP_INCLUDE_GUARD_
#define OW_FILE_NAME_HPP_INCLUDE_GUARD_
//...
#endif
Use all caps and put underscores between words in the filename (where it would
be a new capital letter in the class name)  It's important to not get a
collision with the same include guard of another file, that will cause
unexplainable errors that lead to a lot of head-scratching and wasted time.
-----------------------------------------------------------------------------
All files must include "OW_config.h" as the first include file.
cpp files must include it's corresponding header file as the 2nd include file.
-----------------------------------------------------------------------------
Try to minimize header dependencies as much as possible.  Include the minimum
possible in header files.  You'll need to include headers for base classes as
well as any types used as member variables.  Everything else can be forward
declared.  If you use the pimpl idiom, you can get away with only including
OW_Reference (or OW_COWReference).  This helps to greatly reduce compilation
time and also helps prevent bloat from inline functions.
-----------------------------------------------------------------------------
