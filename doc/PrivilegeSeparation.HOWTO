Notes on OpenWBEM Privilege Separation
======================================

1.0 Problem:

  Previous versions of OpenWBEM (before 4.0) would run the CIMOM as root.  Any
providers would also execute as root.  Running everything as root leads to
obvious security concerns.  Loading up untrusted providers would not be
possible.

2.0 Goals:

  * Limit the amount of code running as root so that code audits can focus on
    security critical code.

  * Limit privilege escalation exposure.  If an attacker compromises owcimomd,
    she can't do anything as root without providing proper credentials.

  * Allow for providers to run as non-privileged users so that provider code
    can be simplified (and thus more secure) by relying on the OS enforcing
    permissions.

3.0 Separating Privileges:

  The simplified version of it would be that we now run everything as an
unprivileged user (owcimomd) and request elevated privileges as needed from a
"privilege manager".

  This in itself is a good step forward, but for better security we need to
have providers executed in a different process space than the CIMOM.  The CIMOM
now allows providers to be executed through a "out-of-process" provider runner
(see below) so they no longer have direct access to any resources in the CIMOM.

3.1 Privilege Manager:

  The privilege manager will obtain its configuration files only from the file
system and verify that they are secure (owned and writeable only by root)
before using them.  If a request is allowed in its configuration (such as
opening a file or executing a process), it will take the steps needed to grant
the request through a process we call the "monitor".

  If a monitored process attempts to do something which is not allowed by its
current privileges, it will fail (throw an exception).  All subsequent
privilege manager requests will be denied.

3.1.1 Privilege Files

  The privilege file specifies the operations that will be allowed by the
privilege manager.

3.1.1.1 Path Specifiers

  The paths specified for file or executable operations can be of these forms:

    * /a/b - The file or directory named /a/b.  No files or sub directories of
      "b" will match.

      Example: open_r { /etc/samba/smb.conf }

    * /a/b* - Any file or directory named /a/b*.  No files or sub directories of
      any match for "b*" will match.

      Example: open_rw { /dev/ttyS* }

    * /a/b/** - Any directory or file whose sub-tree is rooted at /a/b

      Example: read_dir { /usr/local/** }

3.1.1.2 File Operations

  File operations are specified in the config file as follows:
    <operation> { <path1> <path2> ... <pathN> }

  The following file privileges are currently supported:

    * open_r - Open a file (read-only)
        PrivilegeManager::open(<path>, PrivilegeManager::in)

    * open_w - Open a file (write-only)
        PrivilegeManager::open(<path>, PrivilegeManager::out)

    * open_rw - Open a file (read-write)
        PrivilegeManager::open(<path>, PrivilegeManager::in_out)

    * open_a - Open a file (write and append)
        PrivilegeManager::open(<path>, PrivilegeManager::out_app)
        PrivilegeManager::open(<path>, PrivilegeManager::in_out_app)
        PrivilegeManager::open(<path>, PrivilegeManager::iota)

    * stat - Obtain file information for a specific path
        PrivilegeManager::stat(<path>)
        PrivilegeManager::lstat(<path>)

    * read_dir - Obtain a file listing for a specific directory path
        PrivilegeManager::readDirectory(<path>, PrivilegeManager::E_KEEP_SPECIAL)
        PrivilegeManager::readDirectory(<path>, PrivilegeManager::E_OMIT_SPECIAL)

    * read_link - Obtain the contents of a specified symlink
        PrivilegeManager::readLink(<path>)

    * rename_from - Allows the specified file to be renamed to something else.
      The rename_to privilege must also exist for the new path.
        PrivilegeManager::rename(<old path>, <new path>)

    * rename_to - Allows the specified paths to be used as the destination of a rename
      The rename_from privilege must also exist for the old path.
        PrivilegeManager::rename(<old path>, <new path>)

    * rename_from_to - Allows the specified paths to be used as the source or
      destination path in a rename.
        PrivilegeManager::rename(<old path>, <new path>)

    * remove_file - Allows the specified files to be deleted
        PrivilegeManager::removeFile(<path>)

    * remove_dir - Allows the specified directories to be deleted
        PrivilegeManager::removeDirectory(<path>)

3.1.1.3 Process Operations

  Each of the process execution privileges has a unique syntax to reflect the
required operations.  When any of the spawn functions of PrivilegeManager are
called, the privilege manager verifies that the current process has the
appropriate privilege to do the operation.  All of the values listed in the
privilege file must match for a successful request.

  Environment variables, except for a very small platform-specific list, are
typically considered insecure and stripped before any execution.  To allow
environment variables to be passed to a spawned process, the privilege file can
specify a list of environment variables which are allowed to be passed.
Limitations of variable values can also be specified.

  Example environment modification:
    allowed_environment_variables { VAR1 VAR2="value2" VAR3=/a/b/** }

  This example allows VAR1 to be set to any value.  VAR2 must be set to
  "value2", and VAR3 can be set to any path name whose sub-tree is rooted at
  /a/b.

  The following execution privileges are currently supported:

    * monitored_exec { <exec path> @ <priv path> <env mods> }

      Allows execution of the specified executable as the current user, with a
      monitor running as the current user.  The executed process inherits
      privileges from the specified privilege file.  No argument verification
      is performed.

    * monitored_exec_check_args { <exec path> "<arg1>" /a/b/c* ... "<argN>" @
	   <priv path> <env mods> }

		Like monitored_exec, but limit the execution to include the specified
		arguments.  All non-path arguments must be quoted or wildcards.  The
		executed process inherits privileges from the specified privilege file.
		All arguments to the executed process must match the allowed arguments.
		A wildcard (*) is allowed for an argument value, which will match any
		value and number of arguments.  Path arguments (non-quoted) may include
		wildcards, such as /dev/sd* .

    * monitored_user_exec { <exec path> @ <priv path> @ <mon user> <env mods> }

      Like monitored_exec except the monitor runs as the specified monitor
      user.

    * monitored_user_exec_check_args { <exec path> "<arg1>" /a/b/c* ... "<argN>" @
	   <priv path> @ <mon user> <env mods> }

      Like monitored_exec_check_args, but the monitor runs as the specified
      monitor user.

    * user_exec { <exec path> @ <exec user> <env mods> }

      Allow the execution of the specified executable as the specified user.
      No monitor will be supplied to the spawned process.

    * user_exec_check_args { <exec path> "<arg1>" /a/b/c* ... "<argN>" @
	   <exec user> <env mods> }

		Allow the execution of the specified executable as the specified user
		with arguments matching those listed.  See monitored_exec_check_args for
		details of matching arguments.

3.2 Out-Of-Process Provider Runner:

  Providers should now be executed through a "out-of-process" provider runner,
which will communicate with the CIMOM using a binary (TODO: explain?) protocol.
This means that the providers can now run as any user and will no longer have
any direct access to memory or files controlled by the CIMOM.

3.2.1 Provider Registration:

  Out-of-process providers must currently be registered with the CIMOM.  The
provider registration tells the CIMOM which provider runner to use, what
arguments to pass to it, the type of provider (lifecycle, indication, etc), and
specifies a user context to use.


4.0 Startup Process:

  The CIMOM startup process differs somewhat from earlier versions of
OpenWBEM.  Since the CIMOM itself now runs as an unprivileged user, we need
some additional components.  The running processes now look like this:

  * CIMOM Restarter process - Watches the CIMOM and restarts it when requested
    or when a problem is detected.  This must run as root.

  * Main Monitor - Must run as root.

  * CIMOM - Handles incoming connections, access to the repository, logging,
    etc.

  * Out-of-process provider runners - These run as the CIMOM user.  One process
    exists per provider.  To access anything not available as the CIMOM user,
    the monitor is required.

  * Provider-specific monitors - If the provider registration requested a
    monitor, a monitor will be spawned along with the process to serve its
    privilege needs.  Implementation detail: The oop providers will be spawned
    with an open file descriptor and an environment variable specifying which
    descriptor to use.

