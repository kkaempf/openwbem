PRIVILEGE CONFIGURATION FILE SYNTAX
-----------------------------------

Note: Arbitrary whitespace may be included between tokens.  Literal text is
shown between single quotes.

A privilege configuration file is a sequence of configuration statements in
arbitrary order.

These are the kinds of configuration statements allowed:

- 'open_r' '{' <path_pattern>* '}'
  The client is allowed to open for reading any file matching any of the
  indicated path patterns.

- 'open_w' '{' <path_pattern>* '}'
  The client is allowed to open for writing any file matching any of the
  indicated path patterns.

- 'open_rw' '{' <path_pattern>* '}'
  The client is allowed to open for reading or writing any file matching
  any of the indicated path patterns.

- 'open_a' '{' <path_pattern>* '}'
  The client is allowed to open for append-only writes any file matching
  any of the indicated path patterns

- 'read_dir' '{' <dir_spec>* '}'
  The client is allowed to read the contents of any of the listed directories.

- 'read_link' '{' <path_pattern> '}'
  The client is allowed to dereference the specified symbolic link, using
  PrivilegeManager::readLink().

- 'rename_from' '{' <path_pattern>* '}'
  The client is allowed to rename any file matching any of the indicated
  path patterns.  (The new path must still be allowed by a 'rename_to' or
  'rename_from_to' config statement.)

- 'rename_to' '{' <path_pattern>* '}'
  The client is allowed to rename files to any path matching any of the
  indicated path patterns.  (The old path must still be allowed by a
  'rename_from' or 'rename_from_to' config statement.)

- 'rename_from_to' '{' <path_pattern>* '}'
   The client is allowed to rename any file matching any of the indicated
   path patterns, to a new path matching any of the indicated path patterns.

- 'unlink' '{' <path_pattern> '}'
   The client is allowed to delete (unlink) any file matching any of the
   indicated path patterns.

- 'monitored_exec_check_args' '{' <exec_path_pattern> <exec_arg_list> '@' 
    <privileges_file> '}'
  The client can run (using PrivilegeManager::monitoredSpawn()) any program
  matching <exec_path_pattern>, with args matching <exec_arg_list>.  This 
  program is run with its own attached monitor and privileges file 
  <config_dir>/<privileges_file>, where <config_dir> is the corresponding 
  directory path previously passed to PrivilegeManager::createMonitor().

- 'monitored_exec' '{' <exec_path_pattern> '@' <privileges_file> '}'
  The client can run (using PrivilegeManager::monitoredSpawn()) any program
  matching <exec_path_pattern>.  This program is run with its own
  attached monitor and privileges file <config_dir>/<privileges_file>, where
  <config_dir> is the corresponding directory path previously passed to
  PrivilegeManager::createMonitor(). Any command line arguments are valid, so do
  not grant this privilege if monitored_exec_check_args is sufficient.

- 'user_exec_check_args' '{' <exec_path_pattern> <exec_arg_list> '@' <user_name> '}'
  The client can run (using PrivilegeManager::userSpawn()) any program matching
  <exec_path_pattern>, with args matching <exec_arg_list>, as the indicated user. 

- 'user_exec' '{' <exec_path_pattern> '@' <user_name> '}'
  The client can run (using PrivilegeManager::userSpawn()) any program matching
  <exec_path_pattern>, as the indicated user. Any command line arguments are
  valid, so do not grant this privilege if user_exec_check_args is sufficient.

- 'unpriv_user' '{' <name> '}'
  The client runs as the user with the indicated name.

A path component is a nonempty sequence of characters, with the following
restrictions:
- no control characters, whitespace characters, nor '/' character;
- not equal to '.' or '..';
- no occurrence of the characters \, ?, or *, except when escaped as
  \\, \?, and \*.

A dir_path is an absolute path, ending in '/'.  Its components must satisfy
the restrictions given above for path components.

A path_pattern is one of these:
- A dir_path followed by a path component, matching that specific file path.
- A dir_path followed by an optional path component followed by '*', with the
  usual meaning as a glob.
- A dir_path followed by '**', matching any file in the subtree rooted at the
  dir_path.
Examples:
- /var/log/messages
- /var/log/messages*, which matches  /var/log/messages, /var/log/messages.1,
  /var/log/messagesend, etc.
- /var/log/*, which matches /var/log/messages, /var/log/cron,
  /var/log/rmppkgs.1, etc.
- /var/log/**, which matches /var/log/messages, /var/log/cups/access_log, etc.

A dir_spec is either
- a dir_path, or
- a dir_path followed by '**', meaning any directory in the subtree rooted
  at the dir_path.
Examples:
- /var/log/
- /var/log/**, which matches /var/log/, /var/log/cups/, /var/log/cups/tmp/,
  etc.

An exec_path_pattern is the same as a path_pattern, except that the '**'
subtree-matching form is not allowed.

A name has the same lexical restrictions as a path component.

A privileges_file has the same lexical restrictions as a path component.

A user_name can be a specific user name with the same lexical restrictions 
as a path component, or it can be '*', indicating that any user can execute
the command. 

A exec_arg_list is a list of path_patterns and names.
