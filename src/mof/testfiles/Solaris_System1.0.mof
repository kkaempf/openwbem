// ===================================================================
// Title:         Solaris System MOF specification 1.0
// Filename:      Solaris_System1.0.mof
// Version:       1.0
// Author:        Sun Microsystems, Inc.
// Date:          02/01/1999
// Description:
// ===================================================================

// ==================================================================
// Pragmas
// ==================================================================
#pragma Locale ("en-US")

// ==================================================================
// Solaris_Process
// ==================================================================

 [ Provider ("com.sun.wbem.solarisprovider.process.Solaris_Process"),Description ("A Solaris Process.")
  ]
class Solaris_Process : CIM_Process
{

  [ read,Description (
          "The user who owns the process "),
       MaxLen (256)
      ]  
 string ProcessOwner ;

[ read,Description (
          "The base name of the process executable(first 8 bytes) "),
       MaxLen (256)
      ]  
 string ProcessExecutable ;

[ read,Description (
          "The memory address of the process "),
       MaxLen (256)
      ]  
 string ProcessMemoryAddr ;


[ read,Description (
          "The processID of the parent process "),
       MaxLen (256)
      ]  
 string ParentHandle ;

[ read,Description (
          "The process group ID "),
       MaxLen (256)
      ]  
 string GroupHandle ;

[ read,Description (
          "The user priority of the process "),
       MaxLen (256)
      ]  
 string ProcessUserPriority ;


[ read,Description (
          "The percent CPU time used by the process "),
       MaxLen (256)
      ]  
 string PercentCPUTime ;

[ read,Description (
          "The ratio of the resident set size to physical memory "),
       MaxLen (256)
      ]  
 string PercentMemorySize ;
 
[ read,Description (
          "The size of the process virtual address space in KiloBytes "),
       Units ("KiloBytes")
      ]  
 uint64 ProcessVMSize ;
 
[ read,Description (
          "The resident set size of the process in KiloBytes "),
       Units ("KiloBytes")
      ]  
 uint64 ProcessResidentSetSize ;
 
 
[ read,Description (
          "The name of the controlling terminal of the process "),
       MaxLen (256)
      ]  
 string ProcessControllingTerminal ;
 
 [ read,Description (
          "The nice value of the process ..system scheduling priority"),
       MaxLen (256)
      ]  
 string SystemSchedulingPriority ;
 
[ read,Description (
          "The scheduling class of the process "),
       MaxLen (256)
      ]  
 string ProcessSchedulingClass ;
 
 [ read,Description (
          "The starting time or date of the process "),
       MaxLen (256)
      ]  
 string ProcessStartTime;
 
[ read,Description (
          "The cumulative execution time of the process,"
          "in the format [[dd-]hh:]mm:ss"),
        MaxLen (256)
      ]  
 string CumulativeExecutionTime;
 
 [ read,Description (
          "The execution state of the process as a string"
          " S --> SLEEPING,R -->RUNNABLE,Z -->ZOMBIE,T -->BLOCKED,O -->RUNNING on CPU"),
       MaxLen (256),
       Values {"O","S","R","Z","T"}
      ]  
 string ProcessStateString ;
 
 [ read,Description (
          "The number of the processor to which the process is bound"),
       MaxLen (256)
      ]  
 string BoundProcessorNumber ;
 
 
 [ read,Description (
          "The address of an event for which the process is sleeping"),
       MaxLen (256)
      ]  
 string ProcessWaitingAddr ;


[ read,Description (
          "The executing command with all its argument as a string"),
       MaxLen (256)
      ]  
 string ExecutingCommand ;
 
  
   [Description (
        "Time in user mode and kernel mode, in milliseconds."
        "If this information is not available, a value of 0 should be used."),
       Units("MilliSeconds")
      ]  
   uint64 UserKernelModeTime;


  //The methods

    [ Description ( 
             " Suspend the process (PR_REQUESTED stop).")]
  sint32 suspendProcess([IN] sint32 pid) ;
 
    [ Description ( 
              " Set the process running (inverse of pstop ).") ]
  sint32 resumeProcess([IN] sint32 pid) ;

 [ Description (
           "Start a new process." ) ]
  sint32 startNewProcByUid([IN] string command,[IN] string processArgs,[IN] string envArgs[],[IN] string username) ;

  [ Description (
           "Get the extended property passed  in."
           "Such properties include: PROCESS_STACK,PROCESS_FLAGS,PROCESS_CRED,PROCESS_ADDRMAP,PROCESS_LDD,"
           "PROCESS_SIG,PROCESS_FILES,PROCESS_CWD,PROCESS_TREE,PROCESS_RESOURCE_LIMITS,PROCESS_ENV" )  ]
  sint32 getExtendedProperty([IN] string extendedProperty,[IN] string processID,[OUT] string data[]) ;

};


// ==================================================================
// Solaris_OperatingSystem
// ==================================================================
 
 [Provider("com.sun.wbem.solarisprovider.operatingsystem.Solaris_OperatingSystem"),
  Description ("The Solaris Operating System.")
 ]
class Solaris_OperatingSystem:CIM_OperatingSystem
{
      [Description(
      "SetDateTime sets the current system date and time"
      "to the time passed in the Time parameter."
          "TRUE is returned on success, FALSE on failure.")
      ]
   boolean SetDateTime([IN] datetime Time);
};

// ==================================================================
// Solaris_InstalledOS
// ==================================================================
 
 [Provider("com.sun.wbem.solarisprovider.assoc.Solaris_InstalledOS"),
  Description ("An association linking a Solaris_OperatingSystem"
                " and the Solaris_ComputerSystem that it is installed on.")
 ]

class Solaris_InstalledOS:CIM_InstalledOS
{
};

// ==================================================================
// Solaris_RunningOS
// ==================================================================
 
 [Provider("com.sun.wbem.solarisprovider.assoc.Solaris_RunningOS"),
  Description ("An association linking the running Solaris_OperatingSystem"
                " and the Solaris_ComputerSystem that it is running on.")
 ]
class Solaris_RunningOS:CIM_RunningOS
{
};


// ==================================================================
// Solaris_OSProcess
// ==================================================================
 
 [Provider("com.sun.wbem.solarisprovider.assoc.Solaris_OSProcess"),
  Description ("An association linking  Solaris_Process"
                " and the Solaris_OperatingSystem that it is running .")
 ]
class Solaris_OSProcess:CIM_OSProcess
{
};


//======================================================================
// Title: Solaris_NFSExport
// Version: 1.0
// Date: 1/13/00
// Description: Solaris_NFSExport is inherited from CIM_Export
//=======================================================================

[Association,
Abstract,
Description ("Solaris_NFSExport inherited from CIM_Export") ] 
class Solaris_NFSExport : CIM_Export
{
	// Properties
	[Description ("Share description.") ]
	string Description;

	[Description ("Share options.") ]
	string ShareOptions;

	[Description (
		"If set to true: give maximum access to NFS v2 clients.\n"
		"If set to false (default): give minimum access to NFS v2 "
		"clients.") ]
	boolean AclOk = false;

	[Description (
		"The effective UID of unknown users. The default value is "
		"UID_NOBODY (60001).") ]
	sint32 AnonUid;

	[Description (
		"Index file to use when accessing a Web-NFS directory.") ]
	string IndexFile;

	[Description (
		"If set to true: prevents clients from mounting "
		"subdirectories of the exported directory.\n"
		"If set to false (default): allows clients to mount "
		"subdirectories.") ]
	boolean NoSub = false;

	[Description (
		"If set to true: don't allow allow setuid execution.\n"
		"If set to false (default): allow setuid execution.") ]
	boolean NoSuid = false;

	[Description (
		"If set to true: use exported directory as the location of "
		"the public file handle for Web-NFS.\n"
		"If set to false (default): exported directory is not the "
		"location of the public file handle.") ]
	boolean Public = false;

	[Description (
		"If set to true: grant read-only access to all clients.\n"
		"If set to false (default):do not grant read-only access "
		"to all clients.") ]
	boolean ReadOnly = false;
		
	[Description ("Array of clients granted read-only access.") ]
	string ROAccessList[];

	[Description (
		"Array of hosts from which root users can gain "
		"root access.") ]
	string RootAccessList[];

	[Description (
		"If set to true (default): grant read-write access to all "
		"clients.\n"
		"If set to false: do not grant read-write access to all clients.") ]
	boolean ReadWrite = true;

	[Description ("Array of clients granted read-write access.") ]
	string RWAccessList[];

	[Description (
		"Array of security modes to be used to NFS transactions. "
		"Available modes is listed in /etc/nfssec.conf.") ]
	string SecurityModes[];

	[Description (
		"Maximum lifetime of a request allowed by the NFS server "
		"(in seconds) when using Diffie-Hellman or Kerberos security.\n"
		"Default value is 30000 seconds (8.3 hours).") ]
	uint32 Window = 30000;

	// Methods
	[Description ("Method to obtain list of shared file systems.") ]
	sint32 showExports([IN]string host, [OUT]string shares[]);

	[Description (
		"Method to obtain the list of nfs security modes from "
		"the /etc/nfssec.conf file.") ]
	sint32 getNfsSecList([OUT]string secmodes[]);

    [Description (
		"Method to obtain the default nfs security mode from "
		"the /etc/nfssec.conf file.") ]
	sint32 getDefaultNfsSecMode([OUT]string secmode);

	[Description (
		"Method to check if a file exists and if it is a directory.") ]
	sint32 getFile([IN]string fileName, [OUT]string remoteFileParent,
				   [OUT]string remoteFileName, [OUT]boolean isDirectory);

	[Description ("Method to obtain the contents of a directory.") ]
	sint32 getDirectoryList([IN]string directoryName, 
							[OUT]string remoteFileParent[], 
							[OUT]string remoteFileName[], 
							[OUT]boolean isDirectory[]);
};


//======================================================================
// Title: Solaris_NFSExportNow
// Version: 1.0
// Date: 1/13/00
// Description: Solaris_NFSExportNow is inherited from Solaris_NFSExport
//=======================================================================

[Provider("com.sun.wbem.solarisprovider.fsmgr.share.Solaris_NFSExportNow"),
Description ("Solaris_NFSExportNow inherited from Solaris_NFSExport") ] 
class Solaris_NFSExportNow : Solaris_NFSExport
{
};


//======================================================================
// Title: Solaris_NFSExportAtBoot
// Version: 1.0
// Date: 1/13/00
// Description: Solaris_NFSExportAtBoot is inherited from Solaris_NFSExport
//=======================================================================

[Provider("com.sun.wbem.solarisprovider.fsmgr.share.Solaris_NFSExportAtBoot"),
Description ("Solaris_NFSExportAtBoot inherited from Solaris_NFSExport") ] 
class Solaris_NFSExportAtBoot : Solaris_NFSExport
{
};


//=======================================================================
// Title: Solaris_Directory
// Version: 1.0
// Date: 1/13/00
// Description: Solaris_Directory is inherited from CIM_Directory
//=======================================================================

[Provider("com.sun.wbem.solarisprovider.fsmgr.fstype.Solaris_Directory"),
Description ("Solaris_Directory is inherited from CIM_Directory.") ] 
class Solaris_Directory : CIM_Directory
{
};

//==========================================================================
// Title: Solaris_LocalFileSystem
// Version: 1.0
// Date: 1/13/00
// Description: Solaris_LocalFileSystem is inherited from CIM_LocalFileSystem
//===========================================================================

[Abstract,
Description (
	"A class derived from LocalFileSystem that represents the "
	"file store on a ComputerSystem's locally controlled media.") ]
class Solaris_LocalFileSystem : CIM_LocalFileSystem
{
	[Description (
		"Indicates the total amount of used space on the File System "
		"in bytes. Note that this is not the FileSystemSize minus "
		"AvailableSpace due to the space reserved only for superuser."),
	Units("Bytes") ]
	uint64 UsedSpace;
};


//==========================================================================
// Title: Solaris_UFS
// Version: 1.0
// Date: 1/13/00
// Description: Solaris_UFS is inherited from Solaris_LocalFileSystem.
//===========================================================================

[Provider("com.sun.wbem.solarisprovider.fsmgr.fstype.Solaris_UFS"),
Description (
	"A class derived from Solaris_LocalFileSystem that represents "
	"the UNIX filesystem.") ]
class Solaris_UFS : Solaris_LocalFileSystem
{
	[Description (
		"If set to true: the file system  will ignore access time "
		"updates on files.\n"
		"If set to false (default): the file system will record "
		"access times.") ]
	boolean NoAtime = false;

	[Description (
		"If set to true (default): the file system will defer writing "
		"access times to disk.\n"
		"If set to false: writing of access times is not deferred.") ]
	boolean DfraTime = true;

	[Description (
		"If set to true: direct i/o is used.\n"
		"If set to false (default): direct i/o is not used.") ]
	boolean ForceDirectIO = false;

	[Description (
		"If set to true: the filesystem is mounted 'globally' on all "
		"nodes of a cluster.\n"
		"If set to false (false): the filesystem is not mounted on "
		"all nodes of a cluster.\n"
		"Ignored for non-clustered systems.") ]
	boolean Global = false;

	[Description (
		"If set to true (default): allow keyboard interrupts.\n"
		"If set to false: don't allow keyboard interrupts.") ]
	boolean Intr = true;

	[Description (
		"If set to true (default): handles large files.\n"
		"If set to false: will not handle large files. If large "
		"files exist, the mount will fail.") ]
	boolean LargeFiles = true;

	[Description (
		"If set to true: log all transactions.\n"
		"If set to false (default): do not log transactions.") ]
	boolean Logging = false;

	[Description (
		"If set to true: the mount entry is added to /etc/mnttab.\n"
		"If set to false (default): the mount is not recorded in "
		"/etc/mnttab.") ]	
	boolean NoMnttabEntry = false;

	[Description (
		"Action to take when a filesystem error occurs.\n"
		"Default action is panic."),
	MaxLen(16),
	Values {"panic, lock, umount"} ]
	string OnErrorAction = "panic";

	[Description (
		"If set to true: enable quota checking.\n"
		"If set to false (default): disable quota checking.") ]
	boolean Quota = false;

	[Description (
		"If set to true: remount a read-only file system with "
		"read-write options.\n"
		"If set to false (default): the filsystem is mounted with "
		"the specified mount options.") ]
	boolean	Remount = false;

	[Description (
		"If set to true: mount the filesystem read-write with quotas "
		"enabled.\n"
		"If set to false (default): the filsystem is mounted with "
		"the specified mount options.") ]
	boolean ReadWriteQuota = false;

	[Description (
		"If set to true: don't allow allow setuid execution.\n"
		"If set to false (default): allow setuid execution.") ]
	boolean NoSuid = false;

	[Description (
		"If set to true: the filesystem is mounted over an existing "
		"mounted filesystem.\n"
		"If set to false (default): the filesystem is not mounted over "
		"an existing mounted filesystem.") ]
	boolean Overlay = false;
};

//==========================================================================
// Title: Solaris_HSFS
// Version: 1.0
// Date: 1/13/00
// Description: Solaris_HSFS is inherited from Solaris_LocalFileSystem.
//===========================================================================

[Provider("com.sun.wbem.solarisprovider.fsmgr.fstype.Solaris_HSFS"),
Description (
	"A class derived from Solaris_LocalFileSystem that represents "
	"the filesystem on a CD-ROM.") ]
class Solaris_HSFS : Solaris_LocalFileSystem
{
	[Description (
		"If set to true: the filesystem is mounted 'globally' on all "
		"nodes of a cluster.\n"
		"If set to false (false): the filesystem is not mounted on "
		"all nodes of a cluster.\n"
		"Ignored for non-clustered systems.") ]
	boolean Global = false;

	[Description (
		"If set to true: ignore Rock Ridge extensions and interpret "
		"as a High Sierra file system.\n"
		"If set to false (default): use Rock Ridge extensions.") ]
	boolean NoRockRidge = false;

	[Description (
		"If set to true: suppress processing trailing dot at the end "
		"of a file name\n."
		"If set to false (default): always process trailing dots.") ]
	boolean NoTrailDot = false;

	[Description (
		"If set to true: don't map uppercase names to lower case.\n"
		"If set to false (default): map uppercase names to lowercase.") ]
	boolean NoMapLcase = false;

	[Description (
		"If set to true: the mount entry is added to /etc/mnttab.\n"
		"If set to false (default): the mount is not recorded in "
		"/etc/mnttab.") ]	
	boolean NoMnttabEntry = false;

	[Description (
		"If set to true: don't allow allow setuid execution.\n"
		"If set to false (default): allow setuid execution.") ]
	boolean NoSuid = false;

	[Description (
		"If set to true: the filesystem is mounted over an existing "
		"mounted filesystem.\n"
		"If set to false (default): the filesystem is not mounted over "
		"an existing mounted filesystem.") ]
	boolean Overlay = false;

};

//=============================================================================
// Title: Solaris_NFS
// Version: 1.0
// Date: 1/13/00
// Description: Solaris_NFS is inherited from CIM_NFS
//=============================================================================

[Provider("com.sun.wbem.solarisprovider.fsmgr.fstype.Solaris_NFS"),
Description ("The options used to mount a Solaris NFS file system.") ]
class Solaris_NFS : CIM_NFS
{
	[Description (
		"If set to true: the filesystem is mounted 'globally' on all "
		"nodes of a cluster.\n"
		"If set to false (default): the filesystem is not mounted on "
		"all nodes of a cluster.\n"
		"Ignored for non-clustered systems.") ]
	boolean Global = false;

	[Description (
		"If set to true: use BSD style group id semantics.\n"
		"If set to false (default): use System V style group id semantics.") ]
	boolean GrpId = false;

	[Description (
		"If set to true: the mount entry is not added to /etc/mnttab.\n"
		"If set to false (default): the mount is recorded in "
		"/etc/mnttab.") ]	
	boolean NoMnttabEntry = false;

	[Description (
		"If set to true: don't allow allow setuid execution.\n"
		"If set to false (default): allow setuid execution.") ]
	boolean NoSuid = false;

	[Description (
		"If set to true: use POSIX.1 semantics for filesystem.\n"
		"If set to false (default): do not use POSIX.1 semantics.") ]
	boolean Posix = false;

	[Description (
		"A string specifying the transport protocol used for the "
		"NFS mount. It is the value of the network_id field from "
		"/etc/netconfig.") ]
	string Proto; 

	[Description (
		"If set to true: use the public file handle.\n"
		"If set to false (default): do not use the public file handle.") ]
	boolean Public = false;

	[Description (
		"If set to true: enable quota checking.\n"
		"If set to false (default): disable quota checking.") ]
	boolean Quota = false;

	[Description (
		"If set to true: remount a read-only file system with "
		"read-write options.\n"
		"If set to false (default): the filsystem is mounted with "
		"the specified mount options.") ]
	boolean	Remount = false;

	[Description (
		"A string describing the security mode for NFS transactions. "
		"Available modes is listed in /etc/nfssec.conf.") ]
	string SecurityMode;

	[Description ("Version number of NFS protocol to use."),
	Values {"2", "3", "highest"} ]
	string Version = "highest";

	[Description (
		"If set to true: the filesystem is mounted over an existing "
		"mounted filesystem.\n"
		"If set to false (default): the filesystem is not mounted over "
		"an existing mounted filesystem.") ]
	boolean Overlay = false;

	[Description (
		"Indicates the total amount of used space on the "
		"File System in bytes. Note that this is not the FileSystemSize "
		"minus AvailableSpace due to the space reserved only for superuser."),
	Units("Bytes") ]
	uint64 UsedSpace;
};


//=============================================================================
// Title: Solaris_AttachLocalFileSystem
// Version: 1.0
// Date: 1/13/00
// Description: Solaris_AttachLocalFileSystem is inherited from CIM_Dependency
//=============================================================================

[Association,
Abstract,
Description (
	"An association between a directory that can be attached (or mounted "
	"in Solaris parlance) and the attached/mounted filesystem.") ]
class Solaris_AttachLocalFileSystem : CIM_Dependency
{ 
	[Override ("Antecedent"),
	Description (
		"This is a directory on the disk-based media that is mounted. "
		"It is also referred to as the resource to mount.") ]
	Solaris_Directory REF Antecedent;

	[Override ("Dependent"),
	Description (
		"The mounted file system, typically, UFS, HSFS or PCFS. "
		"This is also referred to as the mount point.") ]
	Solaris_LocalFileSystem REF Dependent;

	[Description ("File system type.") ]
	string FsType;

	[Description ("A string of mount options.") ]
	string MountOptions;

	// Methods
	[Description (
		"Method to check if a file exists and if it is a directory.") ]
	sint32 getFile([IN]string fileName, [OUT]string remoteFileParent,
				   [OUT]string remoteFileName, [OUT]boolean isDirectory);

	[Description ("Method to obtain the contents of a directory.") ]
	sint32 getDirectoryList([IN]string directoryName, 
							[OUT]string remoteFileParent[], 
							[OUT]string remoteFileName[], 
							[OUT]boolean isDirectory[]);

	[Description ("Method to create a directory.") ]
	sint32 makeDirectory([IN]string directoryName, 
						 [OUT]string remoteFileParent,
						 [OUT]string remoteFileName, 
						 [OUT]boolean isDirectory);

};


//=============================================================================
// Title: Solaris_AttachLocalFileSystemNow
// Version: 1.0
// Date: 1/13/00
// Description: Solaris_AttachLocalFileSystemNow is inherited from 
// Solaris_AttachLocalFileSystem
//=============================================================================

[Association,
Abstract,
Description (
	"A local file system 'attachment' that occurs immediately (and "
	"not after a reboot.") ]
class Solaris_AttachLocalFileSystemNow : Solaris_AttachLocalFileSystem
{
};


//=============================================================================
// Title: Solaris_AttachLocalFileSystemAtBoot
// Version: 1.0
// Date: 1/13/00
// Description: Solaris_AttachLocalFileSystemAtBoot is inherited from 
// Solaris_AttachLocalFileSystem
//=============================================================================

[Association,
Abstract,
Description (
	"A local file system 'attachment' that only occurs at boot.") ]
class Solaris_AttachLocalFileSystemAtBoot : Solaris_AttachLocalFileSystem
{
	[Description (
		"If set to true: the filesystem is mounted at boot.\n"
		"If set to false (default): the resource is not mounted at "
		"boot.") ]
	boolean MountAtBoot = false;
};


//=============================================================================
// Title: Solaris_AttachUFSNow
// Version: 1.0
// Date: 1/13/00
// Description: Solaris_AttachUFSNow is inherited from 
// Solaris_AttachLocalFileSystemNow
//=============================================================================

[Association,
Provider("com.sun.wbem.solarisprovider.fsmgr.mount.Solaris_AttachUFSNow"),
Description (
	"An association between a disk filesystem and the local "
	"UFS mounted file system.") ]
class Solaris_AttachUFSNow : Solaris_AttachLocalFileSystemNow
{
};


//=============================================================================
// Title: Solaris_AttachUFSAtBoot
// Version: 1.0
// Date: 1/13/00
// Description: Solaris_AttachUFSAtBoot is inherited from 
// Solaris_AttachLocalFileSystemAtBoot
//=============================================================================

[Association,
Provider("com.sun.wbem.solarisprovider.fsmgr.mount.Solaris_AttachUFSAtBoot"),
Description (
	"An association between a disk filesystem and the local "
	"UFS mounted file system.") ]
class Solaris_AttachUFSAtBoot : Solaris_AttachLocalFileSystemAtBoot
{
	[Description ("Raw device to fsck.") ]
	string FsckDevice;

	[Description ("Should the file system be checked at boot?") ]
	string FsckPass;
};


//=============================================================================
// Title: Solaris_AttachHSFSNow
// Version: 1.0
// Date: 1/13/00
// Description: Solaris_AttachHSFSNow is inherited from 
// Solaris_AttachLocalFileSystemNow
//=============================================================================

[Association,
Provider("com.sun.wbem.solarisprovider.fsmgr.mount.Solaris_AttachHSFSNow"),
Description (
	"An association between a CD-ROM filesystem and the local "
	"HSFS mounted file system.") ]
class Solaris_AttachHSFSNow : Solaris_AttachLocalFileSystemNow
{
};


//=============================================================================
// Title: Solaris_AttachHSFSAtBoot
// Version: 1.0
// Date: 1/13/00
// Description: Solaris_AttachHSFSAtBoot is inherited from 
// Solaris_AttachLocalFileSystemAtBoot
//=============================================================================

[Association,
Provider("com.sun.wbem.solarisprovider.fsmgr.mount.Solaris_AttachHSFSAtBoot"),
Description (
	"An association between a CD-ROM filesystem and the local "
	"HSFS mounted file system.") ]
class Solaris_AttachHSFSAtBoot : Solaris_AttachLocalFileSystemAtBoot
{
};


//=============================================================================
// Title: Solaris_NFSMount
// Version: 1.0
// Date: 1/13/00
// Description: Solaris_NFSMount is inherited from CIM_Mount
//=============================================================================

[Association,
Abstract,
Description (
	"An association between a remote directory that can be mounted "
	"and the NFS mounted file system.") ]
class Solaris_NFSMount : CIM_Mount
{
	[Override ("Antecedent"),
	 Description (
		"The remote directory that is mounted. This directory must have "
		"been previously exported.\n"
		"This is also referred to as the resource to mount.") ]
	Solaris_Directory REF Antecedent;

	[Override ("Dependent"),
	 Description ("The file system mounted via NFS. "
		"It is also referred to as the mount point.") ]
	Solaris_NFS REF Dependent;

	[Description (
		"Array of replicated resources to be used for failover. Each "
		"resource must be of the form host:/pathname, NFS URL or a "
		"list of hosts, if the exported directory name is the same.") ]
	string ReplicatedResources[];

	[Description ("A string of mount options.") ]
	string MountOptions;

	// Methods
	[Description ("Method to obtain list of shared file systems.") ]
	sint32 showExports([IN]string host, [OUT]string shares[]);

	[Description (
		"Method to check if a file exists and if it is a directory.") ]
	sint32 getFile([IN]string fileName, [OUT]string remoteFileParent,
				   [OUT]string remoteFileName, [OUT]boolean isDirectory);

	[Description ("Method to obtain the contents of a directory.") ]
	sint32 getDirectoryList([IN]string directoryName, 
							[OUT]string remoteFileParent[], 
							[OUT]string remoteFileName[], 
							[OUT]boolean isDirectory[]);

	[Description ("Method to create a directory.") ]
	sint32 makeDirectory([IN]string directoryName, 
						 [OUT]string remoteFileParent,
						 [OUT]string remoteFileName, 
						 [OUT]boolean isDirectory);

	[Description (
		"Method to obtain the list of network IDs from"
		"the /etc/netconfig file.") ]
	sint32 getNetCfgList([OUT]string ids[]);

	[Description (
		"Method to obtain the list of nfs security modes from "
		"the /etc/nfssec.conf file.") ]
	sint32 getNfsSecList([OUT]string secmodes[]);

    [Description (
		"Method to obtain the the default nfs security mode from "
		"the /etc/nfssec.conf file.") ]
	sint32 getDefaultNfsSecMode([OUT]string secmode);
};


//=============================================================================
// Title: Solaris_NFSMountNow
// Version: 1.0
// Date: 1/13/00
// Description: Solaris_NFSMountNow is inherited from Solartis_NFSMount
//=============================================================================

[Association,
Provider("com.sun.wbem.solarisprovider.fsmgr.mount.Solaris_NFSMountNow"),
Description (
	"An association between a remote directory that can be mounted "
	"and the NFS mounted file system.") ]
class Solaris_NFSMountNow : Solaris_NFSMount
{
};
	

//=============================================================================
// Title: Solaris_NFSMountAtBoot
// Version: 1.0
// Date: 1/13/00
// Description: Solaris_NFSMountAtBoot is inherited from Solartis_NFSMount
//=============================================================================

[Association,
Provider("com.sun.wbem.solarisprovider.fsmgr.mount.Solaris_NFSMountAtBoot"),
Description (
	"An association between a remote directory that can be mounted "
	"and the NFS mounted file system.") ]
class Solaris_NFSMountAtBoot : Solaris_NFSMount
{
	[Description (
		"If set to true: the filesystem is mounted at boot.\n"
		"If set to false (default): the resource is not mounted at "
		"boot.") ]
	boolean MountAtBoot = false;

};

// ==================================================================
// Title: Solaris_ScheduledJob
// ==================================================================

[ Abstract,
 Description (
              "A job which has been scheduled for future execution"
              "on a computer system.")
]
class Solaris_ScheduledJob:CIM_Job
{
    [Override ("Owner"), read, key,
     Description ("The user on whose behalf the job was submitted."
                      "The job will be run under the identity of the owner"), 
     MaxLen(64)
    ]
    string Owner;

    [read, key,
     Description (
                 "Identifies the scheduling application to which this"
                 "job belongs"),
     MaxLen (256) 
    ]
    string OwningJobSchedulerName;

    [read, key,
     Description (
                 "Identifies the type of the job to a particular"
                 "scheduler.  Required if the scheduling application"
                 "handles multiple types of job, such as cron"),
     MaxLen (256) 
    ]
    string JobType;

    [Override ("Name"), 
     read, key, 
     Description (
                 "A descriptive name for the scheduled job"
                 "If no name exists, one will be generated"
                 "which is unique for a given owner."),
     MaxLen (256) 
    ]
    string Name;

};

// ==================================================================
// Solaris_ScheduledJob_Cron
// ==================================================================

[Provider ("com.sun.wbem.solarisprovider.scheduledjob.Solaris_ScheduledJob_Cron"),
 Description (
              "A job which has been scheduled for periodic execution"
              "by the cron daemon")
]
class Solaris_ScheduledJob_Cron : Solaris_ScheduledJob
{

    [read, write,
     Description (
                 "Indicates the command line to execute"
                 "for this job."),
     MaxLen (1024)
    ]
    string Command;

    [read, write, 
     Description (
                 "An array of integers indicating the hours of the day"
                 "when the job is to be executed"),
     MinValue (0), 
     MaxValue(23)
    ]
    uint16 Hours[];

    [read, write, 
     Description (
                 "An array of integers indicating the minutes of the"
                 "day when the job is to be executed"),
     MinValue (0), 
     MaxValue(59)
    ]
    uint16 Minutes[];

    [read, write, 
     Description (
                 "An array of integers indicating the days of the"
                 "week when the job is to be executed. The week"
                 "starts with Sunday, which is represented by 0."),
     MinValue (0), 
     MaxValue(6)
    ]
    uint16 DaysOfTheWeek[];

    [read, write, 
     Description (
                 "An array of integers indicating the days of the"
                 "month when the job is to be executed."),
     MinValue (1), 
     MaxValue(31)
    ]
    uint16 DaysOfTheMonth[];

    [read, write, 
     Description (
                 "An array of integers indicating the months in which"
                 "the job is to be executed."),
     MinValue (1), 
     MaxValue(12)
    ]
    uint16 Months[];

};

// ==================================================================
// Solaris_JobScheduler
// ==================================================================

[ Abstract,
 Description (
              "Configuration information for the cron daemon")
]
class Solaris_JobScheduler : CIM_JobDestination
{
    [read, 
     Description (
                 "Identifies the types of jobs this job scheduler"
                 "can process"),
     MaxLen (256) 
    ]
    string JobTypes[];

};

// ==================================================================
// Solaris_JobScheduler_Cron
// ==================================================================

[Provider ("com.sun.wbem.solarisprovider.scheduledjob.Solaris_JobScheduler_Cron"),
 Description (
              "The cron scheduler executes regularly scheduled,"
            "periodic commands")
]
class Solaris_JobScheduler_Cron : Solaris_JobScheduler
{

    [read, write, 
     Description (
                 "A boolean value which indicates whether cron is"
                 "keeping a log of all actions taken")
    ]
    boolean LoggingOn;

    [read, write, 
     Description (
                 "A string which indicates the value the PATH"
                 "variable will be set to when non-root user"
                 "jobs are executed"),
     MaxLen (1024) 
    ]
    string UserPath;

    [read, write, 
     Description (
                 "A string which indicates the value the PATH"
                 "variable will be set to when root user"
                 "jobs are executed"),
     MaxLen (1024) 
    ]
    string RootPath;

    [ Description ( 
             "Determines the scheduled job authorization level for"
	         "an authenticated user")]
	sint32 getScheduledJobsAuthorization() ;
 
};

// ==================================================================
// Solaris_OwningJobScheduler
// ==================================================================

[Association,
 Provider ("com.sun.wbem.solarisprovider.scheduledjob.Solaris_OwningJobScheduler"),
 Description (
             "Association which indicates which job scheduler owns"
             "a scheduled job")
]
class Solaris_OwningJobScheduler : CIM_JobDestinationJobs
{
    [Override ("Antecedent"), 
     Description ("The job scheduler which owns the scheduled job"), 
     Min(1), Max(1)
    ]
    Solaris_JobScheduler REF Antecedent;

    [Override ("Dependent"), 
     Description ("The scheduled job"), 
     Weak
    ]
    Solaris_ScheduledJob REF Dependent;
};

// ==================================================================
// Solaris_HostedJobScheduler
// ==================================================================

[Association,
 Provider ("com.sun.wbem.solarisprovider.scheduledjob.Solaris_HostedJobScheduler"),
 Description (
              "An association between a JobScheduler and a System on "
              "which it resides. The cardinality of this association is "
              "1-to-many.  A System may host many JobSchedulers. Job"
              "Schedulers are weak with respect to their hosting System. "
              "Heuristic: A JobScheduler is hosted on the System where the "
              "LogicalDevices, SoftwareFeatures or Services that implement/"
              "provide the JobScheduler are located.")
]
class Solaris_HostedJobScheduler : CIM_HostedJobDestination
{
    [Override ("Dependent"), 
     Description ("The job scheduler"), 
     Weak
    ]
    Solaris_JobScheduler REF Dependent;
};

// ==================================================================
// Title: Solaris_SystemDevice
// Version: 1.0
// Date: 2/9/00
// Description: Solaris_SystemDevice is an association between all
// logical devices
//     and the solaris computer system.
// ==================================================================

[Association,
 Provider ("com.sun.wbem.solarisprovider.assoc.Solaris_SystemDevice"),
 Description ("An association between a LogicalDevice and a System ")
]
class Solaris_SystemDevice : CIM_SystemDevice
{
};
