// ===================================================================
// Title: 	  System MOF specification 2.2
// Filename:  CIM_System22.mof
// Author:    DMTF System and Devices Working Group
// Description: The object classes below are listed in an order that
//              avoids forward references. Required objects, defined 
//		    by other working groups, are omitted. 
// Date:  04/14/1998 - Version 2.0
//        06/16/1998 - V2.0 Errata
//		- CR233, Format for specifying Propagated keys uses
//                period, not colon and CIM_ missing from class name
//			(CIM_OperatingSystemSoftwareFeature)
//	    09/29/1998 - Version 2.1
//		- CR251, Remove DMI mapping reference from OperatingSystem.
//			NumberOfUsers and move to LocalDateTime
//		- CR268, Change cardinality of the Antecedent reference
//			of the ParticipatingCS association (to Min(1))
//		- CR273, Remove repetition of the Values array from the
//			descriptions of several properties
//		- CR276b, Add to the enumeration for UnitaryComputerSystem.
//			PowerState
//		- CR290, Add ModelCorrespondence to "linked" properties
//		- CR293, Correct xxxMemory properties of OperatingSystem
//			and add MaxProcessMemorySize property
//	    06/08/1999 - Version 2.2
//		- CR354, Update the Values array for "power save" for
//			UnitaryComputerSystem (both the property and method)
//		- CR355a, Update the method descriptions for SetPowerState,
//                 AddNode, EvictNode, Reboot and Shutdown indicating 
//                 that Values-ValueMap qualifiers can be defined for 
//                 return codes
//          - CR356a, Put keys on the references of Export
//		- CR358a, Add ClusterSize property to FileSystem
//		- CR363, Update OperatingSystem.OSType enumeration and the
//			 description for OperatingSystem.OtherTypeDescription
//		- CR364, Create TotalVisibleMemorySize property on 
//			 OperatingSystem
//		- CR368, Update ComponentCS' Description and add new 
//			 associations, SystemPartition and SystemBIOS
//		- CR369, Update FileSystem - CodeSet's Description and 
//			 enum, and create a new property, FileSystemType
//		- CR370a, Update BIOSFeature.Characteristics enumeration and
//			 add ListOfLanguages and CurrentLanguage properties
//			 to BIOSElement
//          - CR371, Add WakeUpType property to UnitaryComputerSystem
//		- CR374a, Update Process' Description
//		- CR383 and 409, Add OS/390, VSE and TPF to OS's OSType enum
//		- CR386, Add to the enums for Cluster.Types and 
//                 ParticipatingCS.RoleOfNode and update the latter's 
//			 Description
//		- CR388a, Create StorageLibrary object
//		- CR405, Add Counter and Gauge qualifiers
//		- CR407, Remove the word "automated" from StorageLibrary's
//			 Description / Update descriptions for AuditInProgress
//			 and MaxAuditTime
//		- CR408, Set ComputerSystem's cardinality in SystemPartition
//			 to Max(1)
//		- CR417a, Change cardinality of UnitaryComputerSystem in
//                 SystemBIOS (add Max(1)) and remove Min(1) from 
//			 ComputerSystem for RunningOS
// ===================================================================


// ===================================================================
// Pragmas
// ===================================================================
#pragma Locale ("en-US")


// ===================================================================
// ComponentCS
// ===================================================================
   [Association,
    Aggregation,
    Description (
       "A ComputerSystem can aggregate another ComputerSystem. "
       "This association can be used to model MPP Systems with "
       "workstation frontends, an I2O subsystem embedded in a Unitary"
       "ComputerSystem, or a System that splits functionality between "
       "two processors, potentially running different Operating"
       "Systems. For example, if a CISC Processor and its associated "
       "OperatingSystem, are used for user interface and file "
       "support, and a RISC Processor and its OS are used for complex "
       "mathematical operations, this could be modeled as two "
       "ComputerSystems where one aggregates the other. In some cases, "
       "this could be modeled as a Cluster. The difference is the "
       "focus of the relationship. ComponentCS represents that "
       "unique and distinct ComputerSystems are aggregated by a "
       "higher level CS object. However, each of the component CSs are "
       "still distinguishable entities and are only viewed as such. "
       "Alternately, with a Cluster, the ComputerSystems that "
       "participate in it are inconsequential, when viewed through the "
       "'Cluster System'.\n\n"
       "When instantiating or subclassing the ComponentCS "
       "relationship, care should be taken that the component "
       "ComputerSystem meets the definitional requirements of a "
       "ComputerSystem - ie, a functional whole that provides "
       "compute capabilities and aggregates System Devices, an "
       "OperatingSystem, etc.")
   ] 
class CIM_ComponentCS : CIM_SystemComponent
{
      [Override ("GroupComponent"),
       Aggregate,
       Description (
	  "The ComputerSystem that contains and/or aggregates other "
	  "Systems.")
      ]
   CIM_ComputerSystem REF GroupComponent;
      [Override ("PartComponent"), 
       Description ("The contained (Sub)ComputerSystem.")
      ]
   CIM_ComputerSystem REF PartComponent;
};

// ===================================================================
// UnitaryComputerSystem
// ===================================================================
   [Description (
       "A class derived from ComputerSystem that represents a Desktop, "
       "Mobile, NetPC, Server or other type of a single node Computer "
       "System.")
   ] 
class CIM_UnitaryComputerSystem : CIM_ComputerSystem
{
      [Description (
	  "This object contains the data needed to find either the "
	  "initial load device (its key) or the boot service to "
	  "request the operating system to start up. In addition, "
	  "the load parameters (ie, a pathname and parameters) "
	  "may also be specified.")
      ]
   string InitialLoadInfo[];
      [Description (
	  "This object contains the data identifying either the "
	  "initial load device (its key) or the boot service that "
	  "requested the last operating system load. In addition, "
	  "the load parameters (ie, a pathname and parameters) "
	  "may also be specified."),
	 MappingStrings {
	  "MIB.IETF|HOST-RESOURCES-MIB.hrSystemInitialLoadDevice",
	  "MIB.IETF|HOST-RESOURCES-MIB.hrSystemInitialLoadParameters"}
      ]
   string LastLoadInfo;
      [Description (
	  "If enabled (value = 4), the UnitaryComputerSystem can be "
	  "reset via hardware (e.g. the power and reset buttons). If "
 	  "disabled (value = 3), hardware reset is not allowed. In "
	  "addition to Enabled and Disabled, other Values for the "
	  "property are also defined - \"Not Implemented\" (5), "
	  "\"Other\" (1) and \"Unknown\" (2)."),
       ValueMap {"1", "2", "3", "4", "5"},
	 Values {"Other", "Unknown", "Disabled",
	       "Enabled", "Not Implemented"},
       MappingStrings {"MIF.DMTF|System Hardware Security|001.4"}
      ]
   uint16 ResetCapability;
      [Description (
	  "Boolean indicating that the ComputerSystem, with its "
	  "running OperatingSystem, supports power management. This "
	  "boolean does not indicate that power management features are "
	  "currently enabled, or if enabled, what features are "
	  "supported. Refer to the PowerManagementCapabilities array "
	  "for this information. If this boolean is false, the integer "
	  "value 1 for the string, \"Not Supported\", should be the "
	  "only entry in the PowerManagementCapabilities array.")
      ]
   boolean PowerManagementSupported;	
      [Description(
	  "Indicates the specific power-related capabilities of a "
	  "ComputerSystem and its associated running OperatingSystem. "
	  "The values, 0=\"Unknown\", 1=\"Not Supported\", and "
	  "2=\"Disabled\" are self-explanatory. "
	  "The value, 3=\"Enabled\" indicates that the power management "
	  "features are currently enabled but the exact feature set "
	  "is unknown or the information is unavailable. "
	  "\"Power Saving Modes Entered Automatically\" (4) describes "
	  "that a system can change its power state based on usage or "
	  "other criteria. \"Power State Settable\" (5) indicates that "
	  "the SetPowerState method is supported. \"Power Cycling "
        "Supported\" (6) indicates that the SetPowerState method "
	  "can be invoked with the PowerState input variable set to 5 ("
	  "\"Power Cycle\"). \"Timed Power On Supported\" (7) indicates "
	  "that the SetPowerState method can be invoked with the Power"
	  "State input variable set to 5 (\"Power Cycle\") and the Time "
	  "parameter set to a specific date and time, or interval, "
	  "for power-on."),
       Values {"Unknown", "Not Supported", "Disabled", 
	       "Enabled", "Power Saving Modes Entered Automatically",
	       "Power State Settable", "Power Cycling Supported",
	       "Timed Power On Supported"},
       MappingStrings {"MIF.DMTF|System Power Controls|001.2"}
      ]
   uint16 PowerManagementCapabilities[];
      [Description(
        "Indicates the current power state of the ComputerSystem and "
        "its associated OperatingSystem. Regarding the Power Save "
        "states, these are defined as follows: Value 4 (\"Power Save "
        "- Unknown\") indicates that the System is known to be in a "
        "power save mode, but its exact status in this mode is "
        "unknown; 2 (\"Power Save - Low Power Mode\") indicates that "
        "the System is in a power save state but still functioning, "
        "and may exhibit degraded performance; 3 (\"Power Save - "
        "Standby\") describes that the System is not functioning but "
        "could be brought to full power 'quickly'; value 7 (\"Power Save "
        "- Warning\") indicates that the ComputerSystem is in a warning "
        "state, though also in a power save mode; and, values 8 and 9 "
        "describe the ACPI \"Hibernate\" and \"Soft Off\" states."),
       Values {"Unknown", "Full Power", "Power Save - Low Power Mode", 
             "Power Save - Standby", "Power Save - Unknown", 
             "Power Cycle", "Power Off", "Power Save - Warning", 
             "Power Save - Hibernate", "Power Save - Soft Off"}
      ]
   uint16 PowerState;
      [Description (
        "The event that caused the System to power up. This "
        "information is available in SMBIOS, in the Type 1 structure, "
        "the Wake Up Type attribute."),
       Values {"Reserved", "Other", "Unknown", "APM Timer", 
             "Modem Ring", "LAN Remote", "Power Switch", "PCI PME#", 
             "A/C Power Restored"}
      ]
   uint16 WakeUpType;
      [Description(
        "SetPowerState defines the desired power state of a "
        "ComputerSystem and its running OperatingSystem, and when "
        "the system should be put into that state. The PowerState "
        "parameter is specified as one of the following integer "
        "values: 1=\"Full Power\", 2=\"Power Save - Low Power Mode\", "
        "3=\"Power Save - Standby\", 4=\"Power Save - Other\", "
        "5=\"Power Cycle\", 6=\"Power Off\", 7=\"Hibernate\" and "
        "8=\"Soft Off\". The Time parameter (for all state changes "
        "but 5, \"Power Cycle\") indicates when the power state "
        "should be set, either as a regular date-time value or as "
        "an interval value (where the interval begins when the "
        "method invocation is received). When the PowerState "
        "parameter is equal to 5, \"Power Cycle\", the Time "
        "parameter indicates when the system should power on "
        "again. Power off is immediate. SetPowerState should "
        "return 0 if successful, 1 if the specified State and "
        "Time request is not supported, and some other value if "
        "any other error occurred. In a subclass, the "
        "set of possible return codes could be specified, using a "
        "ValueMap qualifier on the method. The strings to which the "
        "ValueMap contents are 'translated' may also be specified in "
        "the subclass as a Values array qualifier.") 
      ]
   uint32 SetPowerState(
    [IN, ValueMap {"1", "2", "3", "4", "5", "6", "7", "8"},
         Values {"Full Power", "Power Save - Low Power Mode", 
          "Power Save - Standby", "Power Save - Other", 
          "Power Cycle", "Power Off", "Hibernate", "Soft Off"}] 
         uint16 PowerState, 
    [IN] datetime Time);
};

// ===================================================================
// SystemPartition
// ===================================================================
   [Association, Aggregation, Description (
       "A Partition is an instance of a UnitaryComputerSystem (with "
       "its own OperatingSystem and Devices dedicated to the "
       "Partition) that is supported by underlying hardware and "
       "software. A Partition is not a virtualization of a Computer"
       "System, but the segmentation of the System's compute "
       "capabilities. Partitions can run independent copies of "
       "possibly different OperatingSystems and have dedicated "
       "Devices. The 'real', underlying System (perhaps a Cluster "
       "or another UnitaryComputerSystem) aggregates its "
       "Partitions. These semantics are described by the System"
       "Partition association.")
   ]
class CIM_SystemPartition : CIM_ComponentCS
{
      [Override ("GroupComponent"), Aggregate, Max (1),
       Description (
        "The 'underlying' ComputerSystem that hosts a Partition.")
      ]
   CIM_ComputerSystem REF GroupComponent;
      [Override ("PartComponent"), 
       Description ("The System Partition.")
      ]
   CIM_UnitaryComputerSystem REF PartComponent;
};

// ===================================================================
// VirtualComputerSystem
// ===================================================================
   [Description (
       "A class derived from ComputerSystem that represents the "
       "ability to virtualize or emulate another ComputerSystem.")
   ] 
class CIM_VirtualComputerSystem : CIM_ComputerSystem
{
      [Description (
        "A string describing the type of System or hardware platform "
	  "that is virtualized. OperatingSystem information is obtained "
	  "via the RunningOS inherited from ComputerSystem.")
      ]
   string VirtualSystem;
};

// ===================================================================
// HostingCS
// ===================================================================
   [Association,
    Description (
       "A VirtualComputerSystem is hosted on another ComputerSystem. "
       "This association makes that relationship explicit.")
   ] 
class CIM_HostingCS : CIM_Dependency
{
      [Override ("Antecedent"), 
       Description ("The hosting ComputerSystem."),
       Min (1)
      ]
   CIM_ComputerSystem REF Antecedent;
      [Override ("Dependent"), 
       Description ("The VirtualComputerSystem.")
      ]
   CIM_VirtualComputerSystem REF Dependent;
};

// ===================================================================
// Cluster
// ===================================================================
   [Description (
       "A class derived from ComputerSystem that 'is made up of' two "
       "or more ComputerSystems which operate together as an atomic, "
       "functional whole to increase the performance, resources and/or "
       "RAS (Reliability, Availability and Serviceability) of the "
       "component ComputerSystems, related to some aspects of these "
       "ComputerSystems.")
   ] 
class CIM_Cluster : CIM_ComputerSystem
{
      [Description (
	  "Interconnect is a free form string that describes the "
	  "interconnection mechanism for the Cluster.")
      ]
   string Interconnect;	
      [Description (
	  "InterconnectAddress indicates the address of the Cluster "
	  "System, which is dependent on the interconnection scheme. "
	  "If no address is available or applicable, a null string "
	  "should be used.")
      ]
   string InterconnectAddress;
      [Description (
	  "The cluster types. This specifies whether the cluster is for "
	  "failover (value=2), performance (3), etc. The values which "
	  "can be specified are not mutually exclusive. Thus, Types is "
	  "an array."),
       Values {"Unknown", "Other", "Failover", 
	       "Performance", "Distributed OS", "Node Grouping",
             "SysPlex"}
      ]
   uint16 Types[];
      [Description (
	  "Indicates the maximum number of nodes that may participate in "
	  "the Cluster.  If unlimited, enter 0.")
      ]
   uint32 MaxNumberOfNodes;  
      [Description (
	  "Indicates the state of the Cluster.  The cluster can be "
	  "defined to be on-line (value=2), off-line (3), in a degraded "
	  "mode of operation (4) or unavailable (5)."),
       Values {"Unknown", "Other", "On-line", "Off-line", 
	       "Degraded", "Unavailable"}
      ]
   uint16 ClusterState;
};

// ===================================================================
// ParticipatingCS
// ===================================================================
   [Association, 
    Description (
	 "A Cluster is composed of two or more ComputerSystems, "
	 "operating together. A ComputerSystem may participate in "
	 "multiple Clusters. \n\n"
	 "When first establishing or bringing up a Cluster, only one "
	 "ComputerSystem may be defined as participating in it. "
	 "Therfore, the cardinality of the association for "
	 "the ComputerSystem reference is Min(1). ")
   ] 
class CIM_ParticipatingCS : CIM_Dependency 
{ 
      [Override ("Antecedent"), 
	 Description ( 
	  "The ComputerSystem which participates in the Cluster. "), 
	 Min (1) 
	] 
   CIM_ComputerSystem REF Antecedent; 
	[Override ("Dependent"), 
	 Description ("The Cluster.") 
	] 
   CIM_Cluster REF Dependent;
      [Description (
	  "StateOfNode indicates the condition of the participating "
	  "ComputerSystem in the Cluster.  For example, one value is "
	  "\"Joining\" (2)."),
       Values {"Unknown", "Other", "Joining", "Paused", 
	       "Available", "Unavailable", "Degraded"}
      ] 
   uint16 StateOfNode;
      [Description (
     "RoleOfNode indicates whether the Cluster nodes are "
     "peers (value = 2), connected in a master-slave/primary-"
     "secondary relationship (values = 3 for primary, 4 for "
     "secondary), available in a standby configuration (5) or "
     "of some other (1) or unknown (0) relationship. In a "
     "System/390 environment, the nodes are identified as \"Base "
        "Plex\" (value=6) or \"Enhanced Plex\" (value=7)."),
       Values {"Unknown", "Other", "Peer", "Primary", 
	       "Secondary", "Standby", "Base Plex", "Enhanced Plex"}
      ] 
   uint16 RoleOfNode;
};

// ===================================================================
// ClusteringService
// ===================================================================
   [Description (
       "ClusteringService represents the functionality provided by a "
       "Cluster. For example, failover functionality may be modeled as "
       "a Service of a failover Cluster.")
   ]
class CIM_ClusteringService : CIM_Service
{
      [Description ( 
	  "AddNode brings a new ComputerSystem into a Cluster. "
	  "The node to be added is specified as a parameter to the "
	  "method. The return value should be 0 if the Computer"
	  "System is successfully added, 1 if the method is not "
	  "supported and any other number if an error occurred. "
        "In a subclass, the set of possible return codes could be "
        "specified, using a ValueMap qualifier on the method. The "
        "strings to which the ValueMap contents are 'translated' "
        "may also be specified in the subclass as a Values array "
        "qualifier.")
      ]
   uint32 AddNode ([IN] CIM_ComputerSystem ref CS);
      [Description (
	  "EvictNode removes a ComputerSystem from a Cluster. "
	  "The node to be evicted is specified as a parameter to the "
	  "method. The return value should be 0 if the ComputerSystem "
	  "is successfully evicted, 1 if the method is not supported "
	  "and any other number if an error occurred. In a subclass, "
        "the set of possible return codes could be specified, using a "
        "ValueMap qualifier on the method. The strings to which the "
        "ValueMap contents are 'translated' may also be specified in "
        "the subclass as a Values array qualifier.") 
      ]
   uint32 EvictNode ([IN] CIM_ComputerSystem ref CS);
};

// ===================================================================
// ClusteringSAP
// ===================================================================
   [Description (
       "A representation of the access points of a ClusteringService.")
   ]
class CIM_ClusteringSAP : CIM_ServiceAccessPoint
{
};

// ===================================================================
// ClusterServiceAccessBySAP
// ===================================================================
   [Association,
    Description (
       "ClusterServiceAccessBySAP is the relationship between a "
       "ClusteringService and its access points.")
   ]
class CIM_ClusterServiceAccessBySAP : CIM_ServiceAccessBySAP
{
      [Override ("Antecedent"),
       Description ("The ClusteringService.")       
      ]
   CIM_ClusteringService REF Antecedent;
      [Override ("Dependent"),
       Description ("An access point for the ClusteringService.")
      ]
   CIM_ClusteringSAP REF Dependent;
};

// ===================================================================
// HostedClusterService
// ===================================================================
   [Association,
    Description (
       "HostedClusterService defines the hosting Cluster for a "
       "ClusteringService.  Since this relationship is subclassed "
       "from HostedService, it inherits the scoping/naming scheme "
       "defined for Service - where a Service is weak to its "
       "hosting System.  In this case, a ClusteringService must be "
       "weak to its hosting Cluster System.")
   ]
class CIM_HostedClusterService : CIM_HostedService
{
      [Override ("Antecedent"), 
	 Description ("The Cluster.")
      ]
   CIM_Cluster REF Antecedent;
      [Override ("Dependent"), 
	 Description (
	  "The ClusteringService that is hosted on the Cluster.")
      ]
   CIM_ClusteringService REF Dependent;
};

// ===================================================================
// HostedClusterSAP
// ===================================================================
   [Association,
    Description (
       "HostedClusterSAP defines the hosting ComputerSystem for a "
       "ClusteringSAP. Since this relationship is subclassed "
       "from HostedAccessPoint, it inherits the scoping/naming scheme "
       "defined for AccessPoint - where an AccessPoint is weak to "
       "its hosting System.  In this case, a ClusteringSAP must be "
       "weak to its hosting ComputerSystem.")
   ]
class CIM_HostedClusterSAP : CIM_HostedAccessPoint
{
      [Override ("Antecedent"), 
	 Description ("The ComputerSystem.")
      ]
   CIM_ComputerSystem REF Antecedent;
      [Override ("Dependent"),
	 Description (
	  "The ClusteringSAP that is hosted on the ComputerSystem.")
      ]
   CIM_ClusteringSAP REF Dependent;
};

// ===================================================================
// BootService
// ===================================================================
   [Description (
       "BootService represents the functionality provided by a Device, "
       "software or via a Network to load an Operating System on a "
       "UnitaryComputerSystem.")
   ]
class CIM_BootService : CIM_Service
{
};

// ===================================================================
// BootSAP
// ===================================================================
   [Description (
       "A representation of the access points of a BootService.")
   ]
class CIM_BootSAP : CIM_ServiceAccessPoint
{
};

// ===================================================================
// BootServiceAccessBySAP
// ===================================================================
   [Association,
    Description (
       "BootServiceAccessBySAP is the relationship between a Boot"
       "Service and its access points.")
   ]
class CIM_BootServiceAccessBySAP : CIM_ServiceAccessBySAP
{
      [Override ("Antecedent"), 
       Description ("The BootService.")
      ]
   CIM_BootService REF Antecedent;
      [Override ("Dependent"),
       Description ("An access point for the BootService.")
      ]
   CIM_BootSAP REF Dependent;
};

// ===================================================================
// HostedBootService
// ===================================================================
   [Association,
    Description (
       "HostedBootService defines the hosting System for a Boot"
	 "Service. Since this relationship is subclassed from Hosted"
	 "Service, it inherits the scoping/naming scheme defined for "
	 "Service - where a Service is weak to its hosting System.")
   ]
class CIM_HostedBootService : CIM_HostedService
{
      [Override ("Dependent"), 
       Description ("The BootService hosted on the System.")
      ]
   CIM_BootService REF Dependent;
};

// ===================================================================
// HostedBootSAP
// ===================================================================
   [Association,
    Description (
       "HostedBootSAP defines the hosting UnitaryComputerSystem for "
       "a BootSAP. Since this relationship is subclassed from "
	 "HostedAccessPoint, it inherits the scoping/naming scheme "
	 "defined for AccessPoint - where an AccessPoint is weak to its "
	 "hosting System.  In this case, a BootSAP must be "
	 "weak to its hosting UnitaryComputerSystem.")
   ]
class CIM_HostedBootSAP : CIM_HostedAccessPoint
{
      [Override ("Antecedent"), 
       Description ("The UnitaryComputerSystem.")
      ]
   CIM_UnitaryComputerSystem REF Antecedent;
      [Override ("Dependent"), 
       Description ("The BootSAP hosted on the UnitaryComputerSystem.")
      ]
   CIM_BootSAP REF Dependent;
};

// ===================================================================
// StorageLibrary
// ===================================================================
   [Description (
       "A StorageLibrary is a collection of ManagedSystemElements "
       "that operate together to provide cartridge library "
       "capabilities. This object serves as an aggregation point to "
       "group the following elements: MediaTransferDevices, a Label"
       "Reader, a library Door, MediaAccessDevices, and other "
       "Library components.")
   ]
class CIM_StorageLibrary : CIM_System
{
      [Description (
        "Capabilities of the StorageLibrary. For example, it can be "
        "indicated that the Library can perform automatic cleaning of "
        "the MediaAccessDevices contained in it (value=1) or that the "
        "Library provides physical door access for an operator "
        "(value=2)."),
       Values {"Unknown", "Other", "Automatic Cleaning", 
             "Manual Operation", "Front Panel Lockable"}
      ]
   uint16 Capabilities[];
      [Description (
        "Boolean set to TRUE if there are more PhysicalMedia in a "
        "Library than there are StorageMediaLocations to contain them. "
        "For instance, if all MediaAccessDevices have a Media loaded "
        "in them, and all StorageMediaLocations are loaded by an "
        "operator, then an Overfilled condition exists.")
      ]
   boolean Overfilled;
      [Description (
        "Boolean set to TRUE if the Library can not currently report "
        "the correct state of each PhysicalMedia within its proper "
        "StorageMediaLocation.")
      ]
   boolean AuditNeeded;
      [Description (
        "Boolean set to TRUE if an audit of the location of some or "
        "all of the Library's PhysicalMedia is currently being "
        "performed. That an individual Changer is currently doing an "
        "audit is indicated by a similar AuditInProgress boolean "
        "property on the Changer object.")
      ]
   boolean AuditInProgress;
      [Description (
        "Maximum time in seconds that it takes for the Storage"
        "Library to perform a complete audit of each StorageMedia"
        "Location, to determine the absence or presence of a Physical"
        "Media. If automated support is not provided, then this "
        "property's value is undefined."),
       Units ("Seconds")
      ]
   uint64 MaxAuditTime;
      [Description (
        "Boolean set to TRUE if the Library includes a robotics "
        "mechanism that can be controlled by a ComputerSystem, to "
        "automatically load and unload PhysicalMedia to/from "
        "MediaAccessDevices and StorageMediaLocations. The "
        "property is set to FALSE if the Library represents a "
        "repository of Media that are inaccessible to a MediaAccess"
        "Device without human intervention. An example of a non-"
        "automated Library is a 'shelf' or 'vault' where Physical"
        "Media are kept for extended periods of time.")
      ]
   boolean Automated;
      [Description (
        "Requests that the Library robotics be enabled for "
        "automated operation (input parameter, Enabled, set to TRUE), "
        "or disabled for manual operation (input parameter set to "
        "FALSE). The return value should be 0 if the request was "
        "successfully executed, 1 if the request is not supported "
        "and some other value if an error occurred. In a subclass, "
        "the set of possible return codes could be specified, using "
        "a ValueMap qualifier on the method. The strings to which "
        "the ValueMap contents are 'translated' may also be specified "
        "in the subclass as a Values array qualifier.") 
      ]
   uint32 EnableRobotics([IN] boolean Enable);
};

// ===================================================================
// OperatingSystem
// ===================================================================
   [Description (
       "An OperatingSystem is software/firmware that makes a "
       "ComputerSystem's hardware usable, and implements and/or "
       "manages the resources, file systems, processes, user "
       "interfaces, services, ... available on the ComputerSystem.")
   ] 
class CIM_OperatingSystem : CIM_LogicalElement
{
      [Propagated ("CIM_ComputerSystem.CreationClassName"),
       Key,
       Description ("The scoping ComputerSystem's CreationClassName."),
       MaxLen (256)	
      ]
   string CSCreationClassName;
      [Propagated ("CIM_ComputerSystem.Name"), 
       Key,
       Description ("The scoping ComputerSystem's Name."), 
       MaxLen (256)
      ]
   string CSName;
      [Key,
       Description (
	  "CreationClassName indicates the name of the class or the "
	  "subclass used in the creation of an instance. When used "
	  "with the other key properties of this class, this property "
	  "allows all instances of this class and its subclasses to "
	  "be uniquely identified."),
       MaxLen (256)
      ]
   string CreationClassName;
      [Override ("Name"),
       Key,
       Description (
	  "The inherited Name serves as key of an OperatingSystem "
	  "instance within a ComputerSystem."),
       MaxLen (256),
       MappingStrings {"MIF.DMTF|Operating System|001.2"}
      ]
   string Name;
      [Description (
	  "A integer indicating the type of OperatingSystem."),
       Values {"Unknown", "Other", "MACOS", "ATTUNIX", "DGUX",
             "DECNT", "Digital Unix", "OpenVMS", "HPUX", "AIX",
             "MVS", "OS400", "OS/2", "JavaVM", "MSDOS", "WIN3x",
	       "WIN95", "WIN98", "WINNT", "WINCE", "NCR3000",
             "NetWare", "OSF", "DC/OS", "Reliant UNIX",
             "SCO UnixWare", "SCO OpenServer", "Sequent",
             "IRIX", "Solaris", "SunOS", "U6000", "ASERIES",
             "TandemNSK", "TandemNT", "BS2000", "LINUX",
             "Lynx", "XENIX", "VM/ESA", "Interactive UNIX",
             "BSDUNIX", "FreeBSD", "NetBSD", "GNU Hurd", "OS9",
             "MACH Kernel", "Inferno", "QNX", "EPOC", "IxWorks",
             "VxWorks", "MiNT", "BeOS", "HP MPE", "NextStep",
             "PalmPilot", "Rhapsody", "Windows 2000", "Dedicated",
             "OS/390", "VSE", "TPF"},
	 ModelCorrespondence {
	       "CIM_OperatingSystem.OtherTypeDescription"}
      ]
   uint16 OSType;
      [Description (
	  "A string describing the manufacturer and OperatingSystem "
	  "type - used when the OperatingSystem property, OSType, is "
	  "set to 1 or 59 (\"Other\" or \"Dedicated\"). The format of "
        "the string inserted in OtherTypeDescription should be "
        "similar in format to the Values strings defined for OSType. "
        "OtherTypeDescription should be set to NULL when OSType is "
        "any value other than 1 or 59."),
	 MaxLen (64),
	 ModelCorrespondence {"CIM_OperatingSystem.OSType"}
	]
   string OtherTypeDescription;
      [Description(
	  "A string describing the Operating System's version "
	  "number. The format of the version information is as follows: "
	  "<Major Number>.<Minor Number>.<Revision> or "
	  "<Major Number>.<Minor Number>.<Revision Letter>."),
       MappingStrings {"MIF.DMTF|Operating System|001.3"}
      ]
   string Version;
      [Description ("Time when the OperatingSystem was last booted."),
       MappingStrings {"MIF.DMTF|General Information|001.5"}
      ]
   datetime LastBootUpTime; 
      [Description (
	  "OperatingSystem's notion of the local date and time of day."),
       MappingStrings {"MIB.IETF|HOST-RESOURCES-MIB.hrSystemDate",
             "MIF.DMTF|General Information|001.6"}
      ]
   datetime LocalDateTime;
      [Description (
	  "CurrentTimeZone indicates the number of minutes the "
	  "OperatingSystem is offset from Greenwich Mean Time. "
	  "Either the number is positive, negative or zero."),
       Units("Minutes")
      ] 
   sint16 CurrentTimeZone;
      [Description (
	 "Number of user licenses for the OperatingSystem. "
	 "If unlimited, enter 0.")
      ]
   uint32 NumberOfLicensedUsers;
      [Description (
	  "Number of user sessions for which the OperatingSystem is "
	  "currently storing state information."), Gauge,
       MappingStrings {
	       "MIB.IETF|HOST-RESOURCES-MIB.hrSystemNumUsers"}
      ]
   uint32 NumberOfUsers;
      [Description (
	  "Number of process contexts currently loaded or running on "
	  "the OperatingSystem."), Gauge, 
       MappingStrings {
	       "MIB.IETF|HOST-RESOURCES-MIB.hrSystemProcesses"}
      ]
   uint32 NumberOfProcesses;
      [Description (
	  "Maximum number of process contexts the OperatingSystem can "
	  "support. If there is no fixed maximum, the value should be 0."
	  "On systems that have a fixed maximum, this object can help "
	  "diagnose failures that occur when the maximum is reached."), 
       MappingStrings {
	       "MIB.IETF|HOST-RESOURCES-MIB.hrSystemMaxProcesses"}
      ]
   uint32 MaxNumberOfProcesses;
      [Description (
	  "Total swap space in Kbytes. This value may be "
	  "NULL (unspecified) if swap space is not distinguished from "
	  "page files.  However, some Operating Systems distinguish "
	  "these concepts.  For example, in UNIX, whole processes can be "
	  "'swapped out' when the free page list falls and remains "
	  "below a specified amount."),
       Units("KiloBytes")
      ]
   uint64 TotalSwapSpaceSize;
      [Description (
	  "Number of Kbytes of virtual memory. For example, "
	  "this may be calculated by adding the amount of total RAM to "
	  "the amount of paging space (ie, adding the amount of "
	  "memory in/aggregated by the ComputerSystem to the property, "
	  "SizeStoredInPagingFiles."),
       MappingStrings {"MIF.DMTF|System Memory Settings|001.5"},
       Units("KiloBytes")
      ]
   uint64 TotalVirtualMemorySize;
      [Description (
	  "Number of Kbytes of virtual memory currently unused and "
	  "available. For example, this may be calculated by adding "
	  "the amount of free RAM to the amount of free paging space "
	  "(ie, adding the properties, FreePhysicalMemory and FreeSpace"
	  "InPagingFiles)."),
       MappingStrings {"MIF.DMTF|System Memory Settings|001.6"},
       Units("KiloBytes")
      ]
   uint64 FreeVirtualMemory;
      [Description (
	  "Number of Kbytes of physical memory currently unused and "
	  "available."),
       MappingStrings {"MIF.DMTF|System Memory Settings|001.2"},
       Units("KiloBytes")
      ]
   uint64 FreePhysicalMemory;
      [Description (
        "The total amount of physical memory (in Kbytes) available "
        "to the OperatingSystem. This value does not necessarily "
        "indicate the true amount of physical memory, but what is "
        "reported to the OperatingSystem as available to it."),
       Units("KiloBytes")
      ]
   uint64 TotalVisibleMemorySize;
      [Description (
	  "The total number of KBytes that can be stored in the "
	  "OperatingSystem's paging files. 0 indicates that there "
	  "are no paging files."),
       Units("KiloBytes"),
       MappingStrings {"MIF.DMTF|System Memory Settings|001.3"}
      ]
   uint64 SizeStoredInPagingFiles;
      [Description (
	  "The total number of KBytes that can be mapped into the "
	  "OperatingSystem's paging files without causing any other "
	  "pages to be swapped out. 0 indicates that there are no "
	  "paging files."),
       Units("KiloBytes"),
       MappingStrings {"MIF.DMTF|System Memory Settings|001.4"}
      ]
   uint64 FreeSpaceInPagingFiles;
	[Description (
   	  "Maximum number of Kbytes of memory that can be allocated "
	  "to a Process. For Operating Systems with no virtual memory, "
	  "this value is typically equal to the total amount of "
	  "physical Memory minus memory used by the BIOS and OS. For "
	  "some Operating Systems, this value may be infinity - in "
	  "which case, 0 should be entered. In other cases, this value "
	  "could be a constant - for example, 2G or 4G."),
   	 Units("KiloBytes")
	]
   uint64 MaxProcessMemorySize;
      [Description (
	  "Boolean indicating whether the OperatingSystem is "
	  "distributed across several ComputerSystem nodes. If so, "
	  "these nodes should be grouped as a Cluster.")
      ]
   boolean Distributed;
      [Description (
	  "Requests a reboot of the OperatingSystem. The return value "
	  "should be 0 if the request was successfully executed, "
	  "1 if the request is not supported and some other value "
	  "if an error occurred. In a subclass, the set of possible "
        "return codes could be specified, using a ValueMap qualifier "
        "on the method. The strings to which the ValueMap contents "
        "are 'translated' may also be specified in the subclass as "
        "a Values array qualifier.") 
      ]
   uint32 Reboot();
      [Description (
	  "Requests a shutdown of the OperatingSystem. The return "
	  "value should be 0 if the request was successfully executed, "
	  "1 if the request is not supported and some other value if "
	  "an error occurred. It is up to the implementation or subclass "
	  "of OperatingSystem to establish dependencies between "
	  "the Shutdown and Reboot methods, and for example, to provide "
	  "more sophisticated capabilities such as scheduled shutdown/"
	  "reboot, etc. In a subclass, the set of possible return "
        "codes could be specified, using a ValueMap qualifier on "
        "the method. The strings to which the ValueMap contents are "
        "'translated' may also be specified in the subclass as a "
        "Values array qualifier.") 
      ]
   uint32 Shutdown();
};

// ===================================================================
// InstalledOS
// ===================================================================
   [Association,
    Aggregation,
    Description (
       "A link between the ComputerSystem and the OperatingSystem(s) "
       "installed or loaded on it. An OperatingSystem is 'installed' "
       "on a ComputerSystem, when placed on one of its StorageExtents "
       "- for example, copied to a disk drive or downloaded to "
       "Memory. Using this definition, an OperatingSystem is "
       "'installed' on a NetPC when downloaded via the network.")
   ] 
class CIM_InstalledOS : CIM_SystemComponent
{
      [Override ("GroupComponent"),
       Aggregate,
       Description ("The ComputerSystem."),
       Min(1), Max (1)
      ]
   CIM_ComputerSystem REF GroupComponent;
      [Override ("PartComponent"),
       Description (
	  "The OperatingSystem installed on the ComputerSystem."),
       Weak
      ]
   CIM_OperatingSystem REF PartComponent;
      [Description (
	  "Boolean indicating that the OperatingSystem is the default "
	  "OS for the ComputerSystem."),
       MappingStrings {"MIF.DMTF|Operating System|001.4"}
      ]
   boolean PrimaryOS;
};

// ===================================================================
// RunningOS
// ===================================================================
   [Association,
    Description (
       "RunningOS indicates the currently executing OperatingSystem. "
       "At most one OperatingSystem can execute at any time on a "
       "ComputerSystem. 'At most one' is specified, since the Computer"
       "System may not be currently booted, or its OperatingSystem "
       "may be unknown.")
   ] 
class CIM_RunningOS : CIM_Dependency
{
      [Override ("Antecedent"),
       Description (
	  "The OperatingSystem currently running on the "
	  "ComputerSystem."),
       Max (1)
      ]
   CIM_OperatingSystem REF Antecedent;
      [Override ("Dependent"), 
       Description ("The ComputerSystem."),
       Max (1)
      ]
   CIM_ComputerSystem REF Dependent;
};

// ==================================================================
// OperatingSystemSoftwareFeature
// ==================================================================
   [Association, Aggregation,
    Description (
       "Indicates the SoftwareFeatures that make up the Operating"
       "System. The SoftwareFeatures can be part of different "
       "Products.")
   ] 
class CIM_OperatingSystemSoftwareFeature : CIM_Component
{
	  [Override ("GroupComponent"), Aggregate,
	   Description ("The OperatingSystem.")
	  ]
    CIM_OperatingSystem REF GroupComponent;
        [Override ("PartComponent"),
	   Description (
	    "The SoftwareFeatures that make up the OperatingSystem.")
        ]
    CIM_SoftwareFeature REF PartComponent;
};

// ===================================================================
// FileSystem
// ===================================================================
   [Description (
       "A file or dataset store local to a ComputerSystem or "
       "remotely mounted from a file server.")
   ] 
class CIM_FileSystem : CIM_LogicalElement
{
      [Propagated ("CIM_ComputerSystem.CreationClassName"),
       Key,
       Description ("The scoping ComputerSystem's CreationClassName."),
       MaxLen (256)
      ]
   string CSCreationClassName;
      [Propagated ("CIM_ComputerSystem.Name"),
       Key,
       Description ("The scoping ComputerSystem's Name."),
       MaxLen (256)
      ]
   string CSName;
      [Key,
       Description (
	  "CreationClassName indicates the name of the class or the "
	  "subclass used in the creation of an instance. When used "
	  "with the other key properties of this class, this property "
	  "allows all instances of this class and its subclasses to "
	  "be uniquely identified."),
       MaxLen (256)
      ]
   string CreationClassName;
      [Override ("Name"),
       Key,
       Description (
	  "The inherited Name serves as key of a FileSystem instance "
	  "within a ComputerSystem."),
       MaxLen (256)
      ]
   string Name;
      [Description (
	  "Path name or other information defining the root of the "
	  "FileSystem."),
       MappingStrings {"MIB.IETF|HOST-RESOURCES-MIB.hrFSMountPoint"}
      ]
   string Root;
      [Description (
	  "FileSystems can read/write data in blocks which are defined "
	  "independently of the underlying StorageExtents. This property "
	  "captures the FileSystem's block size for data storage and "
	  "retrieval."),
       Units("Bytes")
      ]
   uint64 BlockSize;
      [Description (
	  "The FileSystemSize property stores the total size of the File"
	  "System in bytes. If unknown, enter 0."),
       Units("Bytes")
      ]
   uint64 FileSystemSize;
      [Description (
	  "AvailableSpace indicates the total amount of free space "
	  "for the FileSystem, in bytes. If unknown, enter 0."),
       MappingStrings {"MIF.DMTF|Partition|002.4"},
       Units("Bytes")
      ]
   uint64 AvailableSpace;
      [Description (
	  "Indicates that the FileSystem is designated as read only."),
       MappingStrings {"MIB.IETF|HOST-RESOURCES-MIB.hrFSAccess"}
      ] 
   boolean ReadOnly;
      [Description (
	  "A free form string indicating the algorithm or tool used to "
	  "encrypt the FileSystem. If it is not possible or not desired "
	  "to describe the encryption scheme (perhaps for security "
	  "reasons), recommend using the following words: \"Unknown\" to "
	  "represent that it is not known whether the FileSystem is "
	  "encrypted or not, \"Encrypted\" to represent that the File"
	  "System is encrypted but either its encryption scheme is not "
	  "known or not disclosed, and \"Not Encrypted\" to represent "
	  "that the FileSystem is not encrypted."),
       MappingStrings {"MIF.DMTF|Partition|002.8"}
      ]
   string EncryptionMethod;
      [Description (
	  "A free form string indicating the algorithm or tool used to "
	  "compress the FileSystem. If it is not possible or not desired "
	  "to describe the compression scheme (perhaps because it is not "
	  "known), recommend using the following words: \"Unknown\" to "
	  "represent that it is not known whether the FileSystem is "
	  "compressed or not, \"Compressed\" to represent that the File"
	  "System is compressed but either its compression scheme is not "
	  "known or not disclosed, and \"Not Compressed\" to represent "
	  "that the FileSystem is not compressed."),
       MappingStrings {"MIF.DMTF|Partition|002.7"}
      ]
   string CompressionMethod;
      [Description (
	  "Indicates that case sensitive file names are supported.")
      ]
   boolean CaseSensitive;
      [Description (
	  "Indicates that the case of file names are preserved.")
      ]
   boolean CasePreserved;
      [Description (
	  "Array defining the character sets or encoding supported by "
        "the FileSystem. For example, the values, \"ASCII\" (2) or "
        "\"ISO2022\" (4), may be specified."),
       Values {"Unknown", "Other", "ASCII", "Unicode", 
	       "ISO2022", "ISO8859", "Extended UNIX Code", "UTF-8",
             "UCS-2"}
      ]
   uint16 CodeSet[];
      [Description (
	  "Integer indicating the maximum length of a file name within "
	  "the FileSystem. 0 indicates that there is no limit on file "
	  "name length.")
      ]
   uint32 MaxFileNameLength;
      [Description (
        "The minimum file allocation size (an integral number of "
        "blocks), imposed by the FileSystem. (The size of a block is "
        "specified in the BlockSize property for the FileSystem.) "
        "Minimum allocation size is the smallest amount of storage "
        "allocated to a LogicalFile by the FileSystem. This is not a "
        "mandatory minimum allocation for all FileSystems. Under "
        "stress conditions, some FileSystems may allocate storage "
        "in amounts smaller than the ClusterSize.")
      ]
   uint32 ClusterSize;
      [Description (
        "String describing the type of FileSystem and therefore, its "
        "conventions. For example, \"NTFS\" or \"S5\" may be listed "
        "as well as any additional information on the FileSystem's "
        "implementation. Since various flavors of FileSystems (like "
        "S5) exist, this property is defined as a string."),
       MappingStrings {"MIF.DMTF|Partition|002.6"}
      ]
string FileSystemType;
};

// ===================================================================
// LocalFileSystem
// ===================================================================
   [Description (
       "A class derived from FileSystem that represents the file "
       "store on a ComputerSystem's locally controlled media.")
   ] 
class CIM_LocalFileSystem : CIM_FileSystem
{
};

// ===================================================================
// RemoteFileSystem
// ===================================================================
   [Description (
       "A class derived from FileSystem that represents access of the "
       "FileSystem via a network-related service. For example, the "
       "file store for an NFS FileSystem is NOT on a ComputerSystem's "
       "locally controlled media.")
   ] 
class CIM_RemoteFileSystem : CIM_FileSystem
{
};

// ===================================================================
// NFS (NetworkFileSystem)
// ===================================================================
   [Description (
       "A class derived from RemoteFileSystem representing that "
       "the FileSystem is mounted from another ComputerSystem. The "
       "properties of the NFS object deal with the operational "
       "aspects of the mount.")
   ] 
class CIM_NFS : CIM_RemoteFileSystem
{
      [Description (
	  "If set to true: Once the FileSystem is mounted, NFS requests "
	  "are retried until the hosting System responds.\n" 
	  "If set to false: Once the FileSystem is mounted, an error "
	  "is returned if the hosting System does not respond.")
      ]
   boolean HardMount;
      [Description (
	  "If set to true: Retries are performed in the foreground.\n"
	  "If set to false: If the first mount attempt fails, retries "
	  "are performed in the background.")
      ]
   boolean ForegroundMount;
      [Description (
	  "If set to true: Interrupts are permitted for hard mounts.\n"
	  "If set to false: Interrupts are ignored for hard mounts.")
      ]
   boolean Interrupt;
      [Description ("Maximum number of mount failure retries allowed.")]
   uint16 MountFailureRetries;
      [Description ("Maximum number of NFS retransmissions allowed.")]
   uint16 RetransmissionAttempts;
      [Description ("NFS timeout in tenths of a second."),
       Units ("Tenths of Seconds")
      ]
   uint32 RetransmissionTimeout;
      [Description ("Read buffer size in bytes."),
       Units("Bytes")
      ]
   uint64 ReadBufferSize;
      [Description ("Write buffer size in bytes."),
       Units("Bytes")
      ]
   uint64 WriteBufferSize;
      [Description (
	  "The remote ComputerSystem's (ie, the NFS File "
	  "'Server's) UDP port number.")
      ]
   uint32 ServerCommunicationPort;
      [Description (
	  "If set to true: Control attribute caching is enabled.\n"
	  "If set to false: Control attribute caching is disabled.")
      ]
   boolean AttributeCaching;
      [Description (
	  "Minimum number of seconds that cached attributes are held "
	  "after file modification."),
       Units("Seconds")
      ]
   uint16 AttributeCachingForRegularFilesMin;
      [Description (
	  "Maximum number of seconds that cached attributes are held "
	  "after file modification."),
       Units("Seconds")
      ]
   uint16 AttributeCachingForRegularFilesMax;
      [Description (
	  "Minimum number of seconds that cached attributes are held "
	  "after directory update."),
       Units("Seconds")
      ]
   uint16 AttributeCachingForDirectoriesMin;
      [Description (
	  "Maximum number of seconds that cached attributes are held "
	  "after directory update."),
       Units("Seconds")
      ]
   uint16 AttributeCachingForDirectoriesMax;
};

// ===================================================================
// LogicalFile
// ===================================================================
   [Description (
       "A LogicalFile is a named collection of data or executable "
       "code, or represents a LogicalDevice or Directory.  It is "
	 "located within the context of a FileSystem, on a Storage"
	 "Extent.")
   ] 
class CIM_LogicalFile : CIM_LogicalElement
{
      [Propagated ("CIM_FileSystem.CSCreationClassName"),
       Key,
       Description ("The scoping ComputerSystem's CreationClassName."),
       MaxLen (256)
      ]
   string CSCreationClassName;
      [Propagated ("CIM_FileSystem.CSName"),
       Key,
       Description ("The scoping ComputerSystem's Name."),
       MaxLen (256)
      ]
   string CSName;
      [Propagated ("CIM_FileSystem.CreationClassName"), 
       Key,
       Description ("The scoping FileSystem's CreationClassName."),
       MaxLen (256)
      ]
   string FSCreationClassName;
      [Propagated ("CIM_FileSystem.Name"),
       Key,
       Description ("The scoping FileSystem's Name."),
       MaxLen (256)
      ]
   string FSName;
      [Key,
       Description (
	  "CreationClassName indicates the name of the class or the "
	  "subclass used in the creation of an instance. When used "
	  "with the other key properties of this class, this property "
	  "allows all instances of this class and its subclasses to "
	  "be uniquely identified."),
       MaxLen (256)
      ]
   string CreationClassName;	
      [Override ("Name"),
       Key,
       Description (
	  "The inherited Name serves as key of a LogicalFile instance "
	  "within a FileSystem. Full path names should be provided if "
	  "a Directory hierarchy is not modeled or does not exist. In "
	  "all cases, the LogicalFile's Name property must be unique "
	  "for all instances within a single FileSystem and "
	  "creation class."),
       MaxLen (1024)
      ]
   string Name;
      [Description ("Size of the File in bytes."),
       Units ("Bytes")
      ] 
   uint64 FileSize;
      [Description ("File's creation date.")] 
   datetime CreationDate;
      [Description ("Time that the File was last modified.")] 
   datetime LastModified;
      [Description ("Time that the File was last accessed.")] 
   datetime LastAccessed;
      [Description ("Boolean indicating that the File can be read.")] 
   boolean Readable;
      [Description (
	  "Boolean indicating that the File can be written.")
      ] 
   boolean Writeable;
      [Description (
	  "A free form string indicating the algorithm or tool used to "
	  "compress the LogicalFile. If it is not possible or not "
	  "desired to describe the compression scheme (perhaps because "
	  "it is not known), recommend using the following words: "
	  "\"Unknown\" to represent that it is not known whether the "
	  "LogicalFile is compressed or not, \"Compressed\" to "
	  "represent that the File is compressed but either its "
	  "compression scheme is not known or not disclosed, and \"Not "
	  "Compressed\" to represent that the LogicalFile is not "
	  "compressed.")
      ] 
   string CompressionMethod;
      [Description (
	  "A free form string indicating the algorithm or tool used to "
	  "encrypt the LogicalFile. If it is not possible or not desired "
	  "to describe the encryption scheme (perhaps for security "
	  "reasons), recommend using the following words: \"Unknown\" to "
	  "represent that it is not known whether the LogicalFile is "
	  "encrypted or not, \"Encrypted\" to represent that the File "
	  "is encrypted but either its encryption scheme is not known "
	  "or not disclosed, and \"Not Encrypted\" to represent "
	  "that the LogicalFile is not encrypted.")
      ] 
   string EncryptionMethod;
      [Description (
	  "Integer indicating the number of 'file opens' that are "
	  "currently active against the File."), Counter
      ]
   uint64 InUseCount;
};

// ===================================================================
// DataFile
// ===================================================================
   [Description (
       "DataFile is a type of LogicalFile that is a named collection "
       "of data or executable code.")
   ] 
class CIM_DataFile : CIM_LogicalFile
{
};

// ===================================================================
// Directory
// ===================================================================
   [Description (
       "Directory is a type of File that logically groups Files "
       "'contained' in it, and provides path information for the "
       "grouped Files.")
   ] 
class CIM_Directory : CIM_LogicalFile
{
};

// ===================================================================
// DeviceFile
// ===================================================================
   [Description (
       "DeviceFile is a special type of LogicalFile that represents "
       "a Device. This convention is useful for some operating systems "
       "that manage devices using a byte stream I/O model. The Logical"
       "Device that is associated with this file is specified using "
       "the DeviceAccessedByFile relationship.")
   ] 
class CIM_DeviceFile : CIM_LogicalFile
{
};

// ===================================================================
// DeviceAccessedByFile
// ===================================================================
   [Association,
    Description (
       "Specifies the LogicalDevice that is associated with, and "
       "accessed using the referenced DeviceFile.")
   ] 
class CIM_DeviceAccessedByFile : CIM_Dependency
{   
      [Override ("Antecedent"),
       Description ("The DeviceFile.")
      ]
   CIM_DeviceFile REF Antecedent;
      [Override ("Dependent"),
       Description (
	  "The Device that is accessed using the DeviceFile."),
       Max (1)
      ]
   CIM_LogicalDevice REF Dependent;
};

// ===================================================================
// DirectoryContainsFile
// ===================================================================
   [Association,
    Aggregation,
    Description (
       "Specifies the hierarchical arrangement of LogicalFiles in a "
       "Directory.")
   ] 
class CIM_DirectoryContainsFile : CIM_Component
{   
      [Override ("GroupComponent"),
       Aggregate,
       Description ("The Directory."),
       Max (1)
      ]
   CIM_Directory REF GroupComponent;
      [Override ("PartComponent"),
       Description ("The LogicalFile 'contained within' the Directory.")
      ]
   CIM_LogicalFile REF PartComponent;
};

// ===================================================================
// Mount
// ===================================================================
   [Association,
    Description (
       "An association between a NetworkFileSystem and a remote "
       "Directory. The Directory must be exported by a LocalFileSystem "
       "in order to be mount-able.")
   ] 
class CIM_Mount : CIM_Dependency
{   
      [Override ("Antecedent"),
       Description ("The Directory mounted."),
       Max (1)
      ]
   CIM_Directory REF Antecedent;
      [Override ("Dependent"),
       Description ("The NetworkFileSystem.")
      ]
   CIM_NFS REF Dependent;
};

// ===================================================================
// Export
// ===================================================================
   [Association,
    Description (
       "An association between a LocalFileSystem and its Directories "
       "indicating that the specified Directories are available for "
       "NFS mount.")
   ] 
class CIM_Export 
{   
      [Key, Description ("The LocalFileSystem."),
       Max (1)
      ]
   CIM_LocalFileSystem REF LocalFS;
      [Key, Description ("The Directory exported for NFS mount.")]
   CIM_Directory REF Directory;
      [Description ("Name under which the Directory is exported.")]
   string ExportedDirectoryName;
};

// ===================================================================
// HostedFileSystem
// ===================================================================
   [Association,
    Aggregation,
    Description (
       "A link between the ComputerSystem and the FileSystem(s) "
       "hosted on this ComputerSystem.")
   ] 
class CIM_HostedFileSystem : CIM_SystemComponent
{
      [Override ("GroupComponent"),
       Aggregate,
       Description ("The ComputerSystem."),
       Min (1), Max (1)
      ]
   CIM_ComputerSystem REF GroupComponent;
      [Override ("PartComponent"),
       Description ("The FileSystem owned by the ComputerSystem."),
       Weak
      ]
   CIM_FileSystem REF PartComponent;
};

// ===================================================================
// BootOSFromFS
// ===================================================================
   [Association,
    Description (
       "A link between the OperatingSystem and the FileSystem(s) from "
       "which this OperatingSystem is loaded. The association is many-"
       "to-many since a Distributed OS could depend on several File"
       "Systems in order to correctly and completely load.")
   ] 
class CIM_BootOSFromFS : CIM_Dependency
{
      [Override ("Antecedent"),
       Description (
	  "The FileSystem from which the OperatingSystem is loaded.")
      ]
   CIM_FileSystem REF Antecedent;
      [Override ("Dependent"),
       Description ("The OperatingSystem.")
      ]
   CIM_OperatingSystem REF Dependent;
};

// ===================================================================
// FileStorage
// ===================================================================
   [Association,
    Aggregation,
    Description (
       "A link between the FileSystem and the LogicalFile(s) addressed "
       "through this FileSystem.")
   ] 
class CIM_FileStorage : CIM_Component
{
      [Override ("GroupComponent"),
       Aggregate,
       Description ("The FileSystem."),
       Min (1), Max (1)
      ]
   CIM_FileSystem REF GroupComponent;
      [Override ("PartComponent"),
       Description (
	  "The LogicalFile stored in the context of the FileSystem."),
       Weak
      ]
   CIM_LogicalFile REF PartComponent;
};

// ===================================================================
// Process
// ===================================================================
   [Description (
       "Each instance of the CIM_Process class represents a single "
       "instance of a running program. A user of the OperatingSystem "
       "will typically see a Process as an application or task. Within "
       "an OperatingSystem, a Process is defined by a workspace of "
       "memory resources and environmental settings that are allocated "
       "to it. On a multitasking System, this workspace prevents "
       "intrusion of resources by other Processes. Additionally, a "
       "Process can execute as multiple Threads, all which run within "
       "the same workspace.")
   ] 
class CIM_Process : CIM_LogicalElement
{
      [Propagated("CIM_OperatingSystem.CSCreationClassName"),
       Key,
       Description ("The scoping ComputerSystem's CreationClassName."),
       MaxLen (256)
      ]
   string CSCreationClassName;
      [Propagated("CIM_OperatingSystem.CSName"),
       Key,
       Description ("The scoping ComputerSystem's Name."),
       MaxLen (256)
      ]
   string CSName;
      [Propagated("CIM_OperatingSystem.CreationClassName"),
       Key,
       Description ("The scoping OperatingSystem's CreationClassName."),
       MaxLen (256)
      ]
   string OSCreationClassName;
      [Propagated("CIM_OperatingSystem.Name"),
       Key,
       Description ("The scoping OperatingSystem's Name."),
       MaxLen (256)
      ]
   string OSName;
      [Key,
       Description (
	  "CreationClassName indicates the name of the class or the "
	  "subclass used in the creation of an instance. When used "
	  "with the other key properties of this class, this property "
	  "allows all instances of this class and its subclasses to "
	  "be uniquely identified."),
       MaxLen (256)
      ]
   string CreationClassName;
      [Key,
       Description (
	  "A string used to identify the Process. A Process ID is a "
	  "kind of Process Handle."),
       MaxLen (256)
      ]
   string Handle;
      [Description (
	  "Priority indicates the urgency or importance of execution "
	  "of a Process. If a priority is not defined for a Process, "
	  "a value of 0 should be used.")
      ]
   uint32 Priority;
      [Description (
	  "Indicates the current operating condition of the Process. "
	  "Values include ready (2), running (3), and blocked (4), "
	  "among others."),
       Values {"Unknown", "Other", "Ready", "Running", 
	       "Blocked", "Suspended Blocked", "Suspended Ready"}
      ]
   uint16 ExecutionState;
      [Description ("Time that the Process began executing.")]
   datetime CreationDate;
      [Description (
	  "Time that the Process was stopped or terminated.")
      ]
   datetime TerminationDate;
      [Description (
	  "Time in user mode, in milliseconds. If this information is "
	  "not available, a value of 0 should be used."), 
       Units("MilliSeconds")
      ]
   uint64 UserModeTime;
      [Description (
	  "Time in kernel mode, in milliseconds. If this information "
	  "is not available, a value of 0 should be used."),
       Units("MilliSeconds")
      ]
   uint64 KernelModeTime;
      [Description (
	  "The amount of memory in bytes that a Process needs to execute "
	  "efficiently, for an OperatingSystem that uses page-based "
	  "memory management. If an insufficient amount of memory "
	  "is available (< working set size), thrashing will occur. "
	  "If this information is not known, NULL or 0 should be "
	  "entered.  If this data is provided, it could be monitored "
	  "to understand a Process' changing memory requirements as "
	  "execution proceeds."),
       Units ("Bytes")
	]
   uint64 WorkingSetSize;
};

// ===================================================================
// OSProcess
// ===================================================================
   [Association,
    Aggregation,
    Description (
       "A link between the OperatingSystem and Process(es) running "
       "in the context of this OperatingSystem.")
   ] 
class CIM_OSProcess : CIM_Component
{
      [Override ("GroupComponent"),
       Aggregate,
       Description ("The OperatingSystem."),
       Min (1), Max (1)
      ]
   CIM_OperatingSystem REF GroupComponent;
      [Override ("PartComponent"),
       Description (
	  "The Process running in the context of the OperatingSystem"),
       Weak
      ]
   CIM_Process REF PartComponent;
};

// ===================================================================
// ProcessExecutable
// ===================================================================
   [Association,
    Description (
       "A link between a Process and a DataFile indicating that the "
       "File participates in the execution of the Process.")
   ] 
class CIM_ProcessExecutable : CIM_Dependency
{
      [Override ("Antecedent"),
       Description (
	  "The DataFile participating in the execution of the Process.")
      ]
   CIM_DataFile REF Antecedent;
      [Override ("Dependent"),
       Description ("The Process.")
      ] 
   CIM_Process REF Dependent;
};

// ===================================================================
// Thread
// ===================================================================
   [Description (
       "Threads represent the ability to execute units of a Process "
       "or task in parallel.  A Process can have many Threads, each "
       "of which is weak to the Process.")
   ] 
class CIM_Thread : CIM_LogicalElement
{
      [Propagated("CIM_Process.CSCreationClassName"),
       Key,
       Description ("The scoping ComputerSystem's CreationClassName."),
       MaxLen (256)
      ]
   string  CSCreationClassName;
      [Propagated("CIM_Process.CSName"),
       Key,
       Description ("The scoping ComputerSystem's Name."),
       MaxLen (256)
      ]
   string CSName;
      [Propagated("CIM_Process.OSCreationClassName"),
       Key,
       Description ("The scoping OperatingSystem's CreationClassName."),
       MaxLen (256)
      ]
   string OSCreationClassName;
      [Propagated("CIM_Process.OSName"),
       Key,
       Description ("The scoping OperatingSystem's Name."),
       MaxLen (256)
      ]
   string OSName;
      [Propagated("CIM_Process.CreationClassName"),
       Key,
       Description ("The scoping Process' CreationClassName."),
       MaxLen (256)
      ]
   string ProcessCreationClassName;
      [Propagated("CIM_Process.Handle"),
       Key,
       Description ("The scoping Process' Handle."),
       MaxLen (256)
      ]
   string ProcessHandle;
      [Key,
       Description (
	  "CreationClassName indicates the name of the class or the "
	  "subclass used in the creation of an instance. When used "
	  "with the other key properties of this class, this property "
	  "allow all instances of this class and its subclasses to "
	  "be uniquely identified."),
       MaxLen (256)
      ]
   string CreationClassName;
      [Key,
       Description ("A string used to identify the Thread."),
       MaxLen (256)
      ]
   string Handle;
      [Description (
	  "Priority indicates the urgency or importance of execution "
	  "of a Thread. A Thread may have a different priority than "
	  "its owning Process. If this information is not available "
	  "for a Thread, a value of 0 should be used.")
      ]
   uint32 Priority;
      [Description (
	  "Indicates the current operating condition of the Thread. " 
	  "Values include ready (2), running (3), and blocked (4), "
	  "among others."),
       Values {"Unknown", "Other", "Ready", "Running", 
	       "Blocked", "Suspended Blocked", "Suspended Ready"}
      ]
   uint16 ExecutionState;
      [Description (
	  "Time in user mode, in milliseconds. If this information is "
	  "not available, a value of 0 should be used."),
       Units("MilliSeconds")
      ]
   uint64 UserModeTime;
      [Description (
	  "Time in kernel mode, in milliseconds. If this information "
	  "is not available, a value of 0 should be used."),
       Units("MilliSeconds")
      ]
   uint64 KernelModeTime;
};

// ===================================================================
// ProcessThread
// ===================================================================
   [Association,
    Aggregation,
    Description (
       "A link between a Process and the Thread(s) running in the "
       "context of this Process.")
   ] 
class CIM_ProcessThread : CIM_Component
{
      [Override ("GroupComponent"),
       Aggregate,
       Description ("The Process."),
       Min (1), Max (1)
      ]
   CIM_Process REF GroupComponent;
      [Override ("PartComponent"),
       Description (
	  "The Thread running in the context of the Process."),
       Weak
      ]
   CIM_Thread REF PartComponent;
};

// ===================================================================
// BIOSFeature
// ===================================================================
   [Description (
       "BIOSFeature represents the capabilities of the low-level "
       "software that is used to bring up and configure a Computer"
       "System.")
   ] 
class CIM_BIOSFeature : CIM_SoftwareFeature
{
      [Description (
        "An array of integers that specify the features "
        "supported by the BIOS. For example, one can specify that "
        "PnP capabilities are provided (value=9) or that infrared "
        "devices are supported (21). Values specified in the "
        "enumeration are taken from both DMI and SMBIOS (the Type 0 "
        "structure, the BIOS Characteristics and BIOS "
        "Characteristics Extension Bytes attributes."),
       ValueMap {"1", "2", "3", "4", "5", "6", "7", "8", "9", 
               "10", "11", "12", "13", "14", "15", "16", "17", "18", 
               "19", "20", "21", "22", "23", "24", "25", "26", 
               "27", "28", "29", "30", "31", "160"},
       Values {"Other", "Unknown", "Undefined", "ISA Support", 
             "MCA Support", "EISA Support", "PCI Support", 
             "PCMCIA Support", "PnP Support", "APM Support", 
             "Upgradeable BIOS", "BIOS Shadowing Allowed", 
             "VL VESA Support", "ESCD Support", 
             "LS-120 Boot Support", "ACPI Support", 
             "I2O Boot Support", "USB Legacy Support", 
             "AGP Support", "PC Card", "IR", "1394", "I2C", 
             "Smart Battery", "ATAPI ZIP Drive Boot Support", 
             "1394 Boot Support", "Boot from CD", 
             "Selectable Boot", "BIOS ROM is Socketed", 
             "Boot from PCMCIA", "EDD Specification Support", 
             "PC-98"},
       MappingStrings {"MIF.DMTF|BIOS Characteristic|003.3"},
       ArrayType ("Indexed"),
	 ModelCorrespondence {
		 "CIM_BIOSFeature.CharacteristicDescriptions"}
      ]
   uint16 Characteristics[];
      [Description (
	  "An array of free-form strings providing more detailed "
	  "explanations for any of the BIOS features indicated in the "
	  "Characteristics array. Note, each entry of this array "
	  "is related to the entry in the Characteristics array that "
	  "is located at the same index."),
       ArrayType ("Indexed"),
       MappingStrings {"MIF.DMTF|BIOS Characteristic|003.4"},
	 ModelCorrespondence {"CIM_BIOSFeature.Characteristics"}
      ]
   string CharacteristicDescriptions[];
};
 
// ===================================================================
// BIOSElement
// ===================================================================
   [Description (
       "BIOSElement represents the low-level software that is loaded "
       "into non-volatile storage and used to bring up and configure "
       "a ComputerSystem.")
   ] 
class CIM_BIOSElement : CIM_SoftwareElement
{
      [Override ("Version"),
       MappingStrings {"MIF.DMTF|System BIOS|001.3"}
      ]
   string Version;
      [Override ("Manufacturer"),
       MappingStrings {"MIF.DMTF|System BIOS|001.2"}
      ]
   string Manufacturer;		
      [Description (
	  "If true, this is the primary BIOS of the ComputerSystem."),
       MappingStrings {"MIF.DMTF|System BIOS|001.9"}
      ]
   boolean PrimaryBIOS;
      [Description (
        "A list of installable languages for the BIOS. This "
        "information can be obtained from SMBIOS, from the string list "
        "that follows the Type 13 structure. An ISO 639 Language Name "
        "should be used to specify the BIOS' installable languages. The "
        "ISO 3166 Territory Name and the encoding method may also be "
        "specified, following the Language Name.")
      ]
   string ListOfLanguages[];
      [Description (
        "The currently selected language for the BIOS. This "
        "information can be obtained from SMBIOS, using the Current "
        "Language attribute of the Type 13 structure, to index into the "
        "string list following the structure. The property is formatted "
        "using the ISO 639 Language Name, and may be followed by the "
        "ISO 3166 Territory Name and the encoding method."),
       ModelCorrespondence {"CIM_BIOSElement.ListOfLanguages"}
      ]
   string CurrentLanguage;
};

// ===================================================================
// BIOSFeatureBIOSElements
// ===================================================================
   [Association,
    Aggregation,
    Description (
       "A link between BIOSFeature and its aggregated BIOSElements.")
   ] 
class CIM_BIOSFeatureBIOSElements : CIM_SoftwareFeatureSoftwareElements
{
      [Override ("GroupComponent"), Aggregate,
       Description ("The BIOSFeature.")
      ]
   CIM_BIOSFeature REF GroupComponent;
      [Override ("PartComponent"),
       Description (
	  "The BIOSElement that implements the capabilities described "
	  "by BIOSFeature.")
      ]
   CIM_BIOSElement REF PartComponent;
};

// ===================================================================
// SystemBIOS
// ===================================================================
   [Association, Aggregation, 
    Description (
       "SystemBIOS associates a UnitaryComputerSystem's BIOS with the "
       "System itself.")
   ]
class CIM_SystemBIOS : CIM_SystemComponent
{
      [Override ("GroupComponent"), Max (1), Aggregate, 
       Description (
        "The UnitaryComputerSystem that boots from the BIOS.")
      ]
   CIM_UnitaryComputerSystem REF GroupComponent;
      [Override ("PartComponent"), 
       Description ("The System's BIOS.")
      ]
   CIM_BIOSElement REF PartComponent;
};

// ===================================================================
// Job
// ===================================================================
   [Abstract, 
    Description (
       "A Job is a LogicalElement representing a unit of work for a "
	 "System, such as a print job.  A Job is distinct from a "
	 "Process in that a Job can be scheduled.")
   ] 
class CIM_Job : CIM_LogicalElement
{
      [Description (
	  "A free form string representing the Job's status.")
      ]	
   string JobStatus;
      [Description ("Time that the Job was submitted.")]
   datetime TimeSubmitted;
      [Description ("Time that the Job was begun.")]
   datetime StartTime;
      [Description ("Length of time that the Job has been executing.")]
   datetime ElapsedTime;
      [Description (
	  "Time after which the Job is invalid or should be stopped.")
      ]
   datetime UntilTime;
      [Description (
	  "User to be notified upon Job completion or failure.")
      ]
   string Notify;
      [Description ("User that submitted the Job.")] 
   string Owner;
      [Description (
	  "Indicates the urgency or importance of execution of a Job.")
      ]
   uint32 Priority;
};

// ===================================================================
// JobDestination 
// ===================================================================
   [Description (
       "JobDestination is a LogicalElement representing where a Job "
       "is submitted for processing. It can refer to a queue that "
       "contains zero or more Jobs, such as a print queue containing "
       "print Jobs. JobDestinations are hosted on Systems, similar to "
       "the way that Services are hosted on Systems.")
   ] 
class CIM_JobDestination : CIM_LogicalElement
{
      [Propagated ("CIM_System.CreationClassName"),
       Key,
       Description ("The scoping System's CreationClassName."),
       MaxLen (256)
      ]
   string SystemCreationClassName;
      [Propagated ("CIM_System.Name"),
       Key,
       Description ("The scoping System's Name."),
       MaxLen (256)
      ]
   string SystemName;
      [Key,
       Description (
	  "CreationClassName indicates the name of the class or the "
	  "subclass used in the creation of an instance. When used "
	  "with the other key properties of this class, this property "
	  "allows all instances of this class and its subclasses to "
	  "be uniquely identified."),
       MaxLen (256)
      ]
   string CreationClassName;
      [Override ("Name"),
       Key,
       Description (
	  "The inherited Name serves as key of a JobDestination "
	  "instance in a System."),
       MaxLen (256)
      ]
   string Name; 
};

// ===================================================================
// HostedJobDestination 
// ===================================================================
   [Association,
    Description (
       "An association between a JobDestination and a System on "
       "which it resides. The cardinality of this association is "
       "1-to-many.  A System may host many Job queues. Job"
       "Destinations are weak with respect to their hosting System. "
       "Heuristic: A JobDestination is hosted on the System where the "
       "LogicalDevices, SoftwareFeatures or Services that implement/"
       "provide the JobDestination are located.")
   ] 
class CIM_HostedJobDestination : CIM_Dependency
{
      [Override ("Antecedent"),
       Description ("The hosting System."),
       Min (1), Max (1)
      ] 
   CIM_System REF Antecedent;
      [Override ("Dependent"), 
       Description ("The JobDestination hosted on the System."),
       Weak
      ] 
   CIM_JobDestination REF Dependent;
};

// ===================================================================
// JobDestinationJobs 
// ===================================================================
   [Association,
    Description (
       "An association describing where a Job is submitted for "
       "processing, ie to which JobDestination.")
   ]
class CIM_JobDestinationJobs : CIM_Dependency
{
      [Override ("Antecedent"),
       Description ("The JobDestination, possibly a queue."),
       Max (1)        
      ] 
   CIM_JobDestination REF Antecedent;
      [Override ("Dependent"),
       Description ("The Job that is in the Job queue/Destination.")
      ] 
   CIM_Job REF Dependent;
};

// ===================================================================
// end of file
// ===================================================================


